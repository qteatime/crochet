% crochet

open crochet.concurrency;
open purr.ide.ui;

local abstract page;
local type page--coding(editor is editor) is page;
local type page--testing(editor is editor) is page;

local type editor(
  code is observable-cell<text>,
  json is observable-cell<text>,
);

implement purr-ui-page for pages--editor;
command pages--editor render-page do
  #widget app-frame
    | header: (
        #widget title-bar: (
          #widget breadcrumbs: ["Pickles", "Editor"]
        )
      )
    | body: new editor(
        code -> #observable-cell with-value: "",
        json -> #observable-cell with-value: "",
      );
end


implement to-widget for editor;
command editor as widget do
  let Coding-page = new page--coding(self);
  let Router =
    purr-ui make-router: (
      #router cached: "pickles-editor"
        | accepts: [#page--coding, #page--testing]
        | initial-page: Coding-page
    );

  #widget flex-row: [
    self menu: [coding -> Coding-page, testing -> new page--testing(self)],
    Router
      | transform
      | flex-grow: #flex-grow grow
      | overflow: #overflow hidden,
  ]
  | transform
  | flex-gap: #text-size base;
end

command editor menu: Pages do 
  #widget navigation: [
    #widget link: "Code" | to: Pages.coding,
    #widget link: "Test" | to: Pages.testing,
  ];
end


implement purr-ui-page for page--coding;
command page--coding location-selector = #page--coding;

command page--coding render-page do
  let Code = #reference code-editor: "code";
  let Input = Code value
               | map: (untaint make-trusted: _);
  Input stream subscribe: { X in self.editor.code <- X };

  #widget container: [
    #widget code-editor: "javascript"
      | value: self.editor.code
      | reference: Code
  ]
  | transform
  | padding: #text-size base
end


implement purr-ui-page for page--testing;
command page--testing location-selector = #page--testing;

command page--testing render-page do
  #widget flex-column: [
    "Current code:",
    self.editor.code
  ];
end