% crochet

open crochet.concurrency;
open purr.ide.ui;

local enum state = coding, testing;

local type editor(
  code is observable-cell<text>,
  json is observable-cell<text>,
);

implement purr-ui-page for pages--editor;
command pages--editor render-page do
  #widget app-frame
    | header: (
        #widget title-bar: (
          #widget breadcrumbs: ["Pickles", "Editor"]
        )
      )
    | body: new editor(
        code -> #observable-cell with-value: "",
        json -> #observable-cell with-value: "",
      );
end


implement to-widget for editor;
command editor as widget do
  let Router = purr-ui
                | router: "pickles-editor" accepts: (state lower-bound to: state upper-bound);

  #widget flex-row: [
    self menu,
    Router
      | transform
      | flex-grow: #flex-grow grow
      | overflow: #overflow hidden,
  ]
  | transform
  | flex-gap: #text-size base;
end

command editor menu do 
  #widget navigation: [
    #widget link: "Code" | to: #state coding,
    #widget link: "Test" | to: #state testing,
  ];
end

implement purr-ui-page for state--coding;
command state--coding render-page do
  let Code = #reference code-editor: "code";
  let Input = Code value
               | map: (untaint make-trusted: _);

  #widget container: [
    #widget code-editor: "javascript"
      | reference: Code,

    "Is empty: [Input map: (_ is-empty)]"
  ]
  | transform
  | padding: #text-size base
end

implement purr-ui-page for state--testing;
command state--testing render-page do
  "todo";
end