% crochet

command choose-player = choose-player();

// A small game about two girls playing tic-tac-toe against each other.
actor #erin :: player, mark;
actor #saga :: player, mark;
actor #empty :: mark;

// A tic-tac-toe board has the following structure:
//
//     _|_|_  (#line1)
//     _|_|_  (#line2)
//     _|_|_  (#line3)
//
// Here we're representing the lines as actors, and the columns as relations.
actor #line1 :: line;
actor #line2 :: line;
actor #line3 :: line;

// Note the multiplicity: each relation can hold multiple lines, but for
// each line only one Mark can be placed at a particular column.
relation Line* c1: Mark;
relation Line* c2: Mark;
relation Line* c3: Mark;

do {
  fact #line1 c1: #empty;
  fact #line1 c2: #empty;
  fact #line1 c3: #empty;

  fact #line2 c1: #empty;
  fact #line2 c2: #empty;
  fact #line2 c3: #empty;
  
  fact #line3 c1: #empty;
  fact #line3 c2: #empty;
  fact #line3 c3: #empty;
}

// A tic-tac-toe is a turn-based game, and we need to represent that.
// Again, we use a relation for this. And again the multiplicity here
// is one, as only one actor can act at a time.
relation Player turn;

relation No turns;
do {
  fact 0 turns;
}

// Crochet does not currently have any simple ordered structure, so we
// make do with explicitly moving turns forward.
context next-turn {
  when #erin turn {
    fact #saga turn;
  }

  when #saga turn {
    fact #erin turn;
  }

  when No turns {
    fact (No + 1) turns;
  }
}

// Now at each turn the players can choose one of the empty marks and place
// their own there. We'll not concern ourselves with having the players make
// *good* moves, only choosing a possible one.
repeatable action "Place mark at [Line] c1"
when
  Player turn,
  Line c1: #empty
{
  fact Line c1: Player;
  say: "[Player] marks [Line]'s first column";
}

repeatable action "Place mark at [Line] c2"
when
  Player turn,
  Line c2: #empty
{
  fact Line c2: Player;
  say: "[Player] marks [Line]'s second column";
}

repeatable action "Place mark at [Line] c3"
when
  Player turn,
  Line c3: #empty
{
  fact Line c3: Player;
  say: "[Player] marks [Line]'s third column";
}

// We also need to check the winning condition.
context check-winning-condition {
  when
    Line c1: X, Line c2: X, Line c3: X
    if X =/= #empty
  {
    win: X;
  }

  when
    #line1 c1: X, #line2 c1: X, #line3 c1: X
    if X =/= #empty
  {
    win: X;
  }

  when
    #line1 c2: X, #line2 c2: X, #line3 c2: X
    if X =/= #empty
  {
    win: X;
  }

  when
    #line1 c3: X, #line2 c3: X, #line3 c3: X
    if X =/= #empty
  {
    win: X;
  }

  when
    #line1 c1: X1, #line1 c2: X2, #line1 c3: X3,
    #line2 c1: X4, #line2 c2: X5, #line2 c3: X6,
    #line3 c1: X7, #line3 c2: X8, #line3 c3: X9
    if X1 =/= #empty and
       X2 =/= #empty and
       X3 =/= #empty and
       X4 =/= #empty and
       X5 =/= #empty and
       X6 =/= #empty and
       X7 =/= #empty and
       X8 =/= #empty and
       X9 =/= #empty
  {
    goto draw;
  }
}

// Because Crochet does not yet have an explicit Halt command,
// we rely on the implicit halting semantics of scenes to end the game.
command win: Player {
  say: "[Player] won!";
  goto ending;
}

scene ending {}

scene draw {
  say: "It's a draw";
}

// Currently we need to write a sort of game-loop for Crochet.
do {
  "Tic-Tac-Toe" title show;
  "A small turn-based game" text show;
  divider show;

  say: "Pick a character to play as:";
  choose-player;

  fact #erin turn;
  goto game;
}

scene game {
  trigger action;
  trigger show-board;
  trigger check-winning-condition;
  wait: 2;
  trigger next-turn;
  goto game;
}

// Finally, we have a small function to display the board visually
context show-board {
  when 
    #line1 c1: L1C1,
    #line1 c2: L1C2,
    #line1 c3: L1C3,
    #line2 c1: L2C1,
    #line2 c2: L2C2,
    #line2 c3: L2C3,
    #line3 c1: L3C1,
    #line3 c2: L3C2,
    #line3 c3: L3C3
  {
"[L1C1 mark]|[L1C2 mark]|[L1C3 mark]
[L2C1 mark]|[L2C2 mark]|[L2C3 mark]
[L3C1 mark]|[L3C2 mark]|[L3C3 mark]
" monospaced-text show;
  } 
}

command X mark {
  return
    if X === #empty then
      "_"
    else if X === #erin then
      "O"
    else if X === #saga then
      "X"
    else
      "?";
}