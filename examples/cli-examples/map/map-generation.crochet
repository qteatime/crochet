% crochet

open crochet.debug;

singleton dungeon;
type dungeon-gen(Max-Rooms is integer);

type room;

relation Room* to: Direction* lays: Room;
relation Dungeon-Generator* room: Room*;


command dungeon-gen room-allowance do
  let Rooms = (search self room: _) count;
  Rooms - self.Max-Rooms;
end

enum direction = north, east, south, west;

command north opposite = south;
command east opposite = west;
command south opposite = north;
command west opposite = east;

command dungeon generate-with-max-rooms: N do
  let Dungeon = new dungeon-gen(N);
  simulate for [Dungeon] until action quiescence;
  Dungeon;  
end

action (Dungeon is dungeon-gen) generate-initial-room
when not Dungeon room: _ do
  fact Dungeon room: (new room);
end

action (Dungeon is dungeon-gen) extrude-room
when
  let Max = Dungeon room-allowance,
  if Max =/= 0,
  Dungeon room: Room,
  Direction is direction,
  not Room to: Direction lays: _,
  let Extrusions = (search Room to: _ lays: _) count
rank
  100 - (Extrusions ** 3)
do
  let New-Room = new room;
  fact Dungeon room: New-Room;
  fact Room to: Direction lays: New-Room;
  fact New-Room to: (Direction opposite) lays: Room;
end


relation X* y: Y* char: Char;
relation Room* drawn;
type point(X is integer, Y is integer);

command dungeon-gen draw do
  let Size = self.Max-Rooms;
  let X = Size divided-by: 2;
  let Y = Size divided-by: 2;
  let Room = (search self room: Room).Room first;
  Room draw-at: new point(X, Y);

  for IY in 1 to: Size do
    let Columns =
      for IX in 1 to: Size do
        let Chars = match
                      when IX y: IY char: Char => Char;
                      always => " ";
                    end;
        Chars first;
      end;
    Columns
      |> _ as interpolation
      |> _ flatten-into-plain-text
  end
end

command room draw-at: Point do
  match
    when not self drawn => Point draw: "#";
  end;
  fact self drawn;

  match
    when self to: Direction lays: Room, not Room drawn do
      let P1 = Point move: Direction;
      P1 draw: Direction connecting-symbol;
      Room draw-at: (P1 move: Direction);
    end

    always do

    end
  end
end

command point move: north = new point(self.X, self.Y - 1);
command point move: east  = new point(self.X + 1, self.Y);
command point move: south = new point(self.X, self.Y + 1);
command point move: west  = new point(self.X - 1, self.Y);
command point draw: Char do
  fact (self.X) y: (self.Y) char: Char;
end

command north connecting-symbol = "|";
command south connecting-symbol = "|";
command east connecting-symbol = "—";
command west connecting-symbol = "—";

command main: _ do
  let Dungeon = benchmark block: { dungeon generate-with-max-rooms: 20 } tag: "Generate";
  let Map = benchmark block: { Dungeon draw } tag: "Draw";
  for Line in Map do
    transcript write: Line;
  end
  nothing;
end

