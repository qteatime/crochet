% crochet

open crochet.concurrency;
open purr.ide.ui;
open crochet.codec.basic;
open crochet.debug;

type decoding-editor(state is ljt-app);

implement to-widget for decoding-editor;
command decoding-editor as widget do
  self.state.vm map: (self maybe-render: _)
    | as widget
    | transform
    | height: #size fill
    | overflow: #overflow hidden;
end

command decoding-editor maybe-render: (X is error) =
  "(Could not construct a LJT VM from the grammar)"
    | as widget
    | transform
    | padding: (1.0 as root-em);

command decoding-editor maybe-render: (Vm is ok) do
  let Files-with-vm = self.state.vm zip: self.state.files with: { Vm, Files in
    Files map: { X in [file -> X, vm -> Vm] };
  };
  let Decoded-files = Files-with-vm map: { Xs in
    Xs map: { X in
      [X with result -> X.vm then: { Vm in Vm try-decode: X.file.content with: X.file.decoder }]
    };
  };

  Decoded-files map: { Xs in
    #widget tabbed-panel: (Xs map: (self render-tab: _))
      | transform
      | height: #size fill
  }
  | as widget
  | transform
  | height: #size fill
  | overflow: #overflow hidden;
end

command decoding-editor type-selector: Vm selected: S output: Cell do
  let Choice-ref = #reference select-one: "type";
  Choice-ref selected stream subscribe: { Type in
    Cell <- Type;
  };

  let Options = Vm all-types 
                  | keep-if: { T in
                      condition
                        when T is t-tagged => T.typ is t-tuple;
                        otherwise => false;
                      end
                    }
                  | map: { T in #select-option label: T.name value: T };
  #widget select-one: "Choose a type to decode"
    | options: Options
    | selected: S
    | reference: Choice-ref;
end

command decoding-editor render-tab: X do
  let Type = #observable-cell with-value: nothing;
  Type stream subscribe: { T in 
    let File = self.state.files value enumerate
                | find-first: { F in F value =:= X.file };
    let Changed = File map: { F in not ((F value).decoder =:= T) }
                    | value-or-default: false;

    condition
      when Changed and (File is ok) =>
        self.state.files <- self.state.files value at: File value index put: new ljt-file(File value value with decoder -> T);
      
      otherwise =>
        nothing;
    end
  };

  #tab id: X.file
    | header: X.file.name
    | content: (
      #widget flex-row: [
        #widget flex-column: [
          X.vm map: (self type-selector: _ selected: X.file.decoder output: Type)
            | value-or-default: "(Could not construct a VM)",

          ljt-ui hex-view: X.file.content,
        ]
        | transform
        | flex-gap: (0.5 as root-em)
        | width: (70.0 as percent)
        | flex-grow: #flex-grow grow
        | overflow: #overflow auto,

        #widget vertical-divider,

        #widget container: [
          self maybe-render-value: X.result
        ]
        | transform
        | overflow: #overflow auto
        | width: (30.0 as percent)
      ]
      | transform          
      | flex-wrap: #flex-wrap no-wrap
      | padding: (1.0 as root-em)
    );
end

command decoding-editor maybe-render-value: (Error is error) =
  "Could not decode the binary data";

command decoding-editor maybe-render-value: (Value is ok) =
  #widget container: [
    self render-value: Value value
  ];

command decoding-editor type: T value: V =
  #widget flex-column: [
    T as widget
      | transform
      | font-weight: #font-weight medium
      | font-family: #font-family monospace
      | font-size: #text-size extra-small,

    V
  ]
  | transform 
  | flex-gap: (0.25 as root-em);

command decoding-editor render-value: (V is v-bool) =
  condition
    when V.value => self type: "Boolean" value: "true";
    otherwise => self type: "Boolean" value: "false";
  end;

command decoding-editor render-value: (V is v-int8) =
  self type: "Int8" value: V.value to-text;

command decoding-editor render-value: (V is v-int16) =
  self type: "Int16" value: V.value to-text;

command decoding-editor render-value: (V is v-int32) =
  self type: "Int32" value: V.value to-text;

command decoding-editor render-value: (V is v-uint8) =
  self type: "UInt8" value: V.value to-text;

command decoding-editor render-value: (V is v-uint16) =
  self type: "UInt16" value: V.value to-text;

command decoding-editor render-value: (V is v-uint32) =
  self type: "UInt32" value: V.value to-text;

command decoding-editor render-value: (V is v-integer) =
  self type: "Integer" value: V.value to-text;

command decoding-editor render-value: (V is v-float32) =
  self type: "Float32" value: V.value to-text;

command decoding-editor render-value: (V is v-float64) =
  self type: "Float64" value: V.value to-text;

command decoding-editor render-value: (V is v-text) =
  self type: "Text" value: (
    #widget container: [V.value]
    | transform
    | font-family: #font-family monospace
    | padding: (1.0 as root-em)
    | border: (1 as pixels) style: #border-style dashed color: #color border
    | width: #size fit-content
    | height: #size fit-content
  );

command decoding-editor render-value: (V is v-array) =
  self type: "Array" value: (
    #widget flex-column: (
      V.values map: (self render-value: _)
        | transform
        | padding: (0.5 as root-em)
        | border-bottom: (1 as pixels) style: #border-style solid color: #color border
    )
    | transform
    | height: #size fit-content
  );

command decoding-editor render-value: (V is v-map) =
  self type: "Map" value: (
    #widget table: (
      V.value entries map: { Entry in
        [
          self render-value: Entry key,
          self render-value: Entry value,
        ]
      }
    )
    | sticky-header: ["Key", "Value"]
  );

command decoding-editor render-value: (V is v-tuple) =
  #widget table: (
    V.typ.fields zip: V.values with: { Field, Value in
      [
        #table-cell header: Field,
        self render-value: Value,
      ]
    }
  );

command decoding-editor render-value: (V is v-tagged) =
  self type: "[V.typ.name] ([#hex encode: V.tag | to-text-aligned])" value: (
    self render-value: V.value
  );

command decoding-editor render-value: (V is v-just) =
  self type: "T?" value: (self render-value: V.value);

command decoding-editor render-value: (V is v-none) =
  self type: "T?" value: "None";