% crochet

open crochet.language.ljt;
open crochet.concurrency;
open purr.ide.ui;
open crochet.debug;

type encoding-editor(state is ljt-app);

implement to-widget for encoding-editor;
command encoding-editor as widget do
  self.state.vm map: (self maybe-render: _)
    | as widget
    | transform
    | height: #size fill
    | overflow: #overflow hidden;
end

command encoding-editor maybe-render: (X is error) =
  "(Could not construct a LJT VM from the grammar)"
    | as widget
    | transform
    | padding: (1.0 as root-em);

command encoding-editor maybe-render: (Vm is ok) do
  #widget container: [
    self value-editor: Vm value
  ]
  | transform
  | padding: (1.0 as root-em)
  | overflow: #overflow hidden;
end

abstract encoding-value;
type encoding-value-unknown is encoding-value;
type encoding-value-ok(encoder is t-tagged, value is ljt-value) is encoding-value;

command encoding-editor value-editor: Vm do
  let Values = #observable-cell with-value: [];

  #widget flex-column: [
    #widget button: "New value"
      | on-click: { _ in
          Values <- Values value prepend: new encoding-value-unknown;
        },

    Values map: { Xs in 
      #widget flex-column: (Xs map: (self render-value: _ values: Values vm: Vm))
        | transform
        | flex-gap: (1.0 as root-em)
        | height: #size fit-content
    }
    | as widget
    | transform
    | flex-grow: #flex-grow grow
    | overflow: #overflow auto,
  ]
  | transform
  | flex-gap: (1.0 as root-em);
end

command encoding-editor render-value: (X is encoding-value-unknown) values: Values vm: Vm do
  let Cell = #observable-cell with-value: t-bool;
  Cell stream subscribe: { Type in
    let Value = Type default-value;
    Values <- Values value map: { I in
      condition
        when X =:= I => new encoding-value-ok(Type, Value);
        otherwise => I;
      end
    };
  };

  #widget flex-column: [
    self type-selector: Vm output: Cell
  ]
  | transform
  | height: #size fit-content
end

command encoding-editor render-value: (X is encoding-value-ok) values: Values vm: Vm do
  let Value = #observable-cell with-value: X.value;
  let Bytes = Value map: { X in Vm try-encode: X };

  #widget flex-row: [
    #widget card: [
      #card-child header: X.encoder name,
      #card-child body: (
        new value-editor(
          original -> X,
          values -> Values,
          vm -> Vm
        )
        | label: "" value: Value value set: { New-value in
            Value <- New-value
          }
      )
    ]
    | style: #card-style fluid
    | transform
    | width: (30.0 as root-em),

    #widget container: [
      Bytes map: (self maybe-hex-view: _ type: X.encoder)
    ]
    | transform
    | overflow-vertical: #overflow auto
    | width: (70.0 as root-em),
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | flex-wrap: #flex-wrap no-wrap
  | overflow: #overflow hidden;
end

command encoding-editor maybe-hex-view: (Error is error) type: _ =
  "Could not encode the value";

command encoding-editor maybe-hex-view: (Bytes is ok) type: T =
  #widget flex-column: [
    #widget flex-row: [
      #widget icon-button: (#widget icon: "copy")
        | on-click: { _ in
            let Files = self.state.files value;
            let New-file = new ljt-file(
              name -> "Example [Files count + 1 | to-text]" flatten-into-plain-text,
              decoder -> T,
              content -> Bytes value
            );
            self.state.files <- Files append: New-file;
          }
    ]
    | transform 
    | flex-justify-content: #flex-justify flex-end
    | padding: (0.5 as root-em)
    | height: #size fit-content,

    ljt-ui hex-view: Bytes value
  ];

local type value-editor(
  original is encoding-value,
  values is observable-cell<list<encoding-value>>,
  vm is ljt-vm,
);

command value-editor label: Label value: (V is v-bool) set: F do
  let Ref = #reference checkbox: "";
  Ref checked changes subscribe: { X in F(t-bool make: X) };

  #widget checkbox: "[Label] : Boolean"
    | checked: V value
    | reference: Ref;
end

command value-editor label: Label value: (V is v-int8) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-int8 make: X) };

  #widget text-input: "[Label] : Int8"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= -128) and (X <= 127) } label: "int8"
                           | map-error: { _ in "Int8 ranges from -128 to 127 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-int16) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-int16 make: X) };

  #widget text-input: "[Label] : Int16"
    | value: V.value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= -32_768) and (X <= 32_767) } label: "int16"
                           | map-error: { _ in "Int16 ranges from -32 768 to 32 767 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-int32) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes
    | keep-if: { X in X is ok}
    | map: (_ value)
    | subscribe: { X in F(t-int32 make: X) };

  #widget text-input: "[Label] : Int32"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= -2_147_483_648) and (X <= 2_147_483_647) } label: "int32"
                           | map-error: { _ in "Int32 ranges from -2 147 483 648 to 2 147 483 647 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-uint8) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-uint8 make: X) };

  #widget text-input: "[Label] : UInt8"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= 0) and (X <= 255) } label: "uint8"
                           | map-error: { _ in "UInt8 ranges from 0 to 255 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-uint16) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-uint16 make: X) };

  #widget text-input: "[Label] : UInt16"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= 0) and (X < 65_535) } label: "uint16"
                           | map-error: { _ in "UInt16 ranges from 0 to 65 535 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-uint32) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-uint32 make: X) };

  #widget text-input: "[Label] : UInt32"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | validate: { X in (X >= 0) and (X < 4_294_967_295) } label: "uint32"
                           | map-error: { _ in "UInt32 ranges from 0 to 4 294 967 295 (inclusive)"} }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-integer) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-integer make: X) };

  #widget text-input: "[Label] : Integer"
    | value: V value to-text
    | validation: { X in #integer try-parse: (untaint make-trusted: X) 
                           | map-error: { _ in "Not a valid integer value"} }
    | reference: Ref;
end

// TODO: restrict these to 32bit inputs as they'll be truncated by the encoder
command value-editor label: Label value: (V is v-float32) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-float32 make: X) };

  #widget flex-column: [
    #widget text-input: "[Label] : Float32"
      | value: V value to-text
      | validation: { X in #float-64bit try-parse: (untaint make-trusted: X) 
                            | map-error: { _ in "Not a valid float32 value"} }
      | reference: Ref,
    "Note that the textual representation is an approximation"
      | transform
      | font-size: #text-size small
      | font-color: #color text-secondary
  ]
  | transform
  | flex-gap: (0.5 as root-em)
  | height: #size fit-content
end

command value-editor label: Label value: (V is v-float64) set: F do
let Ref = #reference text-input: "";
  Ref validated-value changes 
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-float64 make: X) };

  #widget flex-column: [
    #widget text-input: "[Label] : Float64"
      | value: V value to-text
      | validation: { X in #float-64bit try-parse: (untaint make-trusted: X) 
                            | map-error: { _ in "Not a valid float64 value"} }
      | reference: Ref,
    "Note that the textual representation is an approximation"
      | transform
      | font-size: #text-size small
      | font-color: #color text-secondary
  ]
  | transform
  | flex-gap: (0.5 as root-em)
  | height: #size fit-content
end

open crochet.debug;
command value-editor label: Label value: (V is v-text) set: F do
  let Ref = #reference text-input: "";
  Ref validated-value changes
    | keep-if: { X in X is ok }
    | map: (_ value)
    | subscribe: { X in F(t-text make: X) };

  #widget text-input: "[Label] : Text"
    | validation: { X in #result ok: (untaint make-trusted: X) }
    | reference: Ref;
end

command value-editor label: Label value: (V is v-array) set: F do
  let Type = V codec;
  let Current = #observable-cell with-value: V;
  Current changes-by: (_ === _)
    | subscribe: { V in F(V) };
  

  #widget flex-column: [
    "[Label] : Array",

    #widget dynamic: { Surface in
      let Next-id = #cell with-value: 1;
      let Id-map = #cell with-value: #map empty;

      let Get-index = { Id in
        let Value = Id-map value at: Id;
        (Current value) values enumerate
          | find-first: { V in V value =:= Value }
          | map: (_ index);
      };

      let Add = { Value in
        let Id = Next-id value;
        Next-id <- Id + 1;
        Id-map <- Id-map value at: Id put: Value;

        let Setter = { New in
          let Index = Get-index(Id) value;
          let V = Current value;
          Id-map <- Id-map value at: Id put: New;
          Current <- Type make: (V values at: Index put: New);
        };

        let Widget =
          #widget dynamic: { Item-surface in 
            let Widget = (
              #widget flex-row: [
                #widget icon-button: (#widget icon: "trash")
                  | on-click: { _ in
                      Item-surface replace-contents: #widget space;
                      let Index = Get-index(Id) value;
                      Id-map <- Id-map value remove-at: Id;
                      let V = Current value;
                      Current <- Type make: (V values remove-at: Index);
                    },

                self label: "" value: Value set: Setter
                  | as widget
                  | transform
                  | padding: (0.5 as root-em)
              ]
              | transform
              | border-bottom: (1 as pixels) style: #border-style solid color: #color border
              | flex-align-items: #flex-align flex-start
              | flex-gap: (1.0 as root-em)
              | flex-wrap: #flex-wrap no-wrap
              | height: #size fit-content
              );

            Item-surface replace-contents: Widget;
          };

        Surface append: Widget;
      };

      Surface append: (
        #widget button: "Add value"
          | on-click: { _ in
              let V = Current value;
              let New-value = V codec item default-value;
              Current <- (Type make: (V values append: New-value));
              Add(New-value);
            }
      );

      for Value in V values do
        Add(Value);
      end
    }
    | transform
    | flex-layout: #flex-layout column
    | height: #size fill
    | flex-gap: (1.0 as root-em),
  ]
  | transform
  | flex-gap: (0.25 as root-em);
end

command value-editor label: Label value: (V is v-map) set: _ do
  "[Label] : Map";
end

command value-editor label: Label value: (V is v-tuple) set: F do
  let Current = #cell with-value: V;
  let Type = V codec;

  #widget flex-column: (
    V codec fields zip: V values enumerate with: { Field, Entry in
      let Setter = { X in
        let V = Current value;
        Current <- Type make: (V values at: Entry index put: X);
        F(Current value);
      };
      (self label: Field value: Entry value set: Setter)
        | as widget
        | transform
        | padding-vertical: (0.5 as root-em)
        | border-bottom: (1 as pixels) style: #border-style solid color: #color border
    }
  )
  | transform
  | height: #size fit-content;
end

command value-editor label: Label value: (V is v-tagged) set: F do
  #widget flex-column: [
    V codec name as widget
      | transform
      | font-weight: #font-weight bold
      | font-size: #text-size large,

    self label: "" value: V value set: { X in
      F(V codec make: X);
    },
  ]
  | transform
  | flex-gap: (0.5 as root-em)
end

command value-editor label: Label value: (V is v-choice) set: F do
  let Ref = #reference select-one: "type";
  let Current = #observable-cell with-value: V;
  Current changes-by: (_ === _)
    | subscribe: { V in F(V) };
  Ref selected changes
    | subscribe: { T in Current <- V codec make: T default-value };

  Current map: { V in 
    #widget flex-column: [
      #widget select-one: "Sub-type"
        | options: (V codec types values map: { T in
            #select-option label: T name value: T;
          })
        | selected: V value codec
        | reference: Ref,
      
      self label: Label value: V value set: { New in
        condition
          when New === V value => nothing;
          otherwise => Current <- V codec make: New;
        end
      }
    ]
    | transform
    | flex-gap: (0.5 as root-em)
  };
end

command value-editor label: Label value: (V is v-optional) set: F do
  let State = #observable-cell with-value: V;

  #widget flex-column: [
    Label as widget
      | transform
      | font-weight: medium,

    #widget given: State
      | when: #v-just show: { X in
          #widget flex-row: [
            #widget checkbox: ""
              | checked: true,

            self label: "" value: X value set: F,
          ]
          | transform
          | flex-align-items: #flex-align flex-start
          | flex-gap: (1.0 as root-em)
          | flex-wrap: #flex-wrap no-wrap
          | height: #size fit-content
        }
      | when: #v-none show: { _ in
          #widget checkbox: ""
            | checked: false
        }
  ]
end



command encoding-editor type-selector: Vm output: Cell do
  let Choice-ref = #reference select-one: "type";
  Choice-ref selected stream subscribe: { Type in
    Cell <- Type;
  };

  let Options = Vm all-types 
                  | keep-if: { T in
                      condition
                        when T is t-tagged => T typ is t-tuple;
                        otherwise => false;
                      end
                    }
                  | map: { T in #select-option label: T name value: T };
  #widget select-one: "Choose a type to encode"
    | options: Options
    | reference: Choice-ref;
end

