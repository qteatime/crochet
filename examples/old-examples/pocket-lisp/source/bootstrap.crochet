% crochet

// # Bootstrapping and Execution
//
// Once we have an AST, we can run these programs through our evaluator.
// But before we can get to the actual running, we need to set some state
// up. This is often called "bootstrapping". 
//
// In our case we provide two entry points for execution. `pocket-lisp run: _`
// will do all of the bootstrapping before executing the program. But
// `pocket-lisp run: _ with-environment: _` is a bit lower level, and expects
// one to do the bootstrapping before invoking it.
//
// The lower level execution primitive is used by the REPL, which sets up
// the environment once and reuses it for all subsequent program executions.

/// Bootstraps a Pocket Lisp VM and executes the given program.
command pocket-lisp run: (Program is plisp-program) do
  pocket-lisp run: Program with-environment: pocket-lisp global-environment;
end

/// Executes a Pocket Lisp program with the previously bootstrapped environment.
command pocket-lisp run: (Program is plisp-program) with-environment: (Env is environment) do
  let Frame = new frame(nothing, Env, nothing);
  Frame evaluate: Program;
end

// What does it mean to bootstrap something, though? In Crochet, that involves
// setting up the global environment---the functions that are available for
// any program to invoke without requiring the user to define them.
//
// In Pocket Lisp, this environment will provide relational operations,
// arithmetic operations, logical operations, list operations, and
// input/output operations.
//
// Because we have input/output operations we need a bit help here though,
// so we use `crochet.wrapper.node.io` package to take care of that part.
open crochet.wrapper.node.io;

command pocket-lisp global-environment do
  #environment empty
    | define: "=" native: (_ === _)
    | define: "not=" native: (_ =/= _)
    | define: ">" native: (_ > _)
    | define: ">=" native: (_ >= _)
    | define: "<" native: (_ < _)
    | define: "<=" native: (_ <= _)
    
    | define: "+" native: (_ + _)
    | define: "-" native: (_ - _)
    | define: "*" native: (_ * _)
    | define: "/" native: (_ / _)
    | define: "number?" native: (_ is-number)
    
    | define: "not" native: (not _)
    | define: "and" native: (_ and _)
    | define: "or" native: (_ or _)

    | define: "first" native: (_ head)
    | define: "rest" native: (_ tail)

    | define: "display" native-variadic: { Xs in 
        let Line = Xs fold-from: "" with: { A, B in "[A] [B print-format]" };
        terminal write-line: Line;
        p-nil;
      }
end