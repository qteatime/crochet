% crochet

open crochet.debug;

type primitive(name is text, arity is integer, operation is function);
type variadic-primitive(name is text, operation is function);
relation lisp-op: Name* do: Operation;

prelude
  fact lisp-op: "add" do: new primitive("add", 2, (_ + _));
  fact lisp-op: "sub" do: new primitive("sub", 2, (_ - _));
  fact lisp-op: "mul" do: new primitive("mul", 2, (_ * _));
  fact lisp-op: "list" do: new variadic-primitive("list", { A in A });
  fact lisp-op: "print" do: new primitive("print", 1, { A in A });
end

command program evaluate =
  for Form in self.forms do
    let Result = Form evaluate;
    transcript write: Form location;
    transcript inspect: Form evaluate;
    transcript write: "---";
  end;

command form--apply evaluate do
  let Callee = self.callee evaluate;
  let Args = for X in self.arguments do X evaluate end;
  Callee apply: Args;
end

command form--integer evaluate do
  (#integer try-parse: self.value).value;
end

command form--atom evaluate do
  let Name = self.name;
  (search lisp-op: Name do: Op).Op first;
end

command form--unit evaluate do
  [];
end


command form--apply location = self.pos annotated-source;
command form--integer location = self.pos annotated-source;
command form--atom location = self.pos annotated-source;
command form--unit location = self.pos annotated-source;

command primitive apply: (Args is list) do
  let F = self.operation;
  let Arity = self.arity;
  condition
    when Arity =:= 1 => F(Args at: 1);
    when Arity =:= 2 => F(Args at: 1, Args at: 2);
    otherwise do
      assert not "unsupported arity";
    end
  end
end

command variadic-primitive apply: (Args is list) do
  let F = self.operation;
  F(Args);
end