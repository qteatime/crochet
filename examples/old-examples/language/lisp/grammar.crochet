% crochet
// This file is generated from Lingua

open crochet.text.parsing.lingua;

// Type definitions
abstract node;
type program is node(pos is interval, forms is tuple);

abstract form is node;
type form--apply is form(pos is interval, callee is form, arguments is tuple);
type form--integer is form(pos is interval, value is text);
type form--atom is form(pos is interval, name is text);
type form--unit is form(pos is interval);

// Grammar definition
define grammar = lazy (#lingua grammar: "\r\n  Lisp {\r\n    Program  = Form* end  -- alt1\n\n\nForm  = Apply  -- alt1\n | Integer  -- alt2\n | Atom  -- alt3\n | Unit  -- alt4\n\n\nApply  = \"(\" Form Form+ \")\"  -- alt1\n\n\nInteger  = integer  -- alt1\n\n\nAtom  = atom  -- alt1\n\n\nUnit  = \"(\" \")\"  -- alt1\n\n\natom  = letter+  -- alt1\n\n\ninteger  = digit+  -- alt1\n\r\n  }\r\n  ");

define to-ast = lazy ((force grammar) semantics: [
  "Program" -> #lingua visitor-identity,
  "Program_alt1" -> #lingua visitor-lambda: { Node, Xs, _ in (new program((#lingua interval: Node), Xs))  },
  "Form" -> #lingua visitor-identity,
  "Form_alt1" -> #lingua visitor-singleton,
  "Form_alt2" -> #lingua visitor-singleton,
  "Form_alt3" -> #lingua visitor-singleton,
  "Form_alt4" -> #lingua visitor-singleton,
  "Apply" -> #lingua visitor-identity,
  "Apply_alt1" -> #lingua visitor-lambda: { Node, _, C, A, _ in (new form--apply((#lingua interval: Node), C, A))  },
  "Integer" -> #lingua visitor-identity,
  "Integer_alt1" -> #lingua visitor-lambda: { Node, I in (new form--integer((#lingua interval: Node), I))  },
  "Atom" -> #lingua visitor-identity,
  "Atom_alt1" -> #lingua visitor-lambda: { Node, N in (new form--atom((#lingua interval: Node), N))  },
  "Unit" -> #lingua visitor-identity,
  "Unit_alt1" -> #lingua visitor-lambda: { Node, _, _ in (new form--unit((#lingua interval: Node)))  },
  "atom" -> #lingua visitor-identity,
  "atom_alt1" -> #lingua visitor-source,
  "integer" -> #lingua visitor-identity,
  "integer_alt1" -> #lingua visitor-source,
]);
  
