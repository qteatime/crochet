% crochet

open crochet.concurrency;
open crochet.ui.agata;

effect todo-ui with
  add(title is text);
  remove(id is todo-id);
  mark(id is todo-id, done is boolean);
end


implement to-widget for todo;
command todo as widget do
  #widget card-container: (
    #widget flex-column: self.items
      | gap: { G in G row: (0.5 as em) }
  );
end


implement to-widget for todo-item;
command todo-item as widget do
  let Done = #observable-cell with-value: self.done;
  let Title = #observable-cell with-value: self.title;
  Done stream subscribe: { X in
    perform todo-ui.mark(self.id, X);
  };

  #widget card: (
    #widget flex-row: [
      #widget checkbox
        | checked: Done,
      #flex-child with: (Title)
        | grow: 1,
      #widget button: (#widget icon: "trash")
        | clicked: { S in S listener subscribe: { _ in perform todo-ui.remove(self.id) } }
        | disabled: Done
    ]
  )
end