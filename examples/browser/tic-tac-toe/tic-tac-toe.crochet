% crochet

open crochet.novella;
open crochet.random;
open crochet.debug;

abstract player;

singleton erin is player with
  command mark do "X" as element end
  command name do "Erin" as element end
end

singleton saga is player with
  command mark do "O" as element end
  command name do "Saga" as element end
end

singleton empty with
  command mark do "_" as element end
end

singleton board with
  command render do
    let L1 = (search l1 at: _ mark: M).M map: (_ mark);
    let L2 = (search l2 at: _ mark: M).M map: (_ mark);
    let L3 = (search l3 at: _ mark: M).M map: (_ mark);
    
    "
    [#text join: L1 with: "|"]
    [#text join: L2 with: "|"]
    [#text join: L3 with: "|"]
    " as element | monospace;
  end
end

enum line = l1, l2, l3;
command l1 as element = "L1" as element;
command l2 as element = "L2" as element;
command l3 as element = "L3" as element;

enum column = c1, c2, c3;
command c1 as element = "C1" as element;
command c2 as element = "C2" as element;
command c3 as element = "C3" as element;

enum state = on-going, won, draw;


relation Line* at: Column* mark: Who;
relation State state;
relation Who player;

define lines = [l1, l2, l3];
define columns = [c1, c2, c3];

prelude
  for L in lines, C in columns do
    fact L at: C mark: empty;
  end;

  fact on-going state;
end

command player won do
  let Result =
    match
      when l1 at: C mark: self,
           l2 at: C mark: self,
           l3 at: C mark: self => true;
      
      when L at: c1 mark: self,
           L at: c2 mark: self,
           L at: c3 mark: self => true;

      when l1 at: c1 mark: self,
           l2 at: c2 mark: self,
           l3 at: c3 mark: self => true;
      
      when l1 at: c3 mark: self,
           l2 at: c2 mark: self,
           l3 at: c1 mark: self => true;

      always => false;
    end;
  
  Result first;
end


type ref;

command main-html: Root do
  #random with-source: #random with-random-seed do: {
    novella with-root: Root do: {
      novella show: (
        novella header: [
          "Tic-Tac-Toe" as element | title,
          "A small example of AI-driven game" as element | subtitle
        ]
      );

      let PlayerSelection = new ref;
      novella show: [
        novella paragraph:
          "Choose a character to play as:",

        novella menu: [
          "Saga ([saga mark])" as element
            | button-for: PlayerSelection value: saga,
          "Erin ([erin mark])" as element
            | button-for: PlayerSelection value: erin
        ]
      ];

      let Player = novella wait-selection: PlayerSelection;
      fact Player player;

      simulate for [erin, saga] until not on-going state
      on pick-action: Actions for: Turn do
        let Choice = Turn choose-action: Actions;
        transcript inspect: [actions -> Actions, turn -> Turn, choice -> Choice];
        Choice;
      end
    }
  };
end

command (P is player) choose-action: Actions do
  let Choice =
    match
      when P player do
        novella choose-action: Actions;
      end

      always do
        #random shared-instance choose: Actions;
      end
    end;
  
  Choice first;
end


action (X is player) mark "Mark [self.L], [self.C]"
when L at: C mark: empty do
  fact L at: C mark: X;

  novella show: [
    "[X name] marks [L], [C]",
    board render,
  ];
end

when X simulate-turn, if X won do
  novella show: "[X name] won!";
  fact won state;
end

when on-going state, X is player, if not (X won), not L at: C mark: empty do
  novella show: "It's a draw!";
  fact draw state;
end
