% crochet

singleton erin {
  command mark { "X" }
  command name { "Erin" }
}

singleton saga {
  command mark { "O" }
  command name { "Saga" }
}

singleton empty {
  command mark { "_" }
}

singleton board {
  command show {
    let S = (search 
              line.l1 c1: M11 c2: M12 c3: M13,
              line.l2 c1: M21 c2: M22 c3: M23,
              line.l3 c1: M31 c2: M32 c3: M33
            ) first;
    "
    [S.M11 mark]|[S.M12 mark]|[S.M13 mark]
    [S.M21 mark]|[S.M22 mark]|[S.M23 mark]
    [S.M31 mark]|[S.M32 mark]|[S.M33 mark]
    " inspect;
  }
}


enum line = l1 | l2 | l3;
enum column = c1 | c2 | c3;
enum state = on-going | won | draw;

relation Line* at: Column* mark: Who;
relation State state;

define lines = [line.l1, line.l2, line.l3];
define columns = [column.c1, column.c2, column.c3];


predicate X won {
  when L at: column.c1 mark: X,
       L at: column.c2 mark: X,
       L at: column.c3 mark: X;
  
  when line.l1 at: C mark: X,
       line.l2 at: C mark: X,
       line.l3 at: C mark: X;

  when line.l1 at: column.c1 mark: X,
       line.l2 at: column.c2 mark: X,
       line.l3 at: column.c3 mark: X;
  
  when line.l1 at: column.c3 mark: X,
       line.l2 at: column.c2 mark: X,
       line.l3 at: column.c1 mark: X;
}

predicate Line c1: M1 c2: M2 c3: M3 {
  when Line at: column.c1 mark: M1,
       Line at: column.c2 mark: M2,
       Line at: column.c3 mark: M3;
}


do {
  for L in lines {
    for C in columns {
      fact L at: C mark: empty;
    }
  };

  fact state.on-going state;
}

scene main {
  simulate for [erin, saga]
  until not state.on-going state
  on pick-action: Actions for: Turn {
    Actions random-choice
  };
}


action "Mark [L], [C]"
when X simulate-turn, L at: C mark: empty {
  "[X name] marks [L], [C]" inspect;
  fact L at: C mark: X;
  board show;
  100 sleep;
}

when X simulate-turn, X won {
  "[X name] won!" inspect;
  fact state.won state;
}

when state.on-going state, not X won, not L at: C mark: empty {
  "It's a draw!" inspect;
  fact state.draw state;
}
