% crochet

singleton erin {
  command mark { "X" }
  command name { "Erin" }
}

singleton saga {
  command mark { "O" }
  command name { "Saga" }
}

singleton empty {
  command mark { "_" }
}

singleton board {
  command show {
    let S = (search l1 c1: M11 c2: M12 c3: M13,
                    l2 c1: M21 c2: M22 c3: M23,
                    l3 c1: M31 c2: M32 c3: M33) first;
    "
    [S.M11 mark]|[S.M12 mark]|[S.M13 mark]
    [S.M21 mark]|[S.M22 mark]|[S.M23 mark]
    [S.M31 mark]|[S.M32 mark]|[S.M33 mark]
    " inspect;
  }
}

type line;
singleton l1 is line;
singleton l2 is line;
singleton l3 is line;

type column;
singleton c1 is column;
singleton c2 is column;
singleton c3 is column;

type state;
singleton on-going is state;
singleton won is state;
singleton draw is state;

relation Line* at: Column* mark: Who;
relation State state;

define lines = [l1, l2, l3];
define columns = [c1, c2, c3];


predicate Line c1: M1 c2: M2 c3: M3 {
  when Line at: c1 mark: M1,
       Line at: c2 mark: M2,
       Line at: c3 mark: M3;
}


do {
  for L in lines {
    for C in columns {
      fact L at: C mark: empty;
    }
  };

  fact on-going state;
}


predicate X won {
  when L at: c1 mark: X,
       L at: c2 mark: X,
       L at: c3 mark: X;
  
  when l1 at: C mark: X,
       l2 at: C mark: X,
       l3 at: C mark: X;

  when l1 at: c1 mark: X,
       l2 at: c2 mark: X,
       l3 at: c3 mark: X;
  
  when l1 at: c3 mark: X,
       l2 at: c2 mark: X,
       l3 at: c1 mark: X;
}

scene main {
  simulate for [erin, saga]
  until not on-going state
  on pick-action: Actions for: Turn {
    Actions random-choice
  };
}

action "Mark [L], [C]"
when X simulate-turn, L at: C mark: empty {
  "[X name] marks [L], [C]" inspect;
  fact L at: C mark: X;
  board show;
  100 sleep;
}

when X simulate-turn, X won {
  "[X name] won!" inspect;
  fact won state;
}

when on-going state, not X won, not L at: C mark: empty {
  "It's a draw!" inspect;
  fact draw state;
}
