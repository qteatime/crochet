% crochet
// This file is generated from Lingua

open crochet.text.parsing.lingua;

// Type definitions
abstract node;
type plisp-program(pos is interval, forms is list) is node;

abstract plisp-form is node;
type plisp-form--procedure(pos is interval, name is text, parameters is list, body is list) is plisp-form;
type plisp-form--define(pos is interval, name is text, value is plisp-form) is plisp-form;
type plisp-form--if(pos is interval, expr is plisp-form, consequent is plisp-form, alternate is plisp-form) is plisp-form;
type plisp-form--quote(pos is interval, expr is plisp-form) is plisp-form;
type plisp-form--apply(pos is interval, callee is plisp-form, arguments is list) is plisp-form;
type plisp-form--variable(pos is interval, name is text) is plisp-form;
type plisp-form--number(pos is interval, digits is text) is plisp-form;
type plisp-form--string(pos is interval, contents is text) is plisp-form;
type plisp-form--nil(pos is interval) is plisp-form;
type plisp-form--true(pos is interval) is plisp-form;
type plisp-form--false(pos is interval) is plisp-form;

// Grammar definition
define grammar = lazy (#lingua grammar: "\r\n  Pocket_Lisp {\r\n    Program  = Form*  -- alt1\n\n\nForm  = \"(\" id<\"define\"> name \"[\" name* \"]\" Form* \")\"  -- alt1\n | \"(\" id<\"define\"> name Form \")\"  -- alt2\n | \"(\" id<\"if\"> Form Form Form \")\"  -- alt3\n | \"(\" id<\"quote\"> Form \")\"  -- alt4\n | \"(\" Form Form* \")\"  -- alt5\n | Value  -- alt6\n | name  -- alt7\n\n\nValue  = number  -- alt1\n | string  -- alt2\n | boolean  -- alt3\n | id<\"nil\">  -- alt4\n\n\nnumber  = digit+  -- alt1\n\n\nstring  = \"\\\"\" string_chars \"\\\"\"  -- alt1\n\n\nstring_chars  = (~\"\\\"\" any)*  -- alt1\n\n\nboolean  = id<\"true\">  -- alt1\n | id<\"false\">  -- alt2\n\n\nname  = (letter | symbol) (letter | symbol | digit)*  -- alt1\n\n\nsymbol  = \"!\"  -- alt1\n | \"%\"  -- alt2\n | \"*\"  -- alt3\n | \"-\"  -- alt4\n | \"_\"  -- alt5\n | \"+\"  -- alt6\n | \"=\"  -- alt7\n | \"^\"  -- alt8\n | \"?\"  -- alt9\n | \"/\"  -- alt10\n | \">\"  -- alt11\n | \"<\"  -- alt12\n | \"|\"  -- alt13\n\n\ncomment  = \";\" (~newline any)*  -- alt1\n\n\nnewline  = \"\\n\"  -- alt1\n | \"\\r\"  -- alt2\n\n\nid<word>  = word ~(letter | symbol | digit)  -- alt1\n\r\n  }\r\n  ");

define to-ast = lazy ((force grammar) semantics: [
  "Program" -> #lingua visitor-identity,
  "Program_alt1" -> #lingua visitor-lambda: { Node, Forms in (new plisp-program((#lingua interval: Node), Forms))  },
  "Form" -> #lingua visitor-identity,
  "Form_alt1" -> #lingua visitor-lambda: { Node, _, _, N, _, Args, _, Body, _ in (new plisp-form--procedure((#lingua interval: Node), N, Args, Body))  },
  "Form_alt2" -> #lingua visitor-lambda: { Node, _, _, N, V, _ in (new plisp-form--define((#lingua interval: Node), N, V))  },
  "Form_alt3" -> #lingua visitor-lambda: { Node, _, _, T, C, A, _ in (new plisp-form--if((#lingua interval: Node), T, C, A))  },
  "Form_alt4" -> #lingua visitor-lambda: { Node, _, _, F, _ in (new plisp-form--quote((#lingua interval: Node), F))  },
  "Form_alt5" -> #lingua visitor-lambda: { Node, _, App, Args, _ in (new plisp-form--apply((#lingua interval: Node), App, Args))  },
  "Form_alt6" -> #lingua visitor-lambda: { Node, V in V },
  "Form_alt7" -> #lingua visitor-lambda: { Node, N in (new plisp-form--variable((#lingua interval: Node), N))  },
  "Value" -> #lingua visitor-identity,
  "Value_alt1" -> #lingua visitor-lambda: { Node, X in (new plisp-form--number((#lingua interval: Node), X))  },
  "Value_alt2" -> #lingua visitor-lambda: { Node, X in (new plisp-form--string((#lingua interval: Node), X))  },
  "Value_alt3" -> #lingua visitor-lambda: { Node, X in X },
  "Value_alt4" -> #lingua visitor-lambda: { Node, _ in (new plisp-form--nil((#lingua interval: Node)))  },
  "number" -> #lingua visitor-identity,
  "number_alt1" -> #lingua visitor-source,
  "string" -> #lingua visitor-identity,
  "string_alt1" -> #lingua visitor-lambda: { Node, _, X, _ in X },
  "string_chars" -> #lingua visitor-identity,
  "string_chars_alt1" -> #lingua visitor-source,
  "boolean" -> #lingua visitor-identity,
  "boolean_alt1" -> #lingua visitor-lambda: { Node, _ in (new plisp-form--true((#lingua interval: Node)))  },
  "boolean_alt2" -> #lingua visitor-lambda: { Node, _ in (new plisp-form--false((#lingua interval: Node)))  },
  "name" -> #lingua visitor-identity,
  "name_alt1" -> #lingua visitor-source,
  "symbol" -> #lingua visitor-identity,
  "symbol_alt1" -> #lingua visitor-source,
  "symbol_alt2" -> #lingua visitor-source,
  "symbol_alt3" -> #lingua visitor-source,
  "symbol_alt4" -> #lingua visitor-source,
  "symbol_alt5" -> #lingua visitor-source,
  "symbol_alt6" -> #lingua visitor-source,
  "symbol_alt7" -> #lingua visitor-source,
  "symbol_alt8" -> #lingua visitor-source,
  "symbol_alt9" -> #lingua visitor-source,
  "symbol_alt10" -> #lingua visitor-source,
  "symbol_alt11" -> #lingua visitor-source,
  "symbol_alt12" -> #lingua visitor-source,
  "symbol_alt13" -> #lingua visitor-source,
  "comment" -> #lingua visitor-identity,
  "comment_alt1" -> #lingua visitor-source,
  "newline" -> #lingua visitor-identity,
  "newline_alt1" -> #lingua visitor-source,
  "newline_alt2" -> #lingua visitor-source,
  "id" -> #lingua visitor-identity,
  "id_alt1" -> #lingua visitor-lambda: { Node, X in X },
]);
  
