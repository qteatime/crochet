type program(pos: interval, forms: form[])

type form =
  | apply(pos: interval, callee: form, arguments: form[])
  | integer(pos: interval, value: text)
  | atom(pos: interval, name: text)
  | unit(pos: interval)

grammar Lisp : program {
  Program =
    | xs:Form* end  -> program(meta, xs)

  Form =
    | Apply
    | Integer
    | Atom
    | Unit

  Apply =
    | "(" c:Form a:Form+ ")"  -> form.apply(meta, c, a)

  Integer =
    | i:integer               -> form.integer(meta, i)

  Atom =
    | n:atom                  -> form.atom(meta, n)

  Unit =
    | "(" ")"                 -> form.unit(meta)

  
  token atom = letter+
  token integer = digit+
}