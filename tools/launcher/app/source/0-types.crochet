% crochet

singleton purr;
singleton purr-api;

// Managing projects
type purr-project-meta(
  filename,
  metadata
);

type purr-project(
  id,
  global meta is purr-project-meta
);

type purr-package-capabilities(
  global required is list<purr-capability>,
  global provided is list<purr-capability>
);

type purr-capability(
  global name is text,
  global description is text,
);

type purr-dependency(
  global name is text,
  global target is text,
  global capabilities is list<purr-capability>
);

// type purr-project(
//   name is text,
//   description is text,
//   root // is directory
// );

// The launcher state
abstract purr-state;
singleton purr-state-bare is purr-state;
type purr-state-project(
  current-project is purr-project
) is purr-state;

// The launcher screens
abstract purr-screen;
singleton ps-welcome is purr-screen;
type ps-summary(project is purr-project) is purr-screen;
type ps-test(project is purr-project) is purr-screen;

singleton purr-common-widgets;

effect purr with
  home();
  new-project();
  import-project();
  open-project(project is purr-project);
end

type purr-ipc(clients);
type purr-ipc-client(id, frame, global project);

abstract ipc-message;
// Outgoing
abstract ipc-outgoing is ipc-message;
singleton imo-spawn-testing is ipc-outgoing;
singleton imo-run-tests is ipc-outgoing;

// Incoming
abstract ipc-incoming is ipc-message;
singleton im-ready is ipc-incoming;
type im-failed-to-start(message is text) is ipc-incoming;
singleton im-testing-started is ipc-incoming;
type im-test-result(result) is ipc-incoming;

effect purr-ipc with
  get-instance();
  add-client(id, client);
end

effect actor-ipc with
  get-client();
end

type actor-ipc(
  mailbox is cell<list<ipc-incoming>>,
  client is purr-ipc-client,
  state is cell<actor-ipc-state>,
  busy is cell<boolean>
);

abstract actor-ipc-state;
singleton actor-ipc-loading is actor-ipc-state;
singleton actor-ipc-ready is actor-ipc-state;
type actor-ipc-failed-to-start(message is text) is actor-ipc-state;
type actor-ipc-testing(results is cell<list<test-result>>) is actor-ipc-state;
type actor-ipc-done-testing(results is cell<list<test-result>>) is actor-ipc-state;

abstract message-handle-result;
singleton mhr-done is message-handle-result;
type mhr-transition(new-state is actor-ipc-state) is message-handle-result;
