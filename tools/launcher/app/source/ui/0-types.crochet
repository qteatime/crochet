% crochet

singleton agata;

type agata-state(
  history is list,
  current
);

effect agata-presentation with
  show(page);
  alert(message);
end

effect agata-canvas with
  replace(new-contents);
  append(new-contents);
  prepend(new-contents);
end

type observable(state is cell<A>, subscribers is cell<list<(A -> nothing)>>);

singleton dom-renderer;
type dom-canvas(box);
type dom-dynamic-canvas(box);
type dom-node(box);
type dom-event(box);
type dom-window(box);


abstract measure;
type pixels(value is integer) is measure;
type percent(value is float) is measure;
type em(value is float) is measure;

type gap(horizontal is measure, vertical is measure);

type layout(properties is record);

singleton agata-widget;
abstract widget;
type w-container(tag is text, class is text, children is list<widget>) is widget;
type w-style(class is text, children is list<widget>) is widget;
type w-icon(name is text) is widget;
type w-text(contents is text) is widget;
type w-button(title is text, on-click, children is list<widget>) is widget;
type w-action-button(icon is text, title is text, description is text, on-click) is widget;
type w-icon-button(icon is text, title is text, on-click) is widget;
type w-tabbed-panel(tabs is list<wn-tab>) is widget;
type w-flex-column(children is list<widget>) is widget;
type w-flex-row(children is list<widget>) is widget;
type w-layout(layout is layout, child is widget) is widget;
type w-frame(window is dom-window) is widget;
type w-dynamic(renderer is (dom-dynamic-canvas -> nothing)) is widget;
type w-switch(observable is observable, cases is list<wn-switch-case>) is widget;
type w-observable(observable is observable<W has to-widget>) is widget;

type wn-switch-case(guard, handler is (any -> widget));

type wn-tab(title, contents);

trait to-widget with
  command Self as widget;
end