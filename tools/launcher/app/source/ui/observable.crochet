% crochet

local singleton module;

command #observable with-value: Initial-value do
  let Subscribers = #cell with-value: [];
  let State = #cell with-value: Initial-value;
  new observable-cell(State, Subscribers);
end

command observable subscribe: (Handler is (any -> nothing)) do
  let Captured = Handler capture;
  self.subscribers <- self.subscribers value append: Captured;
  Handler(self value);
  Captured;
end

command observable unsubscribe: (Handler is (any -> nothing)) do
  self.subscribers <- self.subscribers value remove-if: { X in X =:= Handler };
end

command observable value do
  self.state value;
end


command observable-cell <- Value do
  self.state <- Value;
  for Handler in self.subscribers value do
    Handler(Value);
  end
end



command observable map: (Handler is (A -> B)) do
  let Initial-value = Handler(self value);
  let Result = new mapped-observable(
    #cell with-value: Initial-value,
    Handler,
    self,
    #cell with-value: []
  );
  self subscribe: (module for: Result publish: _);
  Result;
end

command module for: (Observable is mapped-observable) publish: Value0 do
  let Value = Observable.mapping(Value0);
  Observable.state <- Value;
  for Handler in Observable.subscribers value do
    Handler(Value);
  end
end


command observable filter: (Handler is (A -> boolean)) initial-value: Initial
requires acceptable-initial :: Handler(Initial)
do
  let Old-value = self value;
  let Initial-value = condition
                        when Handler(Old-value) => Old-value;
                        otherwise => Initial;
                      end;
  let Result = new filtered-gobservable(
    #cell with-value: Initial-value,
    Handler,
    self,
    #cell with-value: []
  );
  self subscribe: (module for: Result publish: _);
  Result;
end

command module for: (Observable is filtered-observable) publish: Value do
  condition
    when Observable.filter(Value) do
      Observable.state <- Value;
      for Handler in Observable.subscribers value do
        Handler(Value);
      end
    end

    otherwise do nothing end
  end
end