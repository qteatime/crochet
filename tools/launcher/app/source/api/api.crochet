% crochet

open crochet.language.json;

command purr-api examples do
  let Examples = #json parse: (foreign api.examples());
  for X in Examples do
    new purr-project-meta(X.filename, X.meta);
  end
end

command purr-api libraries do
  let Libraries = #json parse: (foreign api.libraries());
  for X in Libraries do
    new purr-project-meta(X.filename, X.meta);
  end
end

command purr-api my-projects do
  let Libraries = #json parse: (foreign api.my-projects());
  for X in Libraries do
    new purr-project-meta(X.filename, X.meta);
  end
end

command purr-api spawn: (Project is purr-project-meta) do
  let Id = foreign api.spawn(Project.filename);
  Id;
end

command purr-api read-project: Id do
  let Pkg = #json parse: (foreign api.read-project(Id));
  new purr-project-meta(Pkg.filename, Pkg.meta);
end

command purr-api create-project: (Project is purr-new-project) do
  let Id = foreign api.create-project(
    Project.name,
    Project.title,
    "*"
  );
  Id;
end

command purr-api package: (Project is purr-project) target: (Target is purr-target) do
  let Result = foreign api.package(Project.id, Target code);
  condition
    when Result.success => #result ok: Result.output;
    otherwise => #result error: Result.message;
  end
end

command purr-api launch-directory: (Project is purr-project) do
  foreign api.launch-directory(Project.id);
end

command purr-api launch-code-editor: (Project is purr-project) do
  foreign api.launch-code-editor(Project.id);
end

command purr-api previously-granted-capabilities: (Project is purr-project) -> set<text> do
  #set from: (foreign api.previously-granted-capabilities(Project.id));
end

command purr-api grant: (Project is purr-project) capabilities: (Cap is set<text>) do
  foreign api.grant-capabilities(Project.id, Cap values);
end