% crochet

open crochet.language.json;
local singleton module;

// IPC machinery
command #purr-ipc setup: (Block is (() -> nothing)) do
  let IPC-cell = #cell with-value: new purr-ipc([->]);
  handle
    module setup-listener: IPC-cell;
    Block();
  with
    on purr-ipc.add-client(Id, Actor) do
      let IPC = IPC-cell value;
      IPC-cell <- new purr-ipc(IPC.clients at: Id put: Actor);
      foreign dom.install-hidden-frame(Actor.client.frame.box);
      continue with nothing;
    end

    on purr-ipc.get-instance() do
      continue with IPC-cell value;
    end
  end
end

command #purr-ipc shared-instance =
  perform purr-ipc.get-instance();

command purr-ipc add-client: (Project is purr-project) frame: (Frame is dom-window) do
  let Client = new purr-ipc-client(Project.id, Frame, Project);
  let Mailbox = #cell with-value: [];
  let State = #cell with-value: actor-ipc-loading;
  let Busy = #cell with-value: false;
  let Actor = new actor-ipc(Mailbox, Client, State, Busy);
  perform purr-ipc.add-client(Project.id, Actor);
  Actor;
end

command module setup-listener: IPC-cell do
  foreign dom.on-message({ Msg0 in 
    let Msg = #json parse: Msg0;
    let Id = Msg.id;
    let IPC = IPC-cell value;
    let Client = IPC client-for-id: Id;
    Client dispatch: (IPC parse-message: Msg);
  });  
end

command purr-ipc client-for-id: Id =
  self.clients at: Id;

command purr-ipc parse-message: (Message is record) do
  let Method = Message.method;
  let Data = Message.data;
  condition
    when Method === "ready" => im-ready;
    when Method === "failed-to-start" => new im-failed-to-start(Data.message);
    when Method === "testing-started" => im-testing-started;
  end
end

command purr-ipc-client serialise-message: imo-spawn-testing =
  [ 
    method -> "spawn-testing",
    id -> self.id,
    data -> [->],
  ];

command purr-ipc serialise-message: imo-run-tests =
  [
    method -> "run-tests",
    id -> self.id,
    data -> [->]
  ];

command purr-ipc-client dispatch: (X is ipc-outgoing) do
  let Message = self serialise-message: X;
  foreign dom.post-message(self.frame, Message);
  self;
end

// IPC messages
command purr-ipc-client spawn-tests =
  self dispatch: imo-spawn-testing;

command purr-ipc-client run-tests =
  self dispatch: imo-run-tests;

// IPC handlers
command actor-ipc dispatch: (Message is ipc-incoming) do
  self store-message: Message;
  condition
    when not self.busy value do
      self dispatch-next;
    end

    otherwise do nothing end
  end
end

command actor-ipc store-message: Message do
  self.mailbox <- self.mailbox value append: Message;
end

command actor-ipc select-message do
  let State = self.state value;
  let Mailbox = self.mailbox value;
  let Message = Mailbox find: (State accepts: _);
  Message;
end

command actor-ipc dispatch-next do
  self.busy <- true;
  let MessageR = self select-message;
  condition
    when MessageR is ok do
      let Message = MessageR value;
      let Mailbox = self.mailbox value;
      self.mailbox <- Mailbox remove-if: { X in X =:= Message };
      self handle: Message;
      self dispatch-next;
    end

    otherwise do
      self.busy <- false;
    end
  end
end

command actor-ipc handle: Message do
  handle
    let Result = self.state value handle: Message;
    self handle-result: Result;
  with
    on actor-ipc.get-client() => continue with self.client;
  end
end

command actor-ipc handle-result: mhr-done do
  nothing
end

command actor-ipc handle-result: (S is mhr-transition) do
  self.state <- S.new-state;
end

command actor-ipc-state client = perform actor-ipc.get-client();

command actor-ipc-state accepts: _ = false;

command actor-ipc-loading accepts: im-ready = true;
command actor-ipc-loading handle: im-ready =
  new mhr-transition(actor-ipc-ready);

command actor-ipc-loading accepts: im-failed-to-start = true;
command actor-ipc-loading handle: (M is im-failed-to-start) do
  let Project = self client project;
  agata message-box: (
    "Failed to start [Project meta title].
    
     [M.message]"
    flatten-into-plain-text
  );
  mhr-done;
end

command actor-ipc-testing accepts: im-test-result = true;
command actor-ipc-testing handle: (X is im-test-result) do
  self.results <- self.results value append: X.result;
  mhr-done;
end