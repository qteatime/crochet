% crochet

open crochet.wrapper.node.file-system;
open crochet.wrapper.node.io;
open crochet.wrapper.node.os;
open crochet.language.ljt;

local define compiler-table = lazy (#map from: [
  "ts" -> { Vm, _Opts in #ts-compiler from-vm: Vm },
  "crochet" -> { Vm, Opts in #crochet-compiler from-vm: Vm prefix: Opts.prefix },
  "ts-types" -> { Vm, _Opts in #tsd-compiler from-vm: Vm },
  "json" -> { Vm, _Opts in #json-compiler from-vm: Vm },
]);

command main: Args do
  Args count < 2
    | implies: {
        terminal write-line: "Usage: crochet ljtc -- (ts|crochet|json|ts-types) <file> {prefix}";
        process exit: 1;
      };

  let Compiler-key = Args first;
  let File = Args second;
  let Prefix = condition
                 when Args count < 3 => "ljt-schema";
                 otherwise => Args third;
               end;
  let Compiler = (force compiler-table) at: Compiler-key;

  let Schema = file-system file: (#path from-text: File)
                |> _ read-text
                |> untaint make-trusted: _;


  let Ast = ljt parse: Schema;
  let Vm = #ljt-vm from-module: Ast;
  let Code = Compiler(Vm, [prefix -> Prefix]) generate;

  terminal write-line: Code;
  nothing;
end