% crochet

open purr.ide.ui;
open crochet.concurrency;

type purr-project-page(project is purr-project) is purr-page;

implement purr-ui-page for purr-project-page;
command purr-project-page location-selector = #purr-project-page;

effect project-page with
  open-app(App is purr-application);
  show-app(App is purr-application);
end

command purr-project-page render-page do
  let App-home = new application-home(self.project);
  let Current-application = #observable-cell with-value: [app -> nothing, node -> nothing];
  let Open-applications = #observable-cell with-value: [];
  let App-state = Current-application zip: Open-applications with: { Current, Open in [current -> Current.app, all -> Open.app] };

  handle
    let App-home-rec = [app -> App-home, node -> App-home render-application commit];
    Current-application <- App-home-rec;
    Open-applications <- [App-home-rec];

    #purr-page title: self title menu: self side-menu body: (
      #widget flex-column: [
        Current-application
          |> _ map: { X in X.node }
          |> _ as widget
          |> _ transform
          |> _ height: #size fill
          |> _ overflow: #overflow auto,

        App-state map: (self app-bar: _)
          |> _ as widget
          |> _ transform
          |> _ flex-shrink: #flex-shrink no,
      ]
    )
    |> _ as widget
    |> _ commit;
  with
    use purr-project-state project: self.project;

    on project-page.open-app(App) do
      let Existing-app = Open-applications value find-first: { X in X.app =:= App };
      condition
        when Existing-app is ok do
          Current-application <- Existing-app value;
          continue with nothing;
        end

        when Existing-app is error do
          let App-rec = [app -> App, node -> App render-application commit];
          Open-applications <- Open-applications value append: App-rec;
          Current-application <- App-rec;
          continue with nothing;
        end
      end
    end

    on project-page.show-app(App) do
      let App-rec = Open-applications value find-first: { X in X.app =:= App }
                      | value-or-panic: "internal: application is not open";
      Current-application <- App-rec;
      continue with nothing;
    end
  end
end

command purr-project-page title =
  purr current-project map: (_ title);

command purr-project-page side-menu =
  #widget navigation: [
    #widget link: "Close" | to: purr-welcome-page,
  ];

command purr-project-page app-bar: (Apps is record) =
  #widget bottom-panel: [
    #widget flex-row: (
      Apps.all map: (self app-indicator: _ current: Apps.current)
    )
    | transform
    | flex-justify-content: #flex-justify center
    | flex-align-items: #flex-align stretch,
  ];

command purr-project-page app-indicator: (App is purr-application) current: (Current is purr-application) =
  pui application-indicator: App
      action: { _ in perform project-page.show-app(App) } capture
      current: (App =:= Current);