% crochet

open purr.ide.ui;
open crochet.concurrency;
open crochet.debug;

type application-configure(project is purr-project) is purr-application;

command application-configure title = "Configure";
command application-configure icon = #widget icon: "cog";
command application-configure description = "View and update the configuration of your project";

enum application-configure-pages =
  meta-data,
  capabilities;

command application-configure render-application do
  #widget tabbed-panel: [
    #tab id: "meta-data"
      | header: "Basic information"
      | content: self basic-info,

    #tab id: "crochet"
      | header: "Package meta-data"
      | content: self crochet-package,

    #tab id: "capabilities"
      | header: "Capabilities"
      | content: self capabilities,
  ]
  | layout: #tabbed-panel-layout vertical-left
  | selected: "meta-data"
  | commit;
end

command application-configure title: Title actions: Actions body: Body do
  #widget flex-column: [
    #widget flex-row: [
      pui heading-2: Title
        | transform
        | flex-grow: #flex-grow grow,
      (Actions as widget)
        | transform
        | width: #size fit-content,
    ]
    | transform
    | flex-align-items: #flex-align baseline
    | flex-justify-content: #flex-justify space-between,
    Body,
  ]
  | transform
  | flex-gap: #text-size base
  | padding-horizontal: #text-size large-2x
  | padding-vertical: #text-size base
  | height: #size fit-content; 
end

command application-configure crochet-package do
  let Project = purr current-project;
  let Name = #reference text-input: "name";
  let Target = #reference select-one: "target";
  let Stability = #reference select-one: "stability";
  let Initial = #observable-cell with-value: [
                 name -> Project value meta name,
                 target -> Project value meta target,
                 stability -> Project value meta stability,
               ];
  Project stream subscribe: { X in
    Initial <- [
      name -> X meta name,
      target -> X meta target,
      stability -> X meta stability,
    ]
  };

  let Form = Name validated-value zip: Target selected and: Stability selected
             with: { N, T, S in
               N map: { N in [name -> N, target -> T, stability -> S] }
             };
  let Raw-form = Name value zip: Target selected and: Stability selected
                 with: { N, T, S in
                   [name -> N, target -> T, stability -> S]
                 };

  self
    title: "Crochet package"
    actions: (
      self action-panel-initial: Initial
           raw: Raw-form
           form: Form
           save: { Changes in
            purr update-project: (
              Project value changeset           
                | meta: { M in M name: Changes.name
                                | target: Changes.target 
                                | stability: Changes.stability }
            );
           }
    )
    body: (
      #widget flex-column: [
        #widget flex-column: [
          #widget text-input: "Name"
            | value: (Initial map: { X in X.name })
            | placeholder: "name.your.project"
            | validation: { X in
                #crochet-package try-parse-name: X
                  | map-error: { _ in 
                      #widget flex-column: [
                        "
                        Name segments must start with a lowercase letter ('a' to 'z'),
                        and may only contain lowercase letters, digits ('0' to '9'),
                        and hyphens ('-'). A name can be made out of multiple segments
                        separated by a dot ('.');
                        ",
                        "
                        E.g.: 'name.your.project'
                        "
                      ]
                    }
              }
            | reference: Name,
          pui secondary-text: "
            Names are conventially written in a \"reverse domain\" format.
            E.g.: if you own a domain like \"cute-games.com\", you could
            use a name like \"com.cute-games.my-project-name\".
          "
            | transform
            | font-size: #text-size small
        ]
        | transform
        | flex-gap: (0.5 as root-em),

        #widget flex-column: [
          #widget select-one: "Target platform"
            | options: [
                #select-option label: "Any platform" value: #crochet-package-target any,
                #select-option label: "Web Browsers" value: #crochet-package-target browser,
                #select-option label: "Node.js" value: #crochet-package-target node,
              ]
            | selected: (Initial map: { X in X.target })
            | reference: Target,
        ]
        | transform
        | flex-gap: (0.5 as root-em),

        #widget flex-column: [
          #widget select-one: "API stability"
            | options: [
                #select-option label: "Unknown" value: #crochet-package-stability unknown,
                #select-option label: "Experimental" value: #crochet-package-stability experimental,
                #select-option label: "Stable" value: #crochet-package-stability stable,
                #select-option label: "Frozen" value: #crochet-package-stability frozen,
                #select-option label: "Deprecated" value: #crochet-package-stability deprecated,
              ]
            | selected: (Initial map: { X in X.stability })
            | reference: Stability
        ]
      ]
      | transform
      | flex-gap: (1.5 as root-em)
    );
end

command application-configure action-panel-initial: Initial raw: Raw form: Form save: Save do
  let Has-changes = Initial zip: Raw with: { I, R in not (I =:= R) };
  let Is-valid = Form map: { F in F is ok };

  #widget flex-row: [
    #widget icon-button: (#widget icon: "undo")
      | on-click: { _ in Initial <- Initial value }
      | transform
      | visible: Has-changes,

    #widget icon-button: (#widget icon: "check")
      | on-click: { _ in
          Form value
            | map: { X in Save(X) }
            | recover: { _ in
                purr-ui show-modal: "Cannot update the information because some fields contain
                                     unsupported data.";
              }
        }
      | transform
      | font-color: #color green-800
      | visible: (Has-changes zip: Is-valid with: (_ and _)),
  ]
  | transform
  | flex-gap: (1.0 as root-em);
end

command application-configure basic-info do
  let Title = #reference text-input: "title";
  let Description = #reference text-input: "description";
  let Project = purr current-project;

  let Initial = #observable-cell with-value: [
    title -> Project value title,
    description -> Project value description,
  ];
  Project stream subscribe: { X in Initial <- [title -> X title, description -> X description]};
  let Raw-form = Title value zip: Description value with: { T, D in [title -> T, description -> D]};
  let Form = Raw-form map: { F in
    #result ok: [
      title -> untaint make-trusted: F.title,
      description -> untaint make-trusted: F.description
    ]
  };
  
  self
    title: "Basic information"
    actions: (
      self action-panel-initial: Initial
           raw: Raw-form
           form: Form
           save: { Changes in
             purr update-project: (
               Project value changeset
                 | title: Changes.title
                 | description: Changes.description
                 | meta: { M in M title: Changes.title | description: Changes.description }
             );
           }
    )
    body: (
      #widget flex-row: [
        #widget flex-column: [
          #widget text-input: "Title"
            | value: (Initial map: { X in X.title })
            | placeholder: "Your Great Project"
            | reference: Title,

          #widget text-input: "Description"
            | value: (Initial map: { X in X.description})
            | placeholder: "Does this and that and that other thing"
            | reference: Description,
        ]
        | transform
        | flex-gap: (1.5 as root-em),

        #widget flex-column: [
          ("Cover image" as widget)
            | transform
            | font-weight: #font-weight medium,

          #widget flex-column: [
            (Project map: { X in self render-cover: X cover }) as widget
              | transform
              | width: #size fill
          ]
          | transform
          | background-color: #color neutral-900
          | width: #size fill
          | aspect-ratio: (#aspect-ratio width: 16 height: 9)
          | border-radius: #border-radius rounded
          | overflow: #overflow hidden
          | flex-align-items: #flex-align center
          | flex-justify-content: #flex-justify stretch
          | border: #line-size pixel style: #border-style solid color: #color border,
          
          Project map: { X in self cover-image-actions: X cover }
        ]
        | transform
        | flex-gap: (0.5 as root-em)
        | maximum-width: (24.0 as root-em),
      ]
      | transform
      | flex-gap: (3.0 as root-em)
    );
end

command application-configure cover-image-actions: (X is error) =
  pui action-button: "Add cover image"
    | icon: "images"
    | on-click: { _ in purr update-cover-image: purr current-project value }
    | as widget
    | transform
    | width: #size fill;

command application-configure cover-image-actions: (X is ok) =
  #widget flex-column: [
    pui action-button: "Replace cover image"
      | icon: "images"
      | on-click: { _ in purr update-cover-image: purr current-project value },

    pui action-button: "Remove cover image"
      | icon: "times"
      | on-click: { _ in purr remove-cover-image: purr current-project value },
  ]
  | transform
  | flex-gap: (0.5 as root-em);

command application-configure render-cover: (X is error) =
  #widget space;

command application-configure render-cover: (X is ok) =
  #widget image: (#image mime: (X value).mime bytes: (X value).bytes)
    | transform
    | width: #size fill;



command application-configure capabilities do
  self
    title: "Capabilities"
    actions: #widget space
    body: (
      #widget tabbed-panel: [
        #tab id: "requested"
          | header: "Requested"
          | content: self requested-capabilities,
        
        #tab id: "provided"
          | header: "Provided"
          | content: self provided-capabilities,
      ]
      | selected: "requested"
    );
end

command application-configure requested-capabilities do
  let Capabilities = purr current-project map: { X in X meta capabilities };
  let Required = Capabilities map: { X in X strictly-required };
  let Optional = Capabilities map: { X in X optional };
  let Trusted = Capabilities map: { X in X trusted };

  #widget flex-column: [
    self capability-section: "Required"
        description: "The package needs these capabilities to run."
        items: Required
        kind: #crochet-capability-kind required,

    self capability-section: "Optional"
        description: "The package can use these capabilities to provide additional features."
        items: Optional
        kind: #crochet-capability-kind optional,

    self capability-section: "Trusted"
        description: "The package will be granted these capabilities automatically when
                      included as part of Crochet's Trusted Computing Base (standard library)."
        items: Trusted
        kind: #crochet-capability-kind trusted,
  ]
  | transform
  | padding-vertical: (1.0 as root-em);
end

command application-configure capability-section: Title description: Desc items: Items-cell kind: (Kind is crochet-capability-kind) do
  Items-cell map: { Items in 
    #widget flex-column: [
      pui heading-3: Title,
      pui secondary-text: Desc
        | transform
        | font-size: #text-size small,

      #widget space
        | transform
        | height: (1.0 as root-em),

      pui list: ([
        pui action-button: "Add a [Kind to-enum-text] capability"
          | icon: "plus"
          | on-click: { _ in
              purr-ui show-modal: (self add-capability: Kind);
            }
          | as widget
          | transform
          | margin: (1.0 as root-em)
      ] ++ (Items map: (self requested-capability: _)))
    ]
    | transform
    | margin-bottom: (1.5 as root-em);
  };
end

command application-configure provided-capabilities do
  let OCapabilities = purr current-project map: { X in X meta capabilities provided };

  #widget flex-column: [
    pui secondary-text: "
      Capabilities that this package provides to allow controlled access to
      its powerful functionality.
    ",

    OCapabilities map: { Capabilities in
      pui list: ([
        pui action-button: "Add a provided capability"
          | icon: "plus"
          | as widget
          | transform
          | margin: (1.0 as root-em)
      ] ++ (Capabilities map: (self provided-capability: _)))
    },
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | padding-vertical: (1.0 as root-em);
end

command application-configure provided-capability: Capability do
  #widget flex-row: [
    pui capability-summary: Capability,
    #widget flex-row: [
      #widget icon-button: (#widget icon: "pen"),
      #widget icon-button: (#widget icon: "trash"),
    ]
    | transform
    | width: #size fit-content
    | flex-gap: (1.0 as root-em)
  ]
  | transform
  | flex-gap: (1.0 as root-em);
end

command application-configure requested-capability: X =
  #widget flex-row: [
    (pui requested-capability: X)
      | transform
      | flex-grow: #flex-grow grow,

    #widget flex-row: [
      #widget icon-button: (#widget icon: "pen")
        | on-click: { _ in
            let Modal = purr-ui show-modal: (self edit-capability: X close: { Modal close })
          },
      #widget icon-button: (#widget icon: "trash")
        | on-click: { _ in purr remove-capability: X from: purr current-project value },
    ]
    | transform
    | flex-gap: (0.5 as root-em)
    | width: #size fit-content,
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | flex-align-items: #flex-align center;


command application-configure edit-capability: (Capability is crochet-package-requested-capability) close: Close do
  let Reason-cell = #observable-cell with-value: Capability reason;
  let Reason = Reason-cell map: (untaint make-trusted: _);
  let Not-updated = Reason map: { X in X =:= Capability reason };
  let Source-capability = #crochet-library shared-instance lookup-details: Capability;

  #widget flex-column: [
    pui heading-2: "Update capability",

    self render-capability-review-details: Source-capability,
    self reason-editor: Capability reason output: Reason-cell,

    #widget button: "Update capability"
      | disabled: Not-updated
      | on-click: { _ in
          let Capability = new crochet-package-requested-capability(
            Capability with
              meta -> [
                Capability.meta with reason -> Reason value
              ]
          );
          purr update-capability: Capability in: purr current-project value;
          Close();
        }
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | maximum-width: (35.0 as root-em)
  | minimum-height: (25.0 as root-em)
  | height: (75.0 as viewport-height);
end

local abstract add-capability-mode;
local singleton add-capability-mode--search is add-capability-mode;
local type add-capability-mode--review(cap is crochet-package-provided-capability) is add-capability-mode;

command application-configure add-capability: (Kind is crochet-capability-kind) do
  let Mode = #observable-cell with-value: add-capability-mode--search;

  #widget flex-column: [
    pui heading-2: "Add [Kind to-enum-text] capabilities",

    #widget given: Mode
      | when: #add-capability-mode--search show: (self add-capability-search: Kind mode: Mode)
      | when: #add-capability-mode--review show: (self add-capability-review: _ kind: Kind mode: Mode)
      | transform
      | height: #size fill
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | maximum-width: (35.0 as root-em)
  | minimum-height: (25.0 as root-em)
  | height: (75.0 as viewport-height);
end

command application-configure add-capability-search: Kind mode: Mode do
  let Library = #crochet-library shared-instance;
  let OCapabilities = purr current-project map: { X in Library grantable-capabilities: X meta };
  let Current = purr current-project map: { X in
    X meta capabilities user-grantable
      |> _ map: (_ name)
      |> #set from: _;
  };
  let Input = #observable-cell with-value: "";
  let Search-ref = #reference text-input: "search";
  let Filtered-capabilities = Search-ref value zip: OCapabilities and: Current with: { Value, Capabilities, Granted in
    let Trusted-value = untaint make-trusted: Value;
    Capabilities
      | keep-if: { C in (C name contains: Trusted-value)
                        or (C title contains: Trusted-value) }
      | remove-if: { C in Granted contains: C name };
  };

  #widget flex-column: [
    #widget text-input: "Capability name or title"
      | placeholder: "Type to search"
      | value: Input
      | reference: Search-ref,
    
    Filtered-capabilities
      |> _ map: { Xs in
           pui list: (Xs slice-to: 4 | map: (self render-add-capability: _ mode: Mode))
         }
      |> _ as widget
      |> _ transform
      |> _ height: #size fill
      |> _ overflow: #overflow auto,
  ]
  | transform
  | flex-gap: (1.0 as root-em);
end

command application-configure add-capability-review: Cap-mode kind: Kind mode: Mode do
  let Capability = Cap-mode.cap;
  let Reason = #observable-cell with-value: Capability reason;

  #widget flex-row: [
    #widget icon-button: (#widget icon: "chevron-left")
      | on-click: { _ in Mode <- add-capability-mode--search },

    #widget flex-column: [
      self render-capability-review-details: Capability,
      self reason-editor: Capability reason output: Reason,

      #widget button: "Add capability"
        | on-click: { _ in
            let Capability = new crochet-package-requested-capability(
              Kind,
              [
                name -> Capability name,
                reason -> untaint make-trusted: Reason value
              ]
            );
            purr add-capability: Capability to: purr current-project value;
            Mode <- add-capability-mode--search
          }
    ]
    | transform
    | flex-gap: (1.0 as root-em),
  ]
  | transform
  | flex-gap: (1.0 as root-em)
  | flex-align-items: #flex-align flex-start;
end

command application-configure reason-editor: Reason output: Cell do
  let Reason-ref = #reference text-input: "reason";
  Reason-ref value stream subscribe: { X in Cell <- X };

  #widget flex-column: [
    #widget text-input: "Usage reason"
      | value: Reason
      | reference: Reason-ref,

    pui secondary-text: "
      Giving a reason for why your package needs this capability allows
      users to make more informed risk decisions. Keep it short, and focus
      on what it enables your package to do.
      "
      | transform
      | font-size: #text-size small,
  ]
  | transform
  | height: #size fit-content;
end

command application-configure render-capability-review-details: Capability do
  #widget flex-column: [
    #widget flex-row: [
      #widget flex-column: [
        pui heading-3: Capability title,
        (Capability name as widget)
          | transform
          | font-family: #font-family monospace,
      ]
      | transform
      | flex-grow: #flex-grow grow,

      pui capability-risk: Capability risk,
    ]
    | transform
    | flex-align-items: #flex-align center
    | height: #size fit-content,

    pui secondary-text: Capability description
      | transform
      | flex-grow: #flex-grow grow
      | overflow: #overflow auto
      | white-space: #text-whitespace preserve-and-wrap,
  ]
  | transform
  | flex-gap: (1.0 as root-em);
end

command application-configure render-add-capability: Capability mode: Mode do
  #widget flex-row: [
    pui capability-summary: Capability
      | transform
      | flex-grow: #flex-grow grow,

    #widget icon-button: (#widget icon: "chevron-right")
      | on-click: { _ in Mode <- new add-capability-mode--review(Capability) },
  ]
  | transform
  | height: #size fit-content
  | flex-align-items: #flex-align center
  | flex-gap: (1.0 as root-em);
end
