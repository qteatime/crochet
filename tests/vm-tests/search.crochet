% crochet

open crochet.debug;

relation Who* search-at: Where;

abstract thing;

singleton lielle is thing with
  search-at: foyer;
end

singleton karis is thing with
  search-at: foyer;
end

singleton alice is thing with
  search-at: garden;
end

singleton foyer is thing;
singleton garden is thing;

implement equality for thing;
command (A is thing) === (B is thing) = A =:= B;

test "Search" do
  assert (search Who search-at: garden) === [
    [Who -> alice]
  ];

  assert (search lielle search-at: Where) === [
    [Where -> foyer]
  ];
  
  let Near = search A search-at: P,
                    B search-at: P,
                    if A =/= B;
  assert Near === [
    [A -> lielle, B -> karis, P -> foyer],
    [A -> karis, B -> lielle, P -> foyer]
  ];

  let Not-near = search A search-at: P,
                        let N = (search B search-at: P, if A =/= B) count,
                        if N === 0;
  assert Not-near === [
    [A -> alice, P -> garden, N -> 0]
  ];

  let Count = search let Place = garden,
                     let N = (search Who search-at: Place) count,
                     let S = (search Who search-at: Place);
  assert Count === [
    [
      Place -> garden,
      N -> 1,
      S -> [[Who -> alice]]
    ]
  ];

  let Person = lielle;
  assert (search Person search-at: Where) === [
    [Where -> foyer]
  ];

  let Match = 
    (match
      when lielle search-at: garden do "Umpossible!" end
      always do "A fallback" end
    end);
  assert Match === [
    "A fallback"
  ];

  let Match2 =
    (match
      when A search-at: B do [A, B] end
      always do "A fallback" end
    end);
  assert Match2 === [
    [lielle, foyer],
    [karis, foyer],
    [alice, garden],
  ]
end