% crochet

// Note: we don't provide the non-integral division operator (/) yet because
// we neither have fractional numbers nor floats.

// == Arithmetic
command (X is integer) + (Y is integer) =
  foreign crochet.native.integer.add(X, Y);

command (X is integer) - (Y is integer) =
  foreign crochet.native.integer.sub(X, Y);

command (X is integer) * (Y is integer) =
  foreign crochet.native.integer.mul(X, Y);

command (X is integer) divided-by: (Y is integer) =
  foreign crochet.native.integer.div(X, Y);

command (X is integer) remainder-of-division-by: (Y is integer) =
  foreign crochet.native.integer.rem(X, Y);

command (X is integer) divide-by-with-remainder: (Y is integer) do
  [
    Quotient -> X divided-by: Y,
    Remainder -> X remainder-of-division-by: Y,
  ];
end

command (X is integer) ** (P is integer) =
  foreign crochet.native.integer.power(X, P);

// == Relational
command (X is integer) < (Y is integer) = 
  foreign crochet.native.integer.lt(X, Y);

command (X is integer) <= (Y is integer) = 
  foreign crochet.native.integer.lte(X, Y);

command (X is integer) > (Y is integer) = 
  foreign crochet.native.integer.gt(X, Y);

command (X is integer) >= (Y is integer) = 
  foreign crochet.native.integer.gte(X, Y);

// == Ranges
command (Min is integer) to: (Max is integer) =
  foreign crochet.native.integer.range(Min, Max);

command (Min is integer) until: (Max is integer) do
  Min to: (Max - 1)
end