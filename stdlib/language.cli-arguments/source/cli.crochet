% crochet

open crochet.parsing.combinators;
open crochet.debug;

command cli try-parse: (Arg is cli-arg) with: Arguments do
  Arg parse: Arguments | map: (_ realise);
end

command cli parse: (Arg is cli-arg) with: Arguments do
  let Result = cli try-parse: Arg with: Arguments;
  condition
    when Result is parser-result-ok => Result value;
    always => panic: ("\n[Arg usage]" flatten-into-plain-text);
  end
end

command cli explain-error: (Error is parser-result-error) do
  let Stream = Error position;

  let Formatted =
     "Error at argument [Stream position] in:

      [Stream contents]

      Reason: [Error error-message]
     ";
  
  panic: Formatted flatten-into-plain-text;
end



local type test-cli;
type test-cli-run is test-cli(package, options);
type test-cli-repl is test-cli(package, options);

command test-cli === (That is test-cli) =
  (self.package =:= That.package) and (self.options =:= That.options);

command test-cli-run run = "Running [self.package]";
command test-cli-repl run = "REPL-ing [self.package]";

test "Arguments parsing" do
  let Package =
    cli positional: "package"
      | description: "The root package";

  let Options = cli options: [
    cli option: "--verbose" | boolean
      | description: "Output a lot of information",
    cli option: "--capabilities"
      | description: "Provide capabilities to the package"
  ];
  let Run = cli command: "run" with: [Package, Options]
              | description: "Run a crochet package"
              | map: { X in new test-cli-run(X.package, X.options) };

  let Repl = cli command: "repl" with: [Package, Options]
              | description: "Start a REPL"
              | map: { X in new test-cli-repl(X.package, X.options) };

  let App = cli app: "crochet" with: [Run, Repl]
              | description: "The Crochet command line interface";

  assert (cli parse: Run with: ["run", "file.json"])
    === new test-cli-run("file.json", [->]);

  assert (cli try-parse: App with: ["repl"]) is parser-result-error;
  assert (cli try-parse: Run with: ["repl"]) is parser-result-error;

  assert (cli parse: App with: ["run", "file.json", "--verbose", "--capabilities", "io"])
    === new test-cli-run("file.json", ["--verbose" -> true, "--capabilities" -> "io"]);
end