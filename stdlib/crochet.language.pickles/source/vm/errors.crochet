% crochet

open crochet.text.parsing.lingua;

abstract pickles-error;

/// Raised when trying to lookup a variable that was not defined
type pickles-error--undefined-variable(
  environment is environment,
  name is text
) is pickles-error;

/// Raised when trying to define a variable with the same name of an existing one
type pickles-error--conflicting-variable(
  environment is environment,
  name is text,
  value is pickles-value
) is pickles-error;

/// Raised when the parser cannot work with the value's type
type pickles-error--invalid-type(
  expected-type is text,
  actual is any
) is pickles-error;

/// Raised when one of the items in the list does not adhere to the list's parser
type pickles-error--invalid-list(
  parser is pickles-value,
  actual is any,
  index is integer,
  error is pickles-error,
) is pickles-error;

/// Raised when trying to look up a module that wasn't loaded
type pickles-error--module-not-found(
  name is text,
) is pickles-error;

/// Raised when trying to look up a name that isn't exported
type pickles-error--not-exported(
  module is pickles-module,
  name is text
) is pickles-error;

/// Raised when trying to parse with something that can't be used as a parser
type pickles-error--not-a-parser(
  parser is pickles-value,
  value is any,
) is pickles-error;

/// Raised when both sides of an union fail
type pickles-error--both-failed(
  union is ast-expression--union,
  left is pickles-error,
  right is pickles-error,
  value is any,
) is pickles-error;

/// Raised when finding a value at a path fails
type pickles-error--path-not-found(
  parser is ast-expression--at,
  origin is any
) is pickles-error;

/// Raised when trying to apply something that isn't a function
type pickles-error--not-a-function(
  value is pickles-value,
  arguments is list<pickles-value>,
) is pickles-error;

/// Raised when a literal parser doesn't find an exact match
type pickles-error--not-equals(
  expected is pickles-value,
  actual is any,
) is pickles-error;

/// Raised when an item in a sequence fails
type pickles-error--sequence-failed(
  sequence is ast-expression--sequence,
  parser is ast-expression,
  index is integer,
  error is pickles-error,
  value is any,
) is pickles-error;

/// Raised when an item in a record parser fails
type pickles-error--record-failed(
  record is ast-expression--record,
  field is ast-record-field,
  error is pickles-error,
  value is any,
) is pickles-error;

/// Raised when we can't unpack a sequence item because it's not a list
type pickles-error--not-unpackable(
  parser is ast-sequence-item--unpack,
  origin is any,
  value is any,
) is pickles-error;

/// Raised when no cases match a value
type pickles-error--no-cases-matched(
  parser is ast-expression--match,
  origin is any,
  selector is any
) is pickles-error;


command pickles-error--undefined-variable to-panic-message =
  "Variable [self.name] is not defined";

command pickles-error--conflicting-variable to-panic-message =
  "Duplicated variable [self.name]";

command pickles-error--invalid-type to-panic-message =
  "Expected a value matching [self.expected-type]";

command pickles-error--invalid-list to-panic-message =
  "Value at index [self.index to-text] failed list parser [self.parser text-representation]: [self.error to-panic-message]";

command pickles-error--module-not-found to-panic-message =
  "Module [self.name] is not defined";

command pickles-error--not-exported to-panic-message =
  "Cannot read [self.name] from module [self.module.name] because it's not exported";

command pickles-error--not-a-parser to-panic-message =
  "Expected a parser but got [self.parser text-representation]";

command pickles-error--both-failed to-panic-message do
  let Messages =
    [self.left] ++ (package collect-union-errors: self.right parser: self.union.right)
      |> _ map: { X in " - [X.parser text-representation]:\n  [X.error to-panic-message]"}
      |> #text join: _ with: "\n";

  "None of the following parsers in the union succeeded:\n\n[Messages]";
end

command package collect-union-errors: (X is pickles-error--both-failed) parser: P =
  condition
    when X.right is pickles-error--both-failed =>
      [
        [parser -> X.union.left, error -> X.left],
      ] ++ (package collect-union-errors: X.right parser: X.union.right);
    otherwise =>
      [
        [parser -> X.union.left, error -> X.left],
        [parser -> X.union.right, error -> X.right]
      ];
  end;

command package collect-union-errors: (X is pickles-error) parser: P =
  [[parser -> P, error -> X]];


command pickles-error--path-not-found to-panic-message =
  "Path [self.parser.path text-representation] not found";

command pickles-error--not-a-function to-panic-message =
  "[self.value text-representation] is not a function";

command pickles-error--not-equals to-panic-message =
  "Expected exactly [self.expected text-representation]";

command pickles-error--sequence-failed to-panic-message =
  "Failed at index [self.index to-text] because: [self.error to-panic-message]";

command pickles-error--record-failed to-panic-message =
  "Failed at field [self.field.name] because: [self.error to-panic-message]";

command pickles-error--not-unpackable to-panic-message =
  "Parsed value is not a list";

command pickles-error--no-cases-matched to-panic-message do
  let Cases =
    self.parser.cases
      |> _ map: { X in X.value text-representation }
      |> #text join: _ with: ", ";
  "None of the cases matched: [Cases]";
end

