% crochet

local type node;
// Auxiliar types
local type n-scene(meta, name is text, block is list<node>);
local type n-choice(meta, title is node, block is list<node>);
// Statement
local type n-let(meta, name is text, value is node) is node;
local type n-wait(meta) is node;
local type n-show(meta, value is node) is node;
local type n-menu(meta, choices is list<n-choice>) is node;
local type n-goto(meta, name is text) is node;
local type n-run(meta, lambda is function-0) is node;
local singleton n-noop is node;
// Expression
local type n-apply(meta, name is text, attributes is record<node>, arguments is list<node>) is node;
local type n-value(value) is node;
local type n-load(meta, name is text) is node;
local type n-crochet(meta, lambda is function-0) is node;
local type n-list(meta, items is list<node>) is node;
local type n-interpolation(meta, parts is list<node>) is node;
// Result types
local abstract n-result;
local singleton n-halt;
local singleton n-continue;
local type n-call(block is list<node>);
local type n-jump(block is list<node>);

local type novella-state(continuation, block is list<node>);
local type novella-env(parent, bindings is cell);
local type novella-ref(name is text);

define top-apply = [
  "paragraph _",
  "section _",
  "header _",
  "title _",
  "subtitle _"
];

define root-env = lazy new novella-env(nothing, #cell with-value: [
  "paragraph _" -> { _, Xs in (Xs as element) paragraph },
  "flow _" -> { _, Xs in novella flow: (Xs as element) },
  "stack _" -> { _, Xs in novella stack: (Xs as element) },
  "section _" -> { _, Xs in (Xs as element) section },
  "header _" -> { _, Xs in (Xs as element) header },
  "divider" -> { _ in novella divider },
  "menu _" -> { _, Xs in novella menu: (Xs as element) },
  "action-menu _" -> { O, Xs in novella action-choice-menu: Xs for: O.reference },
  "title _" -> { _, X in (X as element) title },
  "subtitle _" -> { _, X in (X as element) subtitle },
  "block _" -> { _, X in (X as element) block },
  "strong _" -> { _, X in (X as element) strong },
  "emphasis _" -> { _, X in (X as element) emphasis },
  "monospace _" -> { _, X in (X as element) monospace },
  "style _" -> { O, X in (X as element) style: O.class }
]);

command novella-env lookup: (Name is text) meta: Meta =
  condition
    when self.bindings value contains-key: Name => (self.bindings value).[Name];
    when not (self.parent is nothing) => self.parent lookup: Name meta: Meta;
    otherwise => panic message: "[Name] is not defined, at [Meta position-message]" tag: "undefined-name";
  end;

command novella-env set: (Name is text) to: Value do
  self.bindings <- (self.bindings value ++ [ [Name] -> Value ]);
  nothing;
end

command #novella-env get = perform novella-dsl.get-state();

command #novella-dsl evaluate: (X is list) do
  let Program = X map: (#novella-dsl compile: _);
  #novella-dsl run: new novella-state(nothing, Program);
end

command #novella-dsl evaluate-name: (X is skeleton-name) do
  X name;
end

command #novella-dsl evaluate-name: X do
  panic message: "Expected a name at [X position-message]";
end

// # Evaluation
command #novella-dsl run: nothing do 
  nothing;
end

command #novella-dsl run: (State is novella-state) do
  condition
    when State.block is-empty =>
      #novella-dsl run: State.continuation;

    otherwise do
      let Result = #novella-dsl run-statement: State.block first;
      #novella-dsl handle: Result state: State;
    end
  end
end

command #novella-dsl handle: n-halt state: _ =
  nothing;

command #novella-dsl handle: n-continue state: State =
  #novella-dsl run: new novella-state(State.continuation, State.block rest);

command #novella-dsl handle: (R is n-jump) state: State =
  #novella-dsl run: new novella-state(nothing, R.block);

command #novella-dsl handle: (R is n-call) state: State =
  #novella-dsl run: new novella-state( new novella-state(State.continuation, State.block rest)
                                     , R.block);


command #novella-dsl run-statement: (X is n-let) do
  let Env = #novella-env get;
  Env set: X.name to: (#novella-dsl run-expr: X.value);
  n-continue;
end

command #novella-dsl run-statement: (X is n-wait) do
  novella wait-interaction;
  n-continue;
end

command #novella-dsl run-statement: (X is n-show) do
  let Arg = #novella-dsl run-expr: X.value;
  novella show: (Arg as element);
  n-continue;
end

command #novella-dsl run-statement: (X is n-menu) do
  let Ref = new novella-ref("menu");
  let Choices = X.choices map: { C in 
                  #novella-dsl run-expr: C.title
                    |> _ as element
                    |> _ button-for: Ref value: C.block };
  let Menu = novella menu: Choices;
  novella show: Menu;
  let Block = novella wait-selection: Ref;
  new n-call(Block);
end

command #novella-dsl run-statement: (X is n-goto) do
  let Env = #novella-env get;
  let Scene = Env lookup: X.name meta: X.meta;
  new n-jump(Scene.block);
end

command #novella-dsl run-statement: (X is n-run) do
  X.lambda();
  n-continue;
end

command #novella-dsl run-statement: (X is n-noop) do
  n-continue;
end

command #novella-dsl run-expr: (X is n-apply) do
  let Env = #novella-env get;
  let Fun = Env lookup: X.name meta: X.meta;
  let Args = X.arguments map: (#novella-dsl run-expr: _);
  let Attrs = X.attributes map: { P in #novella-dsl run-expr: P value };
  Fun apply: ([Attrs] ++ Args);
end

command #novella-dsl run-expr: (X is n-value) do
  X.value;
end

command #novella-dsl run-expr: (X is n-load) do
  let Env = #novella-env get;
  Env lookup: X.name meta: X.meta;
end

command #novella-dsl run-expr: (X is n-crochet) do
  X.lambda();
end

command #novella-dsl run-expr: (X is n-list) do
  X.items map: (#novella-dsl run-expr: _);
end

command #novella-dsl run-expr: (X is n-interpolation) do
  (X.parts map: (#novella-dsl run-expr: _)) as interpolation;
end

// # Compilation
command #novella-dsl compile: (X is skeleton-node) do
  condition
    when X name =:= "let _ = _" do
      let Name = #novella-dsl evaluate-name: (X at: 1);
      let Value = #novella-dsl compile-expr: (X at: 2);
      new n-let(X, Name, Value);
    end

    when X name =:= "wait" do
      new n-wait(X);
    end

    when X name =:= "show _" do
      let Arg = #novella-dsl compile-expr: X children first;
      new n-show(X, Arg);
    end

    when X name =:= "menu _" do
      let Choices = X children first children map: (#novella-dsl compile-choice: _);
      new n-menu(X, Choices);
    end

    when X name =:= "go to _" do
      let Name = #novella-dsl evaluate-name: X children first;
      new n-goto(X, Name);
    end

    when X name =:= "scene _ _" do
      let Name = #novella-dsl evaluate-name: X children first;
      let Block = (X children at: 2) children map: (#novella-dsl compile: _);
      let Env = #novella-env get;
      Env set: Name to: new n-scene(X, Name, Block);
      n-noop;
    end

    when X name =:= "run _" do
      let Code = X children first expression;
      new n-run(X, Code);
    end

    when top-apply contains: X name do
      let Arg = #novella-dsl compile-expr: X;
      new n-show(X, new n-apply(X, X name, [->], [Arg]));
    end

    otherwise do
      panic message: "Unknown statement [X name] at [X position-message]";
    end
  end
end

command #novella-dsl compile: (X is skeleton-literal) do
  new n-show(X, new n-apply(X, "paragraph _", [->], [#novella-dsl compile-expr: X]));
end

command #novella-dsl compile: (X is skeleton-interpolation) do
  new n-show(X, new n-apply(X, "paragraph _", [->], [#novella-dsl compile-expr: X]));
end

command #novella-dsl compile: (X is skeleton-list) do
  X children map: (#novella-dsl compile: _);
end

command #novella-dsl compile: X do
  panic message: "Invalid top-level Novella syntax at [X position-message]";
end


command #novella-dsl compile-expr: (X is skeleton-node) do
  new n-apply( X
             , X name
             , X attributes map: { P in #novella-dsl compile-expr: P value }
             , X children map: (#novella-dsl compile-expr: _));
end

command #novella-dsl compile-expr: (X is skeleton-literal) do
  new n-value(X value as element);
end

command #novella-dsl compile-expr: (X is skeleton-name) do
  new n-load(X, X name);
end

command #novella-dsl compile-expr: (X is skeleton-dynamic) do
  new n-crochet(X, X expression);
end

command #novella-dsl compile-expr: (X is skeleton-list) do
  new n-list(X, X children map: (#novella-dsl compile-expr: _));
end

command #novella-dsl compile-expr: (X is skeleton-interpolation) do
  new n-interpolation(X, X parts map: (#novella-dsl compile-expr: _));
end


command #novella-dsl compile-choice: (X is skeleton-node) do
  let Title = #novella-dsl compile-expr: (X children at: 1);
  let Block = #novella-dsl compile: (X children at: 2);
  new n-choice(X, Title, Block);
end

command #novella-dsl compile-choice: X do
  panic message: "Invalid choice syntax at [X position-message]";
end

// == Handlers
command novella-dsl with-env: (Env is novella-env) do: (Block is function-0) do
  handle
    Block();
  with
    on novella-dsl.get-state() => continue with Env; 
  end
end

command novella-dsl do: Block =
  novella-dsl
    with-env: new novella-env(force root-env, #cell with-value: [->])
    do: Block;