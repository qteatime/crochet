% crochet

type nvl-dom-renderer(root is nvl-dom-node, size is nvl-size) is nvl-renderer;

command nvl-dom make-renderer: (Root is nvl-dom-node) size: (Size is nvl-size) =
  new nvl-dom-renderer(Root, Size);


command nvl-dom-renderer render: (X is nvl-text) do
  let Node = nvl-dom make-node: "div" class: "novella-text";
  for Child in X.children do
    Node append: (self render: Child);
  end
  Node;
end

command nvl-dom-renderer render: (X is nvl-tc-text) do
  nvl-dom make-text: X.child;
end

command nvl-dom-renderer render: (X is nvl-tc-strong) do
  nvl-dom make-node: "strong" class: "novella-strong"
    | append: (self render: X.child);
end

command nvl-dom-renderer render: (X is nvl-tc-emphasis) do
  nvl-dom make-node: "em" class: "novella-emphasis"
    | append: (self render: X.child);
end

command nvl-dom-renderer render: (X is nvl-tc-flow) do
  let Node = nvl-dom make-node: "span" class: "novella-text-flow";
  for Child in X.children do
    Node append: (self render: Child);
  end
  Node;
end


effect novella-dom-renderer root: (Root is unknown) do
  let Node = nvl-dom node-from-element: Root;
with
  on novella-renderer.setup(Game) do
    Node set-style: [
      width -> "[Game.size width]px",
      height -> "[Game.size height]px",
      aspect-ratio -> "[Game.size width] / [Game.size height]" flatten-into-plain-text,
    ];
  end
end