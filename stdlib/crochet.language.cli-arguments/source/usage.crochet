% crochet

local singleton usage-mod;

command usage-mod flow: (Items is list) =
  Items fold-from: "" with: { A, B in "[A] [B]" };

command usage-mod stack: (Items is list) =
  Items fold-from: "" with: { A, B in "[A]\n[B]" };

command usage-mod command-list: (Items is list) =
  Items map: { X in "  [X usage-line]" }
    |> usage-mod stack: _;

command usage-mod usage-options: nothing = "";
command usage-mod usage-options: (Options is cli-options) = Options usage;

command usage-mod options-list: (Items is list) =
  Items map: _ usage
    |> usage-mod stack: _;

command usage-mod collect-options: (Args is list) do
  Args fold-from: nothing with: (usage-mod merge-options: _ and: _);
end

command usage-mod merge-options: (X is cli-options) and: (Y is cli-options) =
  new cli-options("", X arguments ++ Y arguments);

command usage-mod merge-options: (X is cli-options) and: _ = X;
command usage-mod merge-options: _ and: (X is cli-options) = X;
command usage-mod merge-options: _ and: _ = nothing;


command usage-mod collect-positionals: (Args is list) =
  for X in Args if X is cli-positional do X end;


command cli-app usage do
  "
Usage: [self.name] <command>

[self.description]
  
Commands:
[usage-mod command-list: self commands]
  ";
end

command cli-command usage do
  let Options = usage-mod collect-options: self arguments;
  let Positionals = usage-mod collect-positionals: self arguments;

  "
Usage: [usage-mod flow: (self arguments map: _ usage-line)]
[usage-mod stack: (Positionals map: _ usage)]
[usage-mod usage-options: Options]
  ";
end

command cli-options usage do
  "
Options:

[usage-mod options-list: self options]
  "
end

command cli-functor usage do
  self argument usage;
end



command cli-command usage-line do
  "[usage-mod flow: (self arguments map: _ usage-line)]";
end

command cli-options usage-line do
  "\[options\]";
end

command cli-positional usage-line do
  "[self argument type-line: self name]";
end

command cli-functor usage-line do
  "[self argument usage-line]";
end


command cli-arg-exact type-line: Name = "[self.value]";
command cli-arg-text type-line: Name = "<[Name]>";
command cli-arg-boolean type-line: Name = "\[[Name]\]";

command cli-positional usage do
  condition
    when self description =/= "" do
      "  [self argument type-line: self name]
           [self description]
      ";
    end

    otherwise => "";
  end;
end

command cli-option usage do
  let Default = condition
    when self default is nothing => "";
    otherwise => " = [self default]";
  end;

  "  [self.key][Default]
       [self.description]
  "
end