% crochet

capability http;

type response(status is integer, headers is record, body is text);
type request-error(reason is text);

singleton http;
protect type http with http;
protect global http with http;

command http request: (Url is text) data: (Data is text) options: (Options is record) do
  let Result = foreign http.request(Url, Data, Options);
  condition
    when Result.success do
      let Res = Result.response;
      new response(Res.status-code, Res.headers, Res.body);
    end

    otherwise =>
      new request-error(Result.message);
  end
end



command http get: Url options: Options =
  http request: Url data: "" options: (Options ++ [method -> "GET"]);

command http get: Url =
  http get: Url options: [->];

command http post: Url data: Data options: Options =
  http request: Url data: Data options: (Options ++ [method -> "POST"]);

command http post: Url data: Data =
  http post: Url data: Data options: [->];

command http delete: Url options: Options =
  http request: Url options: (Options ++ [method -> "DELETE"]);

command http delete: Url =
  http delete: Url options: [->];

command http patch: Url data: Data options: Options =
  http request: Url data: Data options: (Options ++ [method -> "PATCH"]);

command http patch: Url data: Data =
  http patch: Url data: Data options: [->];


command response status = self.status;
command response headers = self.headers;
command response body = self.body;
