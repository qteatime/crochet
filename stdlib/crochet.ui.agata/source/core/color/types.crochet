% crochet

singleton agata-color;

abstract color;

singleton color-unset is color;

type rgba(
  red is integer,
  green is integer,
  blue is integer,
  alpha is integer,
) is color;

type color-builtin(code is color-code) is color;

enum color-code =
  blue-grey-10,
  blue-grey-20,
  blue-grey-30,
  blue-grey-40,
  blue-grey-50,
  red,
  pink,
  blue,
  green,
  orange,
  white,
  black,
  fg,
  fg-invert,
  fg-muted,
  fg-meta,
  bg,
  bg-muted,
  bg-muted-20;

trait to-agata-color with
  command Self as color -> color;
end


command agata-color red: (R is integer) green: (G is integer) blue: (B is integer) alpha: (A is integer)
requires
  byte-red :: (R >= 0) and (R <= 255),
  byte-green :: (G >= 0) and (G <= 255),
  byte-blue :: (B >= 0) and (B <= 255),
  byte-alpha :: (A >= 0) and (A <= 255)
do
  new rgba(R, G, B, A);
end

command agata-color red: R green: G blue: B =
  #color red: R green: G blue: B alpha: 255;

command agata-color from-hex-code: (Code is static-text) do
  let Color = foreign color.parse-hex(Code);
  agata-color red: Color.red green: Color.green blue: Color.blue alpha: Color.alpha;
test
  assert (agata-color from-hex-code: "#000000") === (#color red: 0 green: 0 blue: 0 alpha: 255);
  assert (agata-color from-hex-code: "#ffffff00") === (#color red: 255 green: 255 blue: 255 alpha: 0);
end

implement to-agata-color for static-text;
command static-text as color = agata-color from-hex-code: self;

implement to-agata-color for color;
command color as color = self;