% crochet

command #rectangle left: Left top: Top width: Width height: Height
requires not-negative :: (Width >= 0) and (Height >= 0)
do
  new rectangle(Left, Top, Width, Height);
end

command #rectangle left: Left top: Top right: Right bottom: Bottom
requires not-negative :: (Right >= Left) and (Bottom >= Top)
do
  new rectangle(Left, Top, Right - Left, Bottom - Top);
end

command #rectangle from: (From is point2d) to: (To is point2d) =
  #rectangle left: From x
             top: From y
             right: To x
             bottom: To y;


command rectangle right = self left + self width;
command rectangle bottom = self top + self height;

command rectangle center = #point2d x: (self left + (self width / 2))
                                    y: (self top + (self height / 2));


implement equality for rectangle;

command rectangle === (That is rectangle) =
  (self left === That left) and
  (self top === That top) and
  (self width === That width) and
  (self height === That height);