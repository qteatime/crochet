% crochet

open crochet.concurrency;

abstract widget;

trait to-widget with
  command X as widget -> widget;
end

implement to-widget for widget;
command widget as widget =
  self;


implement to-widget for text;
command text as widget =
  #widget text: self;


implement to-widget for integer;
command integer as widget =
  #widget text: self to-text;


implement to-widget for float-64bit;
command float-64bit as widget =
  #widget text: self to-text;


implement to-widget for list;
command list as widget = #widget fragment: self;


implement to-widget for boolean;
command true as widget = #widget text: "true";
command false as widget = #widget text: "false";


implement to-widget for interpolation;
command interpolation as widget =
  #widget flow: (self parts map: (_ as widget));


implement to-widget for observable-cell;
command observable-cell as widget =
  #widget dynamic: (new observable-cell-widget(self, #cell with-value: nothing) setup: _);

type observable-cell-widget(cell is observable-cell, subscriber is cell);
protect type observable-cell-widget with internal;

command observable-cell-widget setup: (Surface is surface) do
  Surface replace-contents: self.cell value;

  Surface on-attached: {
    self maybe-unsubscribe;
    self.subscriber <- self.cell stream subscribe: (Surface replace-contents: _);
  };
  Surface on-detached: {
    self maybe-unsubscribe;
    self.subscriber <- nothing;
  }
end

command observable-cell-widget maybe-unsubscribe =
  self maybe-unsubscribe: self.subscriber value;

command observable-cell-widget maybe-unsubscribe: nothing =
  nothing;

command observable-cell-widget maybe-unsubscribe: (Subscriber is subscriber) do
  self.cell stream unsubscribe: Subscriber;
end


implement to-widget for event-stream;
command event-stream as widget =
  #widget dynamic: (new event-stream-widget(self listener, #cell with-value: nothing) setup: _);

implement to-widget for event-stream-listener;
command event-stream-listener as widget =
  #widget dynamic: (new event-stream-widget(self, #cell with-value: nothing) setup: _);

type event-stream-widget(listener is event-stream-listener, subscriber is cell);
protect type event-stream-widget with internal;

command event-stream-widget setup: (Surface is surface) do
  Surface on-attached: {
    self maybe-unsubscribe;
    self.subscriber <- self.listener subscribe: (Surface append: _);
  };
  Surface on-detached: {
    self maybe-unsubscribe;
    self.subscriber <- nothing;
  };
end

command event-stream-widget maybe-unsubscribe = 
  self maybe-unsubscribe: self.subscriber value;

command event-stream-widget maybe-unsubscribe: nothing =
  nothing;

command event-stream-widget maybe-unsubscribe: (Subscriber is subscriber) do
  self.listener unsubscribe: Subscriber;
end