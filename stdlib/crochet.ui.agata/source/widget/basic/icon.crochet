% crochet

open crochet.text.regex;

type widget-icon(
  name is text,
  size is icon-size,
  style is icon-style,
  color is color,
) is widget;

enum icon-style =
  solid,
  regular;


command #widget icon: (Name is static-text)
requires
  valid-name :: internal valid-icon-name: Name
do
  new widget-icon(
    name -> Name,
    size -> #icon-size small,
    style -> #icon-style solid,
    color -> color-unset,
  );
end

command internal valid-icon-name: (Name is static-text) do
  let Valid-re = regex from-text: "^\[a-z\\-\]+$" | compile;
  Valid-re can-match: Name;
end


command #icon-style from-text: (Name is static-text) do
  #icon-style from-enum-text: Name;
end


command widget-icon size: (Size is icon-size) =
  new widget-icon(self with size -> Size);


command widget-icon style: (Style is icon-style) =
  new widget-icon(self with style -> Style);

command widget-icon style: (Style is static-text) =
  self style: (#icon-style from-text: Style);

command widget-icon color: (Color has to-agata-color) =
  new widget-icon(self with color -> Color as color);