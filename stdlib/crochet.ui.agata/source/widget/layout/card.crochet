% crochet

type widget-card(content is list<card-child>) is widget;

abstract card-child;
type card-child-image(image is widget-image) is card-child;
type card-child-header(content is widget) is card-child;
type card-child-body(content is widget) is card-child;
type card-child-meta(content is widget) is card-child;
type card-child-extra(content is widget) is card-child;

command #widget card: (Content is list) =
  new widget-card(Content map: (internal to-card-child: _));

command internal to-card-child: (X is card-child) = X;


command #card-child image: (X is widget-image) =
  new card-child-image(X);

command #card-child image: (X is network-image) =
  self image: (#widget image: X);

command #card-child header: (X has to-widget) =
  new card-child-header(X as widget);

command #card-child body: (X has to-widget) =
  new card-child-body(X as widget);

command #card-child meta: (X has to-widget) =
  new card-child-meta(X as widget);

command #card-child extra: (X has to-widget) =
  new card-child-extra(X as widget);