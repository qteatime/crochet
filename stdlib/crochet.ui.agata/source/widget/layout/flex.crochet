% crochet

type widget-flex(items is list<flex-child>, options is flex-options) is widget;
type flex-child(content is widget, options is flex-child-options);

type flex-options(
  layout is flex-layout,
  gap is flex-gap,
  wrap is flex-wrap,
  align-items is flex-align,
  justify-content is flex-justify,
  align-content is flex-justify,
);

enum flex-layout =
  row,
  row-reverse,
  column,
  column-reverse;

enum flex-wrap =
  no-wrap,
  wrap,
  wrap-reverse;

enum flex-align =
  normal,
  flex-start,
  flex-end,
  center,
  stretch,
  baseline;

enum flex-justify =
  normal,
  flex-start,
  flex-end,
  center,
  left,
  right,
  baseline,
  space-between,
  space-around,
  space-evenly,
  stretch;

type flex-gap(row is measure, column is measure);

type flex-child-options(
  grow, // is integer | nothing,
  shrink, // is integer | nothing,
  basis is measure,
);


// -- Constructing
command #widget flex: (Children is list) =
  new widget-flex(Children map: (internal to-flex-child: _), #flex-options defaults);

command internal to-flex-child: (Child is flex-child) =
  Child;

command internal to-flex-child: (Child has to-widget) =
  new flex-child(Child as widget, #flex-child-options defaults);

command #widget flex-column: (Children is list) =
  #widget flex: Children
    | layout: "column";

command #widget flex-row: (Children is list) =
  #widget flex: Children
    | layout: "row";

command #flex-child with: (Content has to-widget) =
  new flex-child(Content as widget, #flex-child-options defaults);

command #flex-child fluid: (Content has to-widget) =
  #flex-child with: Content
    | grow: 1;


// -- Setting options
command widget-flex options: (X is flex-options) =
  new widget-flex(self.items, X);

command widget-flex layout: X =
  new widget-flex(self.items, self.options layout: X);

command widget-flex gap: X =
  new widget-flex(self.items, self.options gap: X);

command widget-flex wrap: X =
  new widget-flex(self.items, self.options wrap: X);

command widget-flex align-items: X =
  new widget-flex(self.items, self.options align-items: X);

command widget-flex justify-content: X =
  new widget-flex(self.items, self.options justify-content: X);

command widget-flex align-content: X =
  new widget-flex(self.items, self.options align-content: X);


command flex-child options: (X is flex-child-options) =
  new flex-child(self.content, X);

command flex-child grow: X =
  new flex-child(self.content, self.options grow: X);

command flex-child shrink: X =
  new flex-child(self.content, self.options shrink: X);

command flex-child basis: X =
  new flex-child(self.content, self.options basis: X);


// -- Flex options
command #flex-options defaults =
  new flex-options(
    layout -> #flex-layout row,
    gap -> #flex-gap defaults,
    wrap -> #flex-wrap no-wrap,
    align-items -> #flex-align normal,
    justify-content -> #flex-justify normal,
    align-content -> #flex-justify normal
  );

command flex-options layout: (Layout is flex-layout) =
  new flex-options(self with layout -> Layout);

command flex-options layout: (Name is static-text) =
  self layout: (#flex-layout from-text: Name);


command flex-options gap: (Gap is flex-gap) =
  new flex-options(self with gap -> Gap);

command flex-options gap: (Gap is record) =
  self gap: (#flex-gap row: Gap.row column: Gap.column);

command flex-options gap: (F is (flex-gap -> flex-gap)) =
  new flex-options(self with gap -> F(self.gap));

command flex-options gap: (Gap has to-agata-measure) do
  let Value = Gap as measure;
  new flex-options(self with gap -> #flex-gap row: Value column: Value);
end


command flex-options wrap: (Wrap is flex-wrap) =
  new flex-options(self with wrap -> Wrap);

command flex-options wrap: (Name is static-text) =
  self wrap: (#flex-wrap from-text: Name);


command flex-options align-items: (Align is flex-align) =
  new flex-options(self with align-items -> Align);

command flex-options align-items: (Name is static-text) =
  self align-items: (#flex-align from-text: Name);


command flex-options justify-content: (Justify is flex-justify) =
  new flex-options(self with justify-content -> Justify);

command flex-options justify-content: (Name is static-text) =
  new flex-options(self with justify-content -> #flex-justify from-text: Name);

command flex-options align-content: (Justify is flex-justify) =
  new flex-options(self with align-content -> Justify);

command flex-options align-content: (Name is static-text) =
  new flex-options(self with align-content -> #flex-justify from-text: Name);


// -- Flex gap
command #flex-gap defaults =
  new flex-gap(#measure pixels: 0, #measure pixels: 0);

command #flex-gap row: R column: C =
  #flex-gap defaults | row: R | column: C;

command flex-gap row: (Unit has to-agata-measure) =
  new flex-gap(self with row -> Unit as measure);

command flex-gap column: (Unit has to-agata-measure) =
  new flex-gap(self with column -> Unit as measure);


// -- Flex child options
command #flex-child-options defaults =
  new flex-child-options(
    grow -> nothing,
    shrink -> nothing,
    basis -> #measure auto
  );

command flex-child-options grow: (N is integer) =
  new flex-child-options(self with grow -> N);

command flex-child-options shrink: (N is integer) =
  new flex-child-options(self with shrink -> N);

command flex-child-options basis: (N has to-agata-measure) =
  new flex-child-options(self with basis -> N as measure);


// -- Constructing enums
command #flex-justify from-text: (Name is static-text) do
  #flex-justify from-enum-text: Name;
end

command #flex-layout from-text: (Name is static-text) do
  #flex-layout from-enum-text: Name;
end

command #flex-wrap from-text: (Name is static-text) do
  #flex-wrap from-enum-text: Name;
end

command #flex-align from-text: (Name is static-text) do
  #flex-align from-enum-text: Name;
end