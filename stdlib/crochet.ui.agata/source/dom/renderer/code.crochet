% crochet

type code-mirror(box is code-mirror-dom) is code-editor;

type code-mirror-dom(box is unknown);

command #code-mirror-dom render: (Node is dom-node) options: (Options is record) do
  new code-mirror-dom(foreign code-mirror.render(Node.box, Options));
end

command code-mirror-dom on: (Event is text) do: (Block is (unknown -> nothing)) do
  foreign code-mirror.on(self.box, Event, Block capture);
  self;
end

command code-mirror-dom set: (Key is text) to: (Value is any) do
  foreign code-mirror.set(self.box, Key, Value);
  self;
end

command code-mirror-dom value =
  foreign code-mirror.get-value(self.box);

command code-mirror-dom set-value: (Value is text) do
  foreign code-mirror.set-value(self.box, Value);
  self;
end

command code-mirror-dom refresh do
  foreign code-mirror.refresh(self.box);
  self;
end

command dom-renderer render: (W is widget-code-editor) do
  let Surface = dom make-surface;
  let Node = Surface.node;
  let Skip = #cell with-value: nothing;

  Node add-class: "agata-code-editor";

  let Code-mirror =
    #code-mirror-dom render: Node options: [
      mode -> W.mode value,
      value -> W.value value,
      read-only -> W.read-only value,
      line-numbers -> W.line-numbers value,
      line-wrapping -> W.line-wrapping value,
      viewport-margin -> condition
                            when W.auto-resize => #float-64bit positive-infinity;
                            otherwise => 10.0;
                          end,
      key-map -> W.key-map entries map: { Pair in 
                  [
                    Pair key, 
                    { (Pair value)(new code-mirror(Code-mirror)) } capture
                  ]
                }
    ];

  Code-mirror on: "changes" do: { _ in
    let Value = Code-mirror value;
    Skip <- Value;
    W.value <- Value;
  };

  W.mode stream subscribe: (Code-mirror set: "mode" to: _);
  W.read-only stream subscribe: (Code-mirror set: "readOnly" to: _);
  W.line-numbers stream subscribe: (Code-mirror set: "lineNumbers" to: _);
  W.line-wrapping stream subscribe: (Code-mirror set: "lineWrapping" to: _);
  W.value stream subscribe: { M in
    condition
      when M =:= Skip value => nothing;
      otherwise => Code-mirror set-value: M;
    end
    Skip <- nothing;
  };

  Surface on-attached: {
    Code-mirror refresh;
  };

  condition
    when W.auto-resize => Node add-class: "agata-code-editor-auto-resize";
    otherwise => nothing;
  end

  Node;
end

command dom-renderer render: (W is widget-syntax-highlight) do
  let Surface = dom make-surface;
  let Node = Surface.node;
  Node add-class: "agata-syntax-highlight";

  let Code-mirror =
    #code-mirror-dom render: Node options: [
      mode -> W.language,
      value -> W.value,
      read-only -> "nocursor",
      line-numbers -> W.line-numbers,
      line-wrapping -> W.line-wrapping,
      viewport-margin -> #float-64bit positive-infinity,
    ];

  Surface on-attached: {
    Code-mirror refresh;
  };

  Node;
end