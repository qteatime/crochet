% crochet

singleton agata-dom;

command agata-dom with-root: (Root is unknown) do: (Block is (() -> A)) -> A do
  let Surface = dom make-surface-from-native-element: Root;
  Surface.node add-class: "agata-root";
  let Router = #cell with-value: #agata-router empty;
  let References = #cell with-value: #map empty;
  handle
    Block();
  with
    on agata-presentation.show(Widget) do
      Surface replace-contents: Widget;
      continue with nothing;
    end

    on agata-rendering.get-shared-renderer() do
      continue with dom-renderer;
    end

    on agata-presentation.register-reference(Reference, Target) do
      References <- References value at: Reference put: Target;
      continue with nothing;
    end

    on agata-presentation.get-reference(Reference) do
      let Live = References value at: Reference;
      continue with Live;
    end

    on agata-routing.register(Page) do
      Router <- Router value add-page: Page;
      continue with nothing;
    end

    on agata-routing.navigate(Uri) do
      let Match = Router value route: Uri;

      condition
        when Match is error do
          agata-dom alert: "No page defined for [Uri.location]";
        end

        otherwise do
          agata-dom push-uri: Uri;
          let Result = Match value;
          let Page = Result.page instantiate-page: Result.bindings;
          Surface replace-contents: Page;
        end
      end

      continue with nothing;
    end
  end
end

command agata-dom push-uri: (Uri is uri) do
  foreign history.push(nothing, "", Uri.location);
  self;
end

command agata-dom alert: (Message is text) do
  foreign dom.alert(Message);
  self;
end

command agata-dom alert: (Message is interpolation) =
  self alert: (Message flatten-into-plain-text);