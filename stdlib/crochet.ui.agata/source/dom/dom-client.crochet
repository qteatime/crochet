% crochet

singleton agata-dom;

command agata-dom with-root: (Root is unknown) do: (Block is (() -> A)) -> A do
  let Surface = dom make-surface-from-native-element: Root;
  Surface.node add-class: "agata-root";
  let Router = #cell with-value: #agata-router empty;
  let References = #cell with-value: #map empty;
  handle
    internal setup-history-router: Router surface: Surface;
    Block();
    internal try-load-current-url: Router;
  with
    on agata-presentation.show(Widget) do
      Surface replace-contents: Widget;
      continue with nothing;
    end

    on agata-rendering.get-shared-renderer() do
      continue with dom-renderer;
    end

    on agata-presentation.register-reference(Reference, Target) do
      References <- References value at: Reference put: Target;
      continue with nothing;
    end

    on agata-presentation.get-reference(Reference) do
      let Live = References value at: Reference;
      continue with Live;
    end

    on agata-routing.register(Page) do
      Router <- Router value add-page: Page;
      continue with nothing;
    end

    on agata-routing.register-top-page(Page) do
      Router <- Router value use-top-page: Page;
      continue with nothing;
    end

    on agata-routing.register-error-page(Page) do
      Router <- Router value use-error-page: Page;
      continue with nothing;
    end

    on agata-routing.navigate(Uri) do
      internal router: Router surface: Surface render: Uri;
      agata-dom push-uri: Uri;
      continue with nothing;
    end
  end
end

command internal router: (Router is cell<agata-router>) surface: (Surface is dom-surface) render: (Uri is uri) do
  let Match = Router value route: Uri;
  let Page = Match.page instantiate-page: Match.bindings;
  Surface replace-contents: Page;
end

command internal setup-history-router: (Router is cell<agata-router>) surface: (Surface is dom-surface) do
  let Handler = { Ev in
    let Location = foreign history.location-hash();
    internal router: Router surface: Surface render: new uri(Location);
  } capture;

  foreign history.on-hash-change(Handler);
end

command internal try-load-current-url: (Router is cell<agata-router>) do
  let Current-hash = foreign history.location-hash();
  let Uri = new uri(Current-hash);
  let Match = Router value route: Uri;
  condition
    when Match is error => nothing;
    otherwise => agata navigate: Uri;
  end
end

command agata-dom push-uri: (Uri is uri) do
  foreign history.push([tag -> "agata-navigate", uri -> Uri.location], "", Uri.location);
  self;
end

command agata-dom alert: (Message is text) do
  foreign dom.alert(Message);
  self;
end

command agata-dom alert: (Message is interpolation) =
  self alert: (Message flatten-into-plain-text);