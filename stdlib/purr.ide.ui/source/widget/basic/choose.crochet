% crochet

type widget-choose(
  conditions is list<choice-condition>,
  current is purr-variable<any>,
) is widget;

type choice-condition(
  constraint is (any -> boolean),
  content is (any -> widget)
);


command #widget given: (X has to-purr-variable) =
  new widget-choose(
    conditions -> [],
    current -> X as purr-variable,
  );

command widget-choose when: (F is (any -> boolean)) show: (X is (any -> to-widget)) =
  new widget-choose(self with conditions -> self.conditions append: new choice-condition(F, X));

command widget-choose when: (T is static-type) show: X =
  self when: { X in T accepts-in-hierarchy: X } show: X;

command widget-choose default: X =
  self when: { _ in true } show: X;


command package current-choice: (W is widget-choose) -> result<widget, not-found> do
  let Value = W.current value;
  W.conditions
    | find-first: { C in C.constraint(Value) }
    | map: { C in C.content(Value) as widget };
end
