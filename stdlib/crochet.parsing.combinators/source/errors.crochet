% crochet

local singleton error-mod;


command parser-result-error error-message =
  self reason error-message;

command parser-error-alt error-message do
  let Errors = error-mod join: (error-mod collect-errors: self) separator: " or ";
  "any of: [Errors]";
end

command parser-error-expected error-message do
  "[self.expected]";
end

command parser-error-unexpected error-message do
  "not [self.parser describe]";
end

command parser-error-not-satisfied error-message do
  "not [self.parser describe]";
end

command parser-error-arbitrary error-message do
  "[self.failure]";
end

command parser-error-end-of-stream error-message do
  "unexpected end of the input";
end


command error-mod join: (Errors0 is list) separator: (Sep is text) do
  let Errors1 = for X in Errors0 do X error-message end;
  condition
    when Errors1 count === 0 => "[""]";
    when Errors1 count === 1 => "[Errors1 first]";
    otherwise =>
      Errors1 rest fold-from: Errors1 first with: { A, B in "[A][Sep][B]" };
  end

end

command error-mod collect-errors: (X is parser-error-alt) do
  (error-mod collect-errors: X.left) ++ (error-mod collect-errors: X.right);
end

command error-mod collect-errors: (X is parser-error) = [X];