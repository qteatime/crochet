% crochet

// Constructing
command thunk as parser =
  new parser-lazy(self);

command parser and (That is parser) =
  new parser-seq(self, That);

command parser or (That is parser) =
  new parser-alt(self, That);

command not parser =
  new parser-not(self);

command #parser many: (This is parser) =
  new parser-many(This);

command parser optional =
  new parser-opt(self);

command parser lookahead =
  new parser-lookahead(self);

command parser backtrack =
  new parser-backtrack(self);

command #parser equal: Value =
  new parser-eq(Value);

command parser map: (Fun is function-1) =
  new parser-action(self, Fun);

command #parser 'always = parser-always;

command #parser any = parser-any;

command parser if: (Fun is function-1) =
  new parser-predicate(self, Fun);

// Parsing
command parser-lazy parse: (Stream is parser-stream) =
  (force self) parse: Stream;

command parser-alt parse: (Stream is parser-stream) do
  self.left parse: Stream | else: { S1 in
    self.right parse: S1 position
      | map-error: { E2 in new parser-error-alt(S1 reason, E2) }
  }
end

command parser-backtrack parse: (Stream is parser-stream) do
  self.parser parse: Stream | else: { S in
    new parser-result-error(S reason, Stream)
  }
end

command parser-seq parse: (Stream is parser-stream) do
  self.left parse: Stream | then: { S in
    self.right parse: S position
      | map: { V2 in new parser-result-pair(S value, V2) }
  }
end

command parser-many parse: (Stream is parser-stream) do
  self.parser parse: Stream | then: { S1 in
    self parse: S1 position
      | else: { S2 in S1 }
      | map: { V in new parser-result-pair(S1 value, V) }
  }
end

command parser-opt parse: (Stream is parser-stream) do
  self.parser parse: Stream
    | then: { S in S ok: (#result ok: S value) }
      else: { S in Stream ok: (#result error: nothing) }
end

command parser-eq parse: (Stream is parser-stream) do
  Stream consume | then: { S in 
    condition
      when S value === self.value => S;
      always => Stream error: new parser-error-expected(self.value);
    end
  }
end

command parser-not parse: (Stream is parser-stream) do
  self.parser parse: Stream
    |> _ then: { S in Stream error: new parser-error-unexpected(self) }
         else: { S in Stream ok: nothing }
end

command parser-lookahead parse: (Stream is parser-stream) do
  self.parser parse: Stream
    | then: { S in Stream ok: S value };
end

command parser-action parse: (Stream is parser-stream) do
  self.parser parse: Stream
    | map: self.semantic;
end

command parser-always parse: (Stream is parser-stream) =
  Stream ok: nothing;

command parser-any parse: (Stream is parser-stream) =
  Stream consume;

command parser-predicate parse: (Stream is parser-stream) do
  Stream consume | then: { S in
    condition
      when self.pred(S value) => S;
      always => Stream error: new parser-error-not-satisfied(self);
    end
  }
end


command parser-lazy describe = (force self.parser) describe;

command parser-alt describe do
  "[self.left describe] or [self.right describe]";
end

command parser-backtrack describe do
  self.parser describe;
end

command parser-seq describe do
  "[self.left describe] followed by [self.right describe]";
end

command parser-many describe do
  "zero or more of [self.parser describe]";
end

command parser-opt describe do
  "";
end

command parser-eq describe do 
  "a value like [self.value]";
end

command parser-not describe do
  "not [self.parser describe]";
end

command parser-lookahead describe do
  "";
end

command parser-action describe do
  self.parser describe;
end

command parser-predicate describe do
  "[self.parser describe] if [self.pred]";
end