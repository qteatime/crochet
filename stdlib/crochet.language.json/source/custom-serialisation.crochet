% crochet

type json-serialisation(
  brand-to-tag is map<any, text>,
  tag-to-brand is map<text, any>,
);

command #json-serialisation empty =
  new json-serialisation(#map empty, #map empty);

command json-serialisation tag: (Tag is text) brand: Brand
requires
  unique-map :: (not (self.brand-to-tag contains-key: Brand))
                  and (not (self.tag-to-brand contains-key: Tag))
do
  new json-serialisation(
    self.brand-to-tag at: Brand put: Tag,
    self.tag-to-brand at: Tag put: Brand,
  );
end

command #json-serialisation defaults =
  #json-serialisation empty
    | tag: "integer" brand: #integer
    | tag: "map" brand: #map
    | tag: "set" brand: #set;


command json-serialisation lower: (Value is json-type) =
  Value;

command json-serialisation lower: nothing =
  json-null;

command json-serialisation lower: (Value is boolean) =
  #json-type boolean: Value;

command json-serialisation lower: (Value is float-64bit) =
  #json-type number: Value;

command json-serialisation lower: (Value is unsafe-arbitrary-text) =
  #json-type text: Value;

command json-serialisation lower: (Value is list) =
  #json-type list: (Value map: (self lower: _));

command json-serialisation lower: (Value is record) =
  #map from: Value
    |> _ map: { X in self lower: X value }
    |> #json-type record: _;

