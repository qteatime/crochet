% crochet

/// The default entry-point for JSON parsing and writing. Guarantees safety
/// and equivalence of semantics between Crochet's values and JSON.
type json(serialisation is json-serialisation);


// -- Constructors
command #json bare =
  new json(#json-serialisation empty);

command #json defaults =
  new json(#json-serialisation defaults);

command #json with-serialisation: (Serialisation is json-serialisation) =
  new json(Serialisation);


// -- JSON operations


/// Parses a piece of JSON text and returns the equivalent Crochet values
/// for it.
command json parse: (Value is text) do
  foreign json.parse(Value, true)
test
  assert (#json bare parse: "1234") === 1234.0;
  assert (#json bare parse: "\"abc\"") === "abc";
  assert (#json bare parse: "\[123, null, \[true, false\]\]") === [123.0, nothing, [true, false]];
  assert (#json bare parse: "{\"a\": \[1, 2\], \"b\": {\"c\": 3}}") === [
    a -> [1.0, 2.0],
    b -> [c -> 3.0]
  ];
end

/// Parses a piece of JSON text and returns the equivalent Crochet values
/// for it. All of the text in the result will likewise be untrusted.
command #json parse: (Value is untrusted-text) do
  foreign json.parse(Value, false);
test
  assert (#json bare parse: (foreign json.untrusted("\"abc\""))) is untrusted-text;
  let Result = #json bare parse: (foreign json.untrusted("\[\"abc\"\]"));
  assert Result first is untrusted-text;
end

/// Converts a simple Crochet value to a JSON piece of text. If the input
/// contains untrusted text, then the output will also be an untrusted text.
///
/// Does no formattingâ€”which is reasonable for computers, but not if you want
/// the output to be used by humans. See [command:_ pretty-print: _ indentation: _]
/// for the formatting alternative.
command json serialise: Value -> unsafe-arbitrary-text do
  let Json = internal repo: self.serialisation lower: Value;
  foreign json.serialise(Json.value, Json.trusted);
test
  assert (#json bare serialise: 1234.0) === "1234";
  assert (#json bare serialise: "abc") === "\"abc\"";
  assert (#json bare serialise: [123.0, nothing, [true, false]]) === "\[123,null,\[true,false\]\]";
  assert (#json bare serialise: [a -> [1.0, 2.0], b -> [c -> 3.0]]) === "{\"a\":\[1,2\],\"b\":{\"c\":3}}";
  let Untrusted = foreign json.untrusted("abc");
  assert (#json bare serialise: [a -> [1.0, Untrusted]]) is untrusted-text;
end

/// Converts a simple Crochet value to a JSON piece of text, and formats the
/// output in a more human-readable way. See [command:_ serialise: _] for the
/// more efficient (but meant for computers!) alternative.
///
/// Note that if the input contains untrusted text, then the output will also
/// be an untrusted text.
command #json pretty-print: Value indentation: (Indent is integer) -> unsafe-arbitrary-text
requires positive-indentation :: Indent >= 0
do
  let Json = internal repo: self.serialisation lower: Value;
  foreign json.pretty-print(Json.value, Indent, Json.trusted);
test
  assert (#json bare pretty-print: [1.0, 2.0, 3.0] indentation: 2) === "\[\n  1,\n  2,\n  3\n\]";
  let Untrusted = foreign json.untrusted("abc");
  assert (#json bare pretty-print: [1.0, Untrusted] indentation: 2) is untrusted-text;
end