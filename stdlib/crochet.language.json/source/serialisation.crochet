% crochet

effect json-lowering with
  mark-untrusted();
end

command internal repo: (R is json-serialisation) lower: Value0 do
  let Trusted = #cell with-value: true;
  let Value = R lower: Value0;
  handle
    let Json = internal repo: R do-lower: Value;
    [value -> Json, trusted -> Trusted value];
  with
    on json-lowering.mark-untrusted() do
      Trusted <- false;
      continue with nothing;
    end
  end
end

command internal repo: (R is json-serialisation) do-lower: (X is json-typed-plain) =
  foreign json.typed(X.tag, self repo: R do-lower: X.value);

command internal repo: (R is json-serialisation) do-lower: (X is json-typed) do
  let Tag = R.brand-to-tag at: X.tag;
  foreign json.typed(Tag, self repo: R do-lower: X.value);
end

command internal repo: json-serialisation do-lower: json-null =
  foreign json.null();

command internal repo: json-serialisation do-lower: (X is json-boolean) =
  foreign json.boolean(X value);

command internal repo: json-serialisation do-lower: (X is json-number) =
  foreign json.number(X value);

command internal repo: json-serialisation do-lower: (X is json-text) do
  condition
    when X value is untrusted-text => perform json-lowering.mark-untrusted();
    otherwise => nothing;
  end

  foreign json.text(X value);
end

command internal repo: (R is json-serialisation) do-lower: (X is json-list) =
  foreign json.list(X values map: (self repo: R do-lower: _));

command internal repo: (R is json-serialisation) do-lower: (X is json-record) =
  foreign json.record(
    X value entries map: { Entry in
      [Entry key, self repo: R do-lower: Entry value];
    }
  );


command internal repo: (R is json-serialisation) trusted: (Trusted is boolean) reify: (X is unknown) do
  let Type = foreign json.get-type(X);
  condition
    when Type =:= "null" =>
      nothing;

    when Type =:= "number" =>
      foreign json.get-number(X);

    when Type =:= "boolean" =>
      foreign json.get-boolean(X);
    
    when (Type =:= "text") and Trusted =>
      foreign json.get-text(X);
    
    when (Type =:= "text") and (not Trusted) =>
      foreign json.untrusted(foreign json.get-text(X));

    when Type =:= "list" =>
      (foreign json.get-list(X)) map: (self repo: R trusted: Trusted reify: _);

    when Type =:= "record" =>
      (foreign json.get-record-entries(X))
        |> _ map: { X in
             #association key: X first value: (self repo: R trusted: Trusted reify: X second);
           }
        |> #map from: _;

    when Type =:= "typed" do
      let Type-tag = R.tag-to-brand at: (foreign json.get-typed-tag(X));
      (foreign json.get-typed-value(X))
        |> self repo: R trusted: Trusted reify: _
        |> R reify: _ tag: Type-tag;
    end
  end
end