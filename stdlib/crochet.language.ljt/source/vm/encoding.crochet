% crochet

open crochet.data.collection;

type ljt-encoder(
  encoder is cell<binary-encoder>
);

command ljt-vm encode: (Value is ljt-value) do
  let Encoder = new ljt-encoder(#cell with-value: #binary-encoder empty);

  (Encoder encode: Value).encoder value as byte-array;
end

command ljt-vm try-encode: (Value is ljt-value) do
  ljt try: { self encode: Value };
end


command ljt-encoder encode: (X is v-bool) do
  self.encoder <- self.encoder value append-boolean: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-bool(true))
    =:= (#byte-array from: [0x01]);

  assert (#ljt-vm make encode: new v-bool(false))
    =:= (#byte-array from: [0x00]);
end

command ljt-encoder encode: (X is v-int8) do
  self.encoder <- self.encoder value append-integer-8bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-int8(-1))
    =:= (#byte-array from: [0xff]);

  assert (#ljt-vm make encode: new v-int8(0))
    =:= (#byte-array from: [0x00]);

  assert (#ljt-vm make encode: new v-int8(1))
    =:= (#byte-array from: [0x01]);
end

command ljt-encoder encode: (X is v-int16) do
  self.encoder <- self.encoder value append-integer-16bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-int16(-1))
    =:= (#byte-array from: [0xff, 0xff]);

  assert (#ljt-vm make encode: new v-int16(0))
    =:= (#byte-array from: [0x00, 0x00]);

  assert (#ljt-vm make encode: new v-int16(1))
    =:= (#byte-array from: [0x01, 0x00]);

  assert (#ljt-vm make encode: new v-int16(300))
    =:= (#byte-array from: [0x2c, 0x01]);
end

command ljt-encoder encode: (X is v-int32) do
  self.encoder <- self.encoder value append-integer-32bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-int32(-1))
    =:= (#byte-array from: [0xff, 0xff, 0xff, 0xff]);

  assert (#ljt-vm make encode: new v-int32(0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-int32(1))
    =:= (#byte-array from: [0x01, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-int32(300))
    =:= (#byte-array from: [0x2c, 0x01, 0x00, 0x00]);  
end

command ljt-encoder encode: (X is v-uint8) do
  self.encoder <- self.encoder value append-unsigned-integer-8bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-uint8(0))
    =:= (#byte-array from: [0x00]);

  assert (#ljt-vm make encode: new v-uint8(1))
    =:= (#byte-array from: [0x01]);

  assert (#ljt-vm make encode: new v-uint8(255))
    =:= (#byte-array from: [0xff]);
end

command ljt-encoder encode: (X is v-uint16) do
  self.encoder <- self.encoder value append-unsigned-integer-16bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-uint16(0))
    =:= (#byte-array from: [0x00, 0x00]);

  assert (#ljt-vm make encode: new v-uint16(1))
    =:= (#byte-array from: [0x01, 0x00]);

  assert (#ljt-vm make encode: new v-uint16(65_535))
    =:= (#byte-array from: [0xff, 0xff]);
end

command ljt-encoder encode: (X is v-uint32) do
  self.encoder <- self.encoder value append-unsigned-integer-32bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-uint32(0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-uint32(1))
    =:= (#byte-array from: [0x01, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-uint32(300))
    =:= (#byte-array from: [0x2c, 0x01, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-uint32((2 ** 32) - 1))
    =:= (#byte-array from: [0xff, 0xff, 0xff, 0xff]);
end

command ljt-encoder encode: (X is v-float32) do
  self.encoder <- self.encoder value append-float-32bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-float32(0.0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-float32(1.0))
    =:= (#byte-array from: [0x00, 0x00, 0x80, 0x3f]);

  assert (#ljt-vm make encode: new v-float32(-1.0))
    =:= (#byte-array from: [0x00, 0x00, 0x80, 0xbf]);

  assert (#ljt-vm make encode: new v-float32(1_000.1))
    =:= (#byte-array from: [0x66, 0x06, 0x7a, 0x44]);
end

command ljt-encoder encode: (X is v-float64) do
  self.encoder <- self.encoder value append-float-64bit: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-float64(0.0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

  assert (#ljt-vm make encode: new v-float64(1.0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f]);

  assert (#ljt-vm make encode: new v-float64(-1.0))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf]);

  assert (#ljt-vm make encode: new v-float64(1_000.1))
    =:= (#byte-array from: [0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x8f, 0x40]);
end

command ljt-encoder encode: (X is v-integer) do
  self.encoder <- self.encoder value append: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-integer(0))
    =:= (#byte-array from: [ 0x00 // sign (+)
                           , 0x01, 0x00, 0x00, 0x00 // size: 0
                           , 0x00 // bytes
                           ]);
  
  assert (#ljt-vm make encode: new v-integer(1))
    =:= (#byte-array from: [0x00, 0x01, 0x00, 0x00, 0x00, 0x01]);

  assert (#ljt-vm make encode: new v-integer(-1))
    =:= (#byte-array from: [0x01, 0x01, 0x00, 0x00, 0x00, 0x01]);

  assert (#ljt-vm make encode: new v-integer(123_456_789_123_456_789_123_456_789))
    =:= (#byte-array from: [0x00, 0x0b, 0x00, 0x00, 0x00, 0x66, 0x1e, 0xfd, 0xf2, 0xe3, 0xb1, 0x9f, 0x7c, 0x04, 0x5f, 0x15]);
end

command ljt-encoder encode: (X is v-text) do
  self.encoder <- self.encoder value append: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-text(""))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]);
  
  assert (#ljt-vm make encode: new v-text("hello"))
    =:= (#byte-array from: [ 0x05, 0x00, 0x00, 0x00 // size: 5
                           , 0x68, 0x65, 0x6c, 0x6c, 0x6f // utf-8 bytes
                           ]);

  assert (#ljt-vm make encode: new v-text("😺❤️"))
    =:= (#byte-array from: [ 0x0a, 0x00, 0x00, 0x00
                           , 0xf0, 0x9f, 0x98, 0xba, 0xe2, 0x9d, 0xa4, 0xef, 0xb8, 0x8f
                           ]);
end

command ljt-encoder encode: (X is v-bytes) do
  self.encoder <- self.encoder value append: X.value;
  self;
test
  assert (#ljt-vm make encode: new v-bytes(#byte-array from: []))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]); // size only

  assert (#ljt-vm make encode: new v-bytes(#byte-array from: [0xca, 0xfe]))
    =:= (#byte-array from: [0x02, 0x00, 0x00, 0x00, 0xca, 0xfe]);
end

command ljt-encoder encode: (X is v-array) do
  self encode: new v-uint32(X.values count);
  for Value in X.values do
    self encode: Value;
  end
  self;
test
  assert (#ljt-vm make encode: new v-array(new t-array(t-uint8), []))
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]); // size only

  assert (#ljt-vm make encode: new v-array(new t-array(t-uint8), [new v-uint8(0), new v-uint8(0x80), new v-uint8(0xff)]))
    =:= (#byte-array from: [ 0x03, 0x00, 0x00, 0x00 // size
                           , 0x00, 0x80, 0xff
                           ]);
end

command ljt-encoder encode: (X is v-map) do
  self encode: new v-uint32(X.value count);
  for Pair in X.value entries do
    self encode: Pair key;
    self encode: Pair value;
  end
  self;
test
  let M1 = new v-map(new t-map(t-uint8, t-bool), #equality-map empty);
  assert (#ljt-vm make encode: M1)
    =:= (#byte-array from: [0x00, 0x00, 0x00, 0x00]); // size only

  let M2 = new v-map(new t-map(t-uint8, t-bool), 
    #equality-map empty
      | at: new v-uint8(0x00) put: new v-bool(true)
      | at: new v-uint8(0x80) put: new v-bool(false)
      | at: new v-uint8(0xff) put: new v-bool(true),
  );
  assert (#ljt-vm make encode: M2)
    =:= (#byte-array from: [ 0x03, 0x00, 0x00, 0x00 // size
                           , 0x00, 0x01  // key value
                           , 0x80, 0x00 
                           , 0xff, 0x01
                           ]);
end

command ljt-encoder encode: (X is v-tuple) do
  for Value in X.values do
    self encode: Value;
  end
  self;
test
  let T = new t-tuple(["x", "y"], [t-uint8, t-uint8]);
  assert (#ljt-vm make encode: new v-tuple(T, [new v-uint8(0x00), new v-uint8(0xff)]))
    =:= (#byte-array from: [0x00, 0xff]);
end

command ljt-encoder encode: (X is v-record) do
  self encode: new v-uint32(X.typ tag);
  self encode: X value;
test
  let T1 = new t-tuple(["x", "y"], [t-uint8, t-uint8]);
  let T2 = new t-record(new qualified-name(["point-2d"]), 1, T1);
  assert (#ljt-vm make encode: (T2 make: [new v-uint8(0x00), new v-uint8(0xff)]))
    === (#byte-array from: [ 0x01, 0x00, 0x00, 0x00 // global tag
                           , 0x00, 0xff
                           ]);
end

command ljt-encoder encode: (X is v-variant) do
  self encode: new v-uint8(X.typ variant-tag);
  self encode: X value;
test
  let Tt = new t-tuple(["x"], [t-uint8, t-uint8]);
  let Tv = new t-variant(new qualified-name(["value"]), 1, Tt);
  assert (#ljt-vm make encode: (Tv make: [new v-uint8(0x00), new v-uint8(0xff)]))
    === (#byte-array from: [ 0x01 // variant tag
                           , 0x00, 0xff
                           ]);
end

command ljt-encoder encode: (X is v-choice) do
  self encode: new v-uint32(X.typ tag);
  self encode: X value;
test
  let Tr1 = new t-tuple(["x"], [t-uint8]);
  let Tv1 = new t-variant(new qualified-name(["op", "push"]), 0, Tr1);

  let Tr2 = new t-tuple([], []);
  let Tv2 = new t-variant(new qualified-name(["op", "inc"]), 1, Tr2);

  let Tc = new t-choice(new qualified-name(["op"]), 1, [Tv1, Tv2]);

  assert (#ljt-vm make encode: (Tc make: (Tv1 make: [new v-uint8(0xff)])))
    =:= (#byte-array from: [ 0x01, 0x00, 0x00, 0x00 // global tag
                           , 0x00                   // variant tag
                           , 0xff
                           ]);

  assert (#ljt-vm make encode: (Tc make: (Tv2 make: [])))
    =:= (#byte-array from: [ 0x01, 0x00, 0x00, 0x00 // global tag
                           , 0x01                   // variant tag
                           ]);
end

command ljt-encoder encode: (X is v-just) do
  self encode: new v-bool(true);
  self encode: X.value;
test
  assert (#ljt-vm make encode: new v-just(new t-optional(t-uint8), new v-uint8(0xff)))
    =:= (#byte-array from: [0x01, 0xff]);
end

command ljt-encoder encode: (X is v-none) do
  self encode: new v-bool(false);
test
  assert (#ljt-vm make encode: new v-none(new t-optional(t-uint8)))
    =:= (#byte-array from: [0x00]);
end