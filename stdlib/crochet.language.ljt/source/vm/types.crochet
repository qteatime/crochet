% crochet

abstract ljt-type;
singleton t-bool is ljt-type;
singleton t-int8 is ljt-type;
singleton t-int16 is ljt-type;
singleton t-int32 is ljt-type;
singleton t-uint8 is ljt-type;
singleton t-uint16 is ljt-type;
singleton t-uint32 is ljt-type;
singleton t-integer is ljt-type;
singleton t-float32 is ljt-type;
singleton t-float64 is ljt-type;
singleton t-text is ljt-type;
singleton t-bytes is ljt-type;

type t-lazy(thunk is thunk) is ljt-type;
type t-array(global item is ljt-type) is ljt-type;
type t-map(global key is ljt-type, global value is ljt-type) is ljt-type;
type t-tuple(global fields is list<text>, global types is list<ljt-type>) is ljt-type;
type t-optional(global item is ljt-type) is ljt-type;
type t-choice(global types is map<integer, ljt-tagged>) is ljt-type;
type t-tagged(name is qualified-name, global tag is integer, global typ is ljt-type) is ljt-type;

command t-tagged name = self.name to-text;
command t-tagged qualified-name = self.name;
command t-tagged base-name = self qualified-name base-name;

command t-lazy materialise = force self.thunk;


// -- Equality
implement equality for ljt-type;
command (X is ljt-type) === (Y is ljt-type) = X =:= Y;

command (X is t-lazy) === (Y is t-lazy) =
  (force X) === (force Y);

command (X is t-array) === (Y is t-array) =
  X.item === Y.item;

command (X is t-map) === (Y is t-map) =
  (X.key === Y.key) and-also: {X.value === Y.value};

command (X is t-tuple) === (Y is t-tuple) =
  X.types === Y.types;

command (X is t-optional) === (Y is t-optional) =
  X.item === Y.item;

command (X is t-choice) === (Y is t-choice) =
  X.types === Y.types;

command (X is t-tagged) === (Y is t-tagged) =
  (X.tag === Y.tag) and-also: {X.typ === Y.typ};


// -- Representation
command t-bool text-representation = "Boolean";
command t-int8 text-representation = "Int8";
command t-int16 text-representation = "Int16";
command t-int32 text-representation = "Int32";
command t-uint8 text-representation = "Uint8";
command t-uint16 text-representation = "Uint16";
command t-uint32 text-representation = "Uint32";
command t-integer text-representation = "Integer";
command t-float32 text-representation = "Float32";
command t-float64 text-representation = "Float64";
command t-text text-representation = "Text";
command t-bytes text-representation = "Raw-bytes";

command t-lazy text-representation =
  (force self.thunk) text-representation;

command t-array text-representation =
  "[self.item text-representation]\[\]" flatten-into-plain-text;

command t-map text-representation = 
  "([self.key text-representation] -> [self.value text-representation])" flatten-into-plain-text;

command t-tuple text-representation do
  let Pairs = self.fields zip: self.types with: { Field, Type in
    "[Field]: [Type text-representation];";
  };
  "{[#text join: Pairs with: " "]}" flatten-into-plain-text;
end

command t-optional text-representation =
  "[self.item text-representation]?" flatten-into-plain-text;

command t-choice text-representation do
  let Types = self.types values map: (_ text-representation);
  "union {[#text join: Types with: "; "]}" flatten-into-plain-text;
end

command t-tagged text-representation =
  "type [self name]([self.tag to-text]) [self.typ text-representation]"
    | flatten-into-plain-text;


command ljt-type short-representation =
  self text-representation;

command t-lazy short-representation =
  (force self.thunk) short-representation;

command t-array short-representation =
  "[self.item short-representation]\[\]" flatten-into-plain-text;

command t-map short-representation = 
  "([self.key short-representation] -> [self.value short-representation])" flatten-into-plain-text;

command t-tuple short-representation do
  let Pairs = self.fields zip: self.types with: { Field, Type in
    "[Field]: [Type short-representation];";
  };
  "{[#text join: Pairs with: " "]}" flatten-into-plain-text;
end

command t-optional short-representation =
  "[self.item short-representation]?" flatten-into-plain-text;

command t-tagged short-representation =
  "[self name]([self.tag to-text])" flatten-into-plain-text;

command t-choice short-representation =
  "TODO";


// -- Default values
command t-bool default-value = new v-bool(false);
command t-int8 default-value = new v-int8(0);
command t-int16 default-value = new v-int16(0);
command t-int32 default-value = new v-int32(0);
command t-uint8 default-value = new v-uint8(0);
command t-uint16 default-value = new v-uint16(0);
command t-uint32 default-value = new v-uint32(0);
command t-integer default-value = new v-integer(0);
command t-float32 default-value = new v-float32(0.0);
command t-float64 default-value = new v-float64(0.0);
command t-text default-value = new v-text("");
command t-bytes default-value = new v-bytes(#byte-array allocate: 0);

command t-lazy default-value = (force self.thunk) default-value;
command t-array default-value = new v-array(self, []);
command t-map default-value = new v-map(self, #map empty);
command t-tuple default-value = new v-tuple(self, self.types map: (_ default-value));
command t-optional default-value = new v-none(self);
command t-choice default-value = new v-choice(self, self.types values first default-value);
command t-tagged default-value = new v-tagged(self, self.tag, self.typ default-value);


// -- Constructors
command t-bool make: (X is boolean) =
  new v-bool(X);

command t-int8 make: (X is integer)
requires 
  in-bounds :: (X >= -128) and (X <= 127)
= new v-int8(X);

command t-int16 make: (X is integer)
requires
  in-bounds :: (X >= -32_768) and (X <= 32_767)
= new v-int16(X);

command t-int32 make: (X is integer)
requires
  in-bounds :: (X >= -2_147_483_648) and (X <= 2_147_483_647)
= new v-int32(X);

command t-uint8 make: (X is integer)
requires
  in-bounds :: (X >= 0) and (X <= 255)
= new v-uint8(X);

command t-uint16 make: (X is integer)
requires
  in-bounds :: (X >= 0) and (X <= 65_535)
= new v-uint16(X);

command t-uint32 make: (X is integer)
requires
  in-bounds :: (X >= 0) and (X <= 4_294_967_295)
= new v-uint32(X);

// FIXME: check bounds
command t-float32 make: (X is float-64bit) =
  new v-float32(X);

command t-float64 make: (X is float-64bit) =
  new v-float64(X);

command t-integer make: (X is integer) =
  new v-integer(X);

command t-text make: (X is text) =
  new v-text(X);

command t-bytes make: (X is byte-array) =
  new v-bytes(X);

command t-lazy make: X =
  self materialise make: X;

// FIXME: type check
command t-array make: (Xs is list) =
  new v-array(self, Xs);

command t-map make: (M is map) =
  new v-map(self, M);

command t-tuple make: (Values is list) =
  new v-tuple(self, Values);

command t-tagged make: Value =
  new v-tagged(self, self.tag, Value);

command t-optional make: (Value is error) = 
  new v-none(self);

command t-optional make: (Value is ok) =
  new v-just(self, Value value);

command t-choice make: Value =
  new v-choice(self, Value);