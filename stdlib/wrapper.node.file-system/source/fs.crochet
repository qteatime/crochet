% crochet

local abstract fs-mod;
command #fs-mod append-file: (Path is text) text: (Data is text)
  = foreign fs.append-file-text(Path, Data);

command #fs-mod copy-file: (From is text) to: (To is text)
  = foreign fs.copy-file(From, To);

command #fs-mod exists: (Path is text)
  = foreign fs.exists(Path);

command #fs-mod mkdir: (Path is text)
  = foreign fs.mkdir(Path);

command #fs-mod mkdir-temp: (Prefix is text)
  = foreign fs.mkdir-temp(Prefix);

command #fs-mod readdir: (Path is text)
  = foreign fs.readdir(Path);

command #fs-mod read-file-text: (Path is text)
  = foreign fs.read-file-text(Path);

command #fs-mod real-path: (Path is text)
  = foreign fs.real-path(Path);

command #fs-mod rename: (From is text) to: (To is text)
  = foreign fs.rename(From, To);

command #fs-mod rmdir: (Path is text) recursive: (Rec is boolean)
  = foreign fs.rmdir(Path, Rec);

command #fs-mod rm: (Path is text) force: (Force is boolean) recursive: (Rec is boolean)
  = foreign fs.rm(Path, Force, Rec);

command #fs-mod write-file: (Path is text) text: (Text is text)
  = foreign fs.write-file-text(Path, Text);

command #fs-mod is-file: (Path is text)
  = foreign fs.is-file(Path);

command #fs-mod is-directory: (Path is text)
  = foreign fs.is-directory(Path);


singleton file-system;
local abstract node;
local type inode is node(path is path-obj);
local type file is node(path is path-obj);
local type directory is node(path is path-obj);

command file-system at: (Path is path-obj)
  = new inode(Path);

command file-system file: (Path is path-obj)
  = (self at: Path) to-file;

command file-system directory: (Path is path-obj)
  = (self at: Path) to-directory;

command file-system make-directory: (Path is path-obj) do
  #fs-mod mkdir: (Path to-text);
  file-system directory: Path;
end

command file-system make-temporary-directory: (Name is text) do
  let Path = #fs-mod mkdir-temp: Name;
  file-system directory: (#path from-text: Path);
end


command node exists
  = #fs-mod exists: (self.path to-text);

command node real-path
  = #fs-mod real-path: (self.path to-text);

command node move-to: (Path is path-obj) do
  #fs-mod rename: (self.path to-text) to: (Path to-text);
  (file-system at: Path) resolve;
end

command node rename: (NewName is text)
requires basename :: (#path from-text: NewName) base-name =:= NewName
do
  let NewPath = (self.path directory / NewName); 
  #fs-mod rename: (self.path to-text)
          to: (NewPath to-text);
  (file-system at: NewPath) resolve;
end

command node rename-preserving-extension: (NewName is text)
requires extensionless :: (#path from-text: NewName) extension =:= ""
  = self rename: (NewName ++ self.path extension);

command node remove
  = #fs-mod rm: (self.path to-text) force: false recursive: false;

command node force-remove
  = #fs-mod rm: (self.path to-text) force: true recursive: false;

command node force-remove-recursive
  = #fs-mod rm: (self.path to-text) force: true recursive: true;

command node is-file =
  #fs-mod is-file: (self.path to-text);

command node is-directory =
  #fs-mod is-directory: (self.path to-text);


command inode to-file
requires file :: self is-file
  = new file(self.path);

command inode to-directory
requires directory :: self is-directory
  = new directory(self.path);

command inode resolve do
  condition
    when self is-file => self to-file;
    when self is-directory => self to-directory;
    always do assert not "Unhandled" end
  end
end



command file append-text: (Text is text) do
  #fs-mod append-file: (self.path to-text) text: Text;
  self;
end

command file copy-to: (Target is path-obj) do
  #fs-mod copy-file: (self.path to-text) to: (Target to-text);
  self;
end

command file read-text
  = #fs-mod read-file-text: (self.path to-text);

command file write-text: (Text is text) do
  #fs-mod write-file: (self.path to-text) text: Text;
  self;
end


command directory list do
  let Files = #fs-mod readdir: (self.path to-text);
  for File in Files do
    (file-system at: (self.path join: File)) resolve;
  end
end

command directory remove =
  #fs-mod rmdir: (self.path to-text) recursive: false;

command directory remove-recursive =
  #fs-mod rmdir: (self.path to-text) recursive: true;



