% crochet

abstract random;
local type xor-shift is random(seed, inc);
local type mutable-random is random(random is cell);

local type random-next(value, random is random);

// Effects
effect random with
  get-random();
end

command #random with-source: (Instance0 is random) do: (Block is function-0) do
  let Instance = Instance0 mutable;
  handle
    Block();
  with
    on random.get-random() => continue with Instance;
  end
end


// Constructors
command #random with-seed: Seed -> xor-shift
  = #random xor-shift: Seed;

command #random with-random-seed -> xor-shift
  = #random xor-shift;

command #random xor-shift: Seed 
requires unsigned-small-integer :: (Seed >= 0) and (Seed < (2 ** 32));
  = new xor-shift(Seed, Seed);

command #random xor-shift -> xor-shift do
  let State = foreign xorshift.random-seed();
  new xor-shift(State.seed, State.inc);
end

command #random global -> random do
  perform random.get-random();
end

command random mutable = new mutable-random(#cell with-value: self);


// Xor-shift
command xor-shift uniform do
  let Result = foreign xorshift.next-uniform(self.seed, self.inc);
  new random-next(Result.value, new xor-shift(Result.seed, Result.inc))
test
  let Random = #random xor-shift: 20;
  let Result = Random uniform;
  assert Random.seed =:= 20;
  assert Result.value =:= 0.5964457555674016;
  assert Result.random.seed =:= 1280857507;
end

command xor-shift between: Min and: Max
requires
  ordered :: Min <= Max
do
  let Result = foreign xorshift.next-integer(self.seed, self.inc, Min, Max);
  new random-next(Result.value, new xor-shift(Result.seed, Result.inc));
test
  let Random = #random xor-shift: 20;
  let Result = Random between: 1 and: 20;
  assert Random.seed =:= 20;
  assert Result.value =:= 12;
  assert Result.random.seed =:= 1280857507;
end

command xor-shift choose: (Items is tuple)
requires non-empty :: not (Items is-empty)
do
  let Result = self between: 1 and: Items count;
  let Choice = Items at: Result.value;
  new random-next(Choice, Result.random);
test
  let Random = #random xor-shift: 20;
  let Items = [1, 2, 3, 4];

  let Res1 = Random choose: Items;
  assert Res1.value =:= 2;

  let Res2 = Res1.random choose: Items;
  assert Res2.value =:= 1;

  let Res3 = Res2.random choose: Items;
  assert Res3.value =:= 3;
end

command xor-shift choose-and-tear: (Items0 is tuple)
requires non-empty :: not (Items0 is-empty)
do
  let Result = self between: 1 and: Items0 count;
  let Choice = Items0 at: Result.value;
  let Items = Items0 delete-at: Result.value;
  new random-next(
    [
      choice -> Choice,
      items -> Items
    ],
    Result.random
  );
test
  let Random = #random xor-shift: 20;
  let Items = [1, 2, 3, 4];
  let Res1 = Random choose-and-tear: Items;
  assert Res1.value =:= [
    choice -> 2,
    items -> [1, 3, 4]
  ];

  let Res2 = Res1.random choose-and-tear: Res1.value.items;
  assert Res2.value =:= [
    choice -> 1,
    items -> [3, 4]
  ];

  let Res3 = Res2.random choose-and-tear: Res2.value.items;
  assert Res3.value =:= [
    choice -> 3,
    items -> [4]
  ];

  let Res4 = Res3.random choose-and-tear: Res3.value.items;
  assert Res4.value =:= [
    choice -> 4,
    items -> []
  ];
end

command xor-shift choose-weighted: (Items0 is tuple)
requires non-empty :: not (Items0 is-empty)
do
  let Total = Items0.score sum;
  let Items = Items0 sort-by: { A, B in A.score compare-to: B.score };
  let Result = self between: 0 and: Total;
  let Choice = Result.value;

  let Go = { Score, Items in do
    let Item = Items first;
    condition
      when Score <= Item.score => Item.value;
      always => Go(Score - Item.score, Items but-first);
    end
  end};

  new random-next(Go(Choice, Items), Result.random);
test
  let Random = #random xor-shift: 20;
  let Items = [
    [score -> 10, value -> "a"],
    [score -> 3, value -> "b"],
    [score -> 4, value -> "c"]
  ];

  let R1 = Random choose-weighted: Items;
  assert R1.value =:= "a";

  let R2 = R1.random choose-weighted: Items;
  assert R2.value =:= "b";

  let R3 = R2.random choose-weighted: Items;
  assert R3.value =:= "a";
end

// Mutable
command mutable-random uniform do
  let Result = self.random value uniform;
  self.random <- Result.random;
  Result.value
test
  let Random = (#random xor-shift: 20) mutable;
  assert Random uniform =:= 0.5964457555674016;
  assert (Random.random value).seed =:= 1280857507;

  assert Random uniform =:= 0.20454500569030643;
  assert (Random.random value).seed =:= 439257055;
end

command mutable-random between: Min and: Max
requires ordered :: Min <= Max
do
  let Result = self.random value between: Min and: Max;
  self.random <- Result.random;
  Result.value;
test
  let Random = (#random xor-shift: 20) mutable;
  assert (Random between: 1 and: 20) =:= 12;
  assert (Random.random value).seed =:= 1280857507;

  assert (Random between: 1 and: 20) =:= 4;
  assert (Random.random value).seed =:= 439257055;
end

command mutable-random choose: (Items is tuple) do
  let Result = self.random value choose: Items;
  self.random <- Result.random;
  Result.value;
test
  let Random = (#random xor-shift: 20) mutable;
  let Items = [1, 2, 3, 4];

  assert (Random choose: Items) =:= 2;
  assert (Random choose: Items) =:= 1;
  assert (Random choose: Items) =:= 3;
end

command mutable-random choose-and-tear: (Items is tuple) do
  let Result = self.random value choose-and-tear: Items;
  self.random <- Result.random;
  Result.value;
test
  let Random = (#random xor-shift: 20) mutable;
  let Items = [1, 2, 3, 4];

  let Res1 = Random choose-and-tear: Items;
  assert Res1 =:= [
    choice -> 2,
    items -> [1, 3, 4]
  ];

  let Res2 = Random choose-and-tear: Res1.items;
  assert Res2 =:= [
    choice -> 1,
    items -> [3, 4]
  ];

  let Res3 = Random choose-and-tear: Res2.items;
  assert Res3 =:= [
    choice -> 3,
    items -> [4]
  ];

  let Res4 = Random choose-and-tear: Res3.items;
  assert Res4 =:= [
    choice -> 4,
    items -> []
  ];
end

command mutable-random choose-weighted: (Items is tuple) do
  let Result = self.random value choose-weighted: Items;
  self.random <- Result.random;
  Result.value;
test
  let Random = (#random xor-shift: 20) mutable;
  let Items = [
    [score -> 10, value -> "a"],
    [score -> 3, value -> "b"],
    [score -> 4, value -> "c"]
  ];

  assert (Random choose-weighted: Items) =:= "a";
  assert (Random choose-weighted: Items) =:= "b";
  assert (Random choose-weighted: Items) =:= "a";
end