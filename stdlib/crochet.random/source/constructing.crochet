% crochet

/// Constructs a predictable random number generator with a "random"
/// seed---where the seed is selected according to the randomness
/// source that's active in the calling context.
/// See [effect:randomness-source].
command #random with-random-seed -> xor-shift do
  let Seed = perform randomness-source.random-seed();
  #random with-seed: Seed;
end

/// Constructs a predictable random number generator with the given
/// `Seed`. Currently uses [type:xor-shift] as the implementation.
command #random with-seed: Seed -> xor-shift
  = #random xor-shift: Seed;

/// Constructs a XOR-shift-based predictable random number generator
/// with the given `Seed`.
command #random xor-shift: Seed 
requires unsigned-small-integer :: (Seed >= 0) and (Seed < (2 ** 32))
  = new xor-shift(Seed, Seed);

/// Constructs a mutable, predictable random number generator from
/// an existing immutable one. See [type:mutable-random].
command random mutable = new mutable-random(#cell with-value: self);