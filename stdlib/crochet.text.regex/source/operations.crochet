% crochet

/// True if the regex can match the given text, anywhere (unless pinned).
command compiled-regex-pattern can-match: (Text is text) -> boolean =
  foreign re.test(self.code, self.flags to-text, Text)
test
  assert (regex from-text: "ca." | compile | can-match: "cat");
  assert not (regex from-text: "ca." | compile | can-match: "bat");
end

/// Returns the first successful match in the text, if one exists.
command compiled-regex-pattern search-first: (Text is text) -> result<regex-match, regex-error> do
  let Result = foreign re.search(self.code, self.flags to-text, Text);
  condition
    when Result is nothing => #result error: regex-matched-nothing;
    otherwise => #result ok: new regex-match(Result);
  end
test
  let R1 = regex from-text: "ca(.)"
            | compile
            | search-first: "a fluffy cat here, a bat there"
            | value;

  assert R1 matched-text === "cat";
  assert R1 indexed-captures === ["t"];
  assert R1 named-captures === [->];

  let R2 = regex from-text: "(?<first>.)a(.)"
            | compile
            | search-first: "a fluffy cat here, a bat there"
            | value;
  
  assert R2 matched-text === "cat";
  assert R2 indexed-captures === ["c", "t"];
  assert R2 named-captures === [first -> "c"];

  let R3 = regex from-text: "bat"
            | compile
            | search-first: "a fluffy cat here";

  assert R3 === (#result error: regex-matched-nothing);
end

/// Returns all non-overlapping matches in the text.
command compiled-regex-pattern search-all: (Text is text) -> list<regex-match> do
  let Result = foreign re.search-all(self.code, self.flags to-text, Text);
  Result map: { X in new regex-match(X) };
test
  let R1 = regex from-text: "ca(.)"
            | compile
            | search-all: "a fluffy cat here, a bat there";

  assert R1 count === 1;
  assert R1 first matched-text === "cat";
  assert R1 first indexed-captures === ["t"];
  assert R1 first named-captures === [->];

  let R2 = regex from-text: "(?<first>\[cb\])a(.)"
            | compile
            | search-all: "a fluffy cat here, a bat there";

  assert R2 count === 2;

  assert R2 first matched-text === "cat";
  assert R2 first indexed-captures === ["c", "t"];
  assert R2 first named-captures === [first -> "c"];

  assert (R2 at: 2 | matched-text) === "bat";
  assert (R2 at: 2 | indexed-captures) === ["b", "t"];
  assert (R2 at: 2 | named-captures) === [first -> "b"];
end

/// Replaces the first match with `Text` in the `Corpus`.
command compiled-regex-pattern substitute-first-by: (Text is text) in: (Corpus is text) -> text do
  foreign re.replace(self.code, self.flags to-text, Text, Corpus)
test
  let R1 = regex from-text: "(.)at" | compile;
  assert (R1 substitute-first-by: "rat" in: "a fluffy cat here, a bat there")
    === "a fluffy rat here, a bat there";

  assert (R1 substitute-first-by: "rat" in: "a fluffy dog here")
    === "a fluffy dog here";
end

/// Replaces all non-overlapping matches with `Text` in `Corpus`.
command compiled-regex-pattern substitute-all-by: (Text is text) in: (Corpus is text) -> text do
  foreign re.replace-all(self.code, self.flags to-text, Text, Corpus);
test
  let R1 = regex from-text: "(.)at" | compile;
  assert (R1 substitute-all-by: "rat" in: "a fluffy cat here, a bat there")
    === "a fluffy rat here, a rat there";

  assert (R1 substitute-all-by: "rat" in: "a fluffy dog here")
    === "a fluffy dog here";
end