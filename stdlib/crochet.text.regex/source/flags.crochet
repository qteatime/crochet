% crochet

// Here we handle the set of regular expression flags that JS uses.
// We keep a smaller set of flags because some of these are decided
// by methods instead (e.g.: `search-all` vs `search` instead of
// setting a weird "global" flag).
//
// Methods are provided to manipulate these flags and also give them
// an easier to understand name. So we always start with no flags
// defined.
local singleton module;

/// Constructs an empty set of flags.
command #regex-flags empty =
  new regex-flags(false, false, false);


/// Turns on case-insensitivity (e.g.: `a` matches both "a" and "A").
command regex-flags case-insensitive =
  new regex-flags(true, self.multiline, self.dot-all);

command compiled-regex-pattern case-insensitive =
  new compiled-regex-pattern(self.code, self.flags case-insensitive);


/// Turns off case-insensitivity (e.g.: `a` only matches "a")
command regex-flags case-sensitive =
  new regex-flags(false, self.multiline, self.dot-all);

command compiled-regex-pattern case-sensitive =
  new compiled-regex-pattern(self.code, self.flags case-sensitive);


/// Turns on multi-line support. Pins will count from line beginnings and
/// endings, rather than the start and end of the whole text.
command regex-flags pin-at-line-endings =
  new regex-flags(self.ignore-case, true, self.dot-all);

command compiled-regex-pattern pin-at-line-endings =
  new compiled-regex-pattern(self.code, self.flags pin-at-line-endings);


/// Turns off multi-line support. Pins will count from the start and end
/// of the whole text, rather than the start and end of each line.
command regex-flags pin-at-text-endings =
  new regex-flags(self.ignore-case, false, self.dot-all);

command compiled-regex-pattern pin-at-text-endings =
  new compiled-regex-pattern(self.code, self.flags pin-at-text-endings);


/// Allows `.` to match any character, including new lines.
command regex-flags anything-matches-newline =
  new regex-flags(self.ignore-case, self.multiline, true);

command compiled-regex-pattern anything-matches-newline =
  new compiled-regex-pattern(self.code, self.flags anything-matches-newline);


/// Does not allow `.` to match a new line character.
command regex-flags anything-does-not-match-newline =
  new regex-flags(self.ignore-case, self.multiline, false);

command compiled-regex-pattern anything-does-not-match-newline =
  new compiled-regex-pattern(self.code, self.flags anything-does-not-match-newline);


/// Replaces the current set of flags for the regular expression with
/// the given set of flags.
command compiled-regex-pattern with-flags: (Flags is regex-flags) =
  new compiled-regex-pattern(self.code, Flags);