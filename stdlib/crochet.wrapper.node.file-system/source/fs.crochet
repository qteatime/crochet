% crochet

capability file-system;

singleton file-system;
local abstract node;
local type inode(path is path-obj) is node;
local type file(path is path-obj) is node;
local type directory(path is path-obj) is node;

protect type file-system with file-system;
protect global file-system with file-system;

command file-system at: (Path is path-obj)
  = new inode(Path);

command file-system at: (Path is static-text)
  = file-system at: (#path from-text: Path);

command file-system file: Path
  = (self at: Path) to-file;

command file-system directory: Path
  = (self at: Path) to-directory;

command file-system make-directory: Path do
  file-system make-directory: Path recursive: false;
end

command file-system make-directory: (Path is static-text) recursive: (Rec is boolean) do
  file-system make-directory: (#path from-text: Path) recursive: Rec;
end

command file-system make-directory: (Path is path-obj) recursive: (Rec is boolean) do
  foreign fs.mkdir(Path to-text, Rec);
  file-system directory: Path;
end

command file-system make-temporary-directory: (Name is text) do
  let Path = foreign fs.mkdir-tmp(Name);
  file-system directory: (#path from-text: Path);
end


command node exists
  = foreign fs.exists(self.path to-text);

command node real-path
  = #path from-text: (foreign fs.real-path(self.path to-text));

command node path = self.path;

command node move-to: (Path is path-obj) do
  foreign fs.rename(self.path to-text, Path to-text);
  (file-system at: Path) resolve;
end

command node rename: (NewName is text)
requires basename :: (#path from-text: NewName) base-name =:= NewName
do
  let NewPath = (self.path directory / NewName); 
  foreign fs.rename(self.path to-text, NewPath to-text);
  (file-system at: NewPath) resolve;
end

command node rename-preserving-extension: (NewName is text)
requires extensionless :: (#path from-text: NewName) extension =:= ""
  = self rename: (NewName ++ self.path extension);

command node remove
  = foreign fs.rm(self.path to-text, false, false);

command node force-remove
  = foreign fs.rm(self.path to-text, true, false);

command node force-remove-recursive
  = foreign fs.rm(self.path to-text, true, true);

command node is-file =
  foreign fs.is-file(self.path to-text);

command node is-directory =
  foreign fs.is-directory(self.path to-text);


command inode to-file
requires file :: self is-file
  = new file(self.path);

command inode to-directory
requires directory :: self is-directory
  = new directory(self.path);

command inode resolve do
  condition
    when self is-file => self to-file;
    when self is-directory => self to-directory;
  end
end

command inode overwrite-file do
  foreign fs.touch-overwrite-file(self.path to-text);
  self to-file;
end


command file append-text: (Text is text) do
  foreign fs.append-file-text(self.path to-text, Text);
  self;
end

command file copy-to: (Target is path-obj) do
  foreign fs.copy-file(self.path to-text, Target to-text);
  self;
end

command file read-text =
  foreign fs.read-file-text(self.path to-text);

command file write-text: (Text is text) do
  foreign fs.write-file-text(self.path to-text, Text);
  self;
end

command file read-bytes =
  foreign fs.read-file-bytes(self.path to-text);

command file write-bytes: (Bytes is byte-array) do
  foreign fs.write-file-bytes(self.path to-text, Bytes);
  self;
end


command directory list do
  let Files = foreign fs.readdir(self.path to-text);
  for File in Files do
    (file-system at: (self.path / File)) resolve;
  end
end

command directory remove =
  foreign fs.rmdir(self.path to-text, false);

command directory remove-recursive =
  foreign fs.rmdir(self.path to-text, true);
