% crochet


abstract path;
type path-obj(path is text) is path;

command #path from-text: (Text is text)
  = new path-obj(Text);

command #path separator = foreign path.separator();
command #path delimiter = foreign path.delimiter();

command #path is-segment: (Text is text)
  = not ((Text contains: #path separator) or (Text contains: #path delimiter));

command path-obj base-name =
  foreign path.basename(self.path);

command path-obj base-name-without-extension: (Extension is text) =
  foreign path.basename-ext(self.path, Extension);

command path-obj base-name-without-extension =
  self base-name-without-extension: self extension;

command path-obj directory =
  new path-obj(foreign path.dirname(self.path));

command path-obj extension =
  foreign path.extname(self.path);

command path-obj is-absolute =
  foreign path.is-absolute(self.path);

command path-obj join: (That is path-obj) =
  new path-obj(foreign path.join(self.path, That.path));

command path-obj / (That is text)
requires
  segment :: #path is-segment: That
do
  new path-obj(foreign path.join(self.path, That));
end

command path-obj normalise =
  new path-obj(foreign path.normalise(self.path));

command path-obj relative-to: (That is path-obj) =
  new path-obj(foreign path.relative(That.path, self.path));

command path-obj resolve =
  new path-obj(foreign path.resolve(self.path));

command path-obj to-text =
  self.path;
