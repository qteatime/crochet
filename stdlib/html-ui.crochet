% crochet

type html-element = foreign crochet.ui.html.element;
type html-menu = foreign crochet.ui.html.menu;

singleton html;
singleton ui;

command html show: X =
  foreign crochet.ui.html.show(X);

command html wait-click =
  foreign crochet.ui.html.wait();

command html box: Name class: Class attributes: Attrs children: Children =
  foreign crochet.ui.html.box(Name, Class, Attrs, Children);

command html text: Text =
  foreign crochet.ui.html.text(Text);

command html menu: Items class: Class =
  foreign crochet.ui.html.menu(Class, Items);

command (X is html-menu) selected =
  foreign crochet.ui.html.menu-selected(X);

command html preload: Url =
  foreign crochet.ui.html.preload(Url);

command html image: Url =
  foreign crochet.ui.html.image(Url);

command html animate: Element frame-rate: Rate =
  foreign crochet.ui.html.animate(Element, Rate);

command html make-animation: Elements =
  foreign crochet.ui.html.make-animation(Elements);

command html mark =
  foreign crochet.ui.html.mark();

command X show {
  X to-html show;
}

command (X is html-element) show {
  html show: X;
}

command X show-wait {
  X show;
  wait-click;
}

command ui mark {
  html mark;
}

command X to-html {
  X debug-representation text;
}

command (X is html-element) to-html {
  X;
}

command (X is text) to-html {
  X text;
}

command (X is interpolation) to-html {
  X parts to-html;
}

command (Xs is stream) to-html {
  let Items = for X in Xs { X to-html };
  html box: "span"
       class: "crochet-stream"
       attributes: [->]
       children: Items;
}


command (Text is text) text {
  html text: Text;
}

command preload: (Url is text) {
  html preload: Url;
}

command html-element animate: (FrameRate is integer) {
  html animate: self frame-rate: FrameRate;
}

command image: (Url is text) {
  html box: "img"
       class: "crochet-image"
       attributes: [src -> Url]
       children: [];
}

command animation: (Elements is stream) {
  html make-animation: (for X in Elements { X to-html });
}

command header: X {
  html
    box: "header"
    class: "crochet-header"
    attributes: [->]
    children: [X to-html];
}

command title: X {
  html
    box: "h1"
    class: "crochet-title"
    attributes: [->]
    children: [X to-html];
}

command subtitle: X {
  html
    box: "h2"
    class: "crochet-subtitle"
    attributes: [->]
    children: [X to-html];
}

command monospace: X {
  box: "crochet-mono" children: X;
}

command paragraph: X {
  html 
    box: "p"
    class: "crochet-paragraph"
    attributes: [->]
    children: [X to-html];
}

command box: (Class is text) children: X {
  html box: "div"
       class: Class
       attributes: [->]
       children: [X to-html];
}

command flow: X {
  box: "crochet-flow" children: X to-html;
}

command stack: X {
  box: "crochet-stack" children: X to-html;
}

command emphasis: X {
  html
    box: "em"
    class: "crochet-emphasis"
    attributes: [->]
    children: [X to-html];
}

command strong: X {
  html
    box: "strong"
    class: "crochet-strong"
    attributes: [->]
    children: [X to-html];
}

command ui divider {
  box: "crochet-divider" children: [];
}

command section: X {
  html
    box: "section"
    class: "crochet-section"
    attributes: [->]
    children: [X to-html];
}

command button: X {
  html
    box: "div"
    class: "crochet-button"
    attributes: [->]
    children: [X to-html];
}

command menu: (Items0 is stream) {
  let Items = for X in Items0 {
    [
      Title -> (button: X.Title to-html),
      Value -> X.Value,
    ]
  };

  html
    menu: Items
    class: "crochet-menu";
}