% crochet

type html-element = foreign crochet.ui.html.element;
type html-menu = foreign crochet.ui.html.menu;

singleton html;

command html show: X =
  foreign crochet.ui.html.show(X);

command html wait-click =
  foreign crochet.ui.html.wait();

command html box: Name class: Class children: Children =
  foreign crochet.ui.html.box(Name, Class, Children);

command html text: Text =
  foreign crochet.ui.html.text(Text);

command html menu: Items class: Class =
  foreign crochet.ui.html.menu(Class, Items);

command (X is html-menu) selected =
  foreign crochet.ui.html.menu-selected(X);


command X show {
  X to-html show;
}

command (X is html-element) show {
  html show: X;
}

command X show-wait {
  X show;
  wait-click;
}


command X to-html {
  X debug-representation text;
}

command (X is html-element) to-html {
  X;
}

command (X is text) to-html {
  X text;
}

command (X is interpolation) to-html {
  X parts to-html;
}

command (Xs is stream) to-html {
  let Items = for X in Xs { X to-html };
  html box: "span" class: "crochet-stream" children: Items;
}


command (Text is text) text {
  html text: Text;
}

command header: X {
  html
    box: "header"
    class: "crochet-header"
    children: [X to-html];
}

command title: X {
  html
    box: "h1"
    class: "crochet-title"
    children: [X to-html];
}

command subtitle: X {
  html
    box: "h2"
    class: "crochet-subtitle"
    children: [X to-html];
}

command monospace: X {
  html
    box: "div"
    class: "crochet-mono"
    children: [X to-html];
}

command paragraph: X {
  html 
    box: "p"
    class: "crochet-paragraph"
    children: [X to-html];
}

command box: (Class is text) children: X {
  html box: "div" class: Class children: [X to-html];
}

command flow: X {
  box: "crochet-flow" children: X to-html;
}

command stack: X {
  box: "crochet-stack" children: X to-html;
}

command emphasis: X {
  html
    box: "em"
    class: "crochet-emphasis"
    children: [X to-html];
}

command strong: X {
  html
    box: "strong"
    class: "crochet-strong"
    children: [X to-html];
}

command html divider {
  html
    box: "div"
    class: "crochet-divider"
    children: [];
}

command section: X {
  html
    box: "section"
    class: "crochet-section"
    children: [X to-html];
}

command menu: (Items0 is stream) {
  let Items = for X in Items {
    [
      Title -> X.Title to-html,
      Value -> X.Value,
    ]
  };

  html
    menu: Items
    class: "crochet-menu";
}