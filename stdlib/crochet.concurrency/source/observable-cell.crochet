% crochet

singleton internal-observable;
protect global internal-observable with internal;
protect type internal-observable with internal;

abstract observable-cell;

type mutable-observable-cell(
  state is cell<A>,
  stream is event-stream
) is observable-cell;

type foldable-observable-cell(
  source is observable-cell<A>,
  stream is foldable-event-stream
) is observable-cell;

type zipped-observable-cell(
  sources is list<subscriber<A>>,
  result is mutable-observable-cell<C>,
) is observable-cell;


command #observable-cell with-value: Initial do
  let State = #cell with-value: Initial;
  let Stream = #event-stream empty;
  new mutable-observable-cell(State, Stream);
end

command #observable-cell from-stream: Stream initial-value: Initial do
  let State = #cell with-value: Initial;
  new mutable-observable-cell(State, Stream)
    | read-only;
end


command #observable-cell collect-stream: Stream0 initial-value: (Initial is list) do
  #observable-cell from-stream: Stream0 initial-value: Initial
    | fold-from: Initial with: { S, X in S push: (S state append: X) };
end

command #observable-cell collect-stream: Stream =
  #observable-cell collect-stream: Stream initial-value: [];


command observable-cell fold-from: (Initial is B) with: (Combine is ((B, A) -> B)) -> observable-cell<B> do
  new foldable-observable-cell(
    self,
    self stream fold-from: Initial with: Combine
  );
end

command observable-cell fold-with: (Combine is ((B, B) -> B)) -> observable-cell<B> do
  self fold-from: self value with: Combine;
end

command observable-cell read-only =
  self fold-from: self value with: { S, X in S push: X };

command observable-cell map: (F is (A -> B)) =
  self fold-from: F(self value) with: { S, X in S push: F(X) };

command observable-cell keep-if: (F is (A -> boolean)) initial-value: Initial
requires
  acceptable-initial :: F(Initial)
do
  let Value = condition
                when F(self value) => self value;
                otherwise => Initial;
              end;
  self fold-from: Value with: { S, X in
    condition
      when F(X) => S push: X;
      otherwise => S skip;
    end
  };
end


command mutable-observable-cell stream =
  self.stream listener;

command mutable-observable-cell value =
  self.state value;

command mutable-observable-cell <- Value do
  self.state <- Value;
  self.stream publish: Value;
end


command foldable-observable-cell stream =
  self.stream listener;

command foldable-observable-cell value =
  self.stream.state value;


command #observable-cell zip: (Cells is record<observable-cell>) with: (F is (list -> A)) do
  let Cell-map = #map from: Cells;
  let Initial-value = F((Cell-map map: { X in X value value }) as record);

  let Result = #observable-cell with-value: Initial-value;

  let Subs = Cell-map map: { Cell in
    Cell value stream subscribe: { Value in
      let Values = Cell-map map: { X in X value value } | at: Cell key put: Value;
      Result <- F(Values as record);
    };
  };

  new zipped-observable-cell(Subs values, Result);
test
  let R = #cell with-value: [];
  let A = #observable-cell with-value: 1;
  let B = #observable-cell with-value: 2;
  let C = #observable-cell with-value: 3;
  let X = #observable-cell zip: [a -> A, b -> B, c -> C] with: { V in V };
  R <- [X value];
  X stream subscribe: { V in R <- R value append: V };
  A <- 2;
  B <- 3;
  C <- 4;
  assert X value =:= [a -> 2, b -> 3, c -> 4];
  assert R value =:= [
    [a -> 1, b -> 2, c -> 3],
    [a -> 2, b -> 2, c -> 3],
    [a -> 2, b -> 3, c -> 3],
    [a -> 2, b -> 3, c -> 4],
  ];
end

command observable-cell zip: (That is observable-cell) with: (F is ((A, B) -> C)) do
  #observable-cell zip: [a -> self, b -> That] with: { X in F(X.a, X.b) };
end

command observable-cell zip: (A is observable-cell) and: (B is observable-cell) with: (F is ((A, B, C) -> D)) do
  #observable-cell zip: [a -> self, b -> A, c -> B] with: { X in F(X.a, X.b, X.c) };
end

command zipped-observable-cell stream =
  self.result stream;

command zipped-observable-cell value =
  self.result value;


command observable-cell changes-by: (F is ((A, B) -> boolean)) do
  self stream fold-from: self value with: { State, Value in
    condition
      when not F(State state, Value) => State push: Value;
      otherwise => State skip;
    end
  };
end

command observable-cell changes do
  self changes-by: { A, B in A =:= B };
end