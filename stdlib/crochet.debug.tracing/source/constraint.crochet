% crochet

open crochet.debug;

command internal compile: (C is tc-has-tag) =
  foreign trace.tc-has-tag(C.tag);

command internal compile: (C is tc-has-span) =
  foreign trace.tc-has-span(debug-internal unwrap-to-native-span: C.span);

command internal compile: (C is tc-or) =
  foreign trace.tc-or(internal compile: C.left, internal compile: C.right);

command internal compile: (C is tc-and) =
  foreign trace.tc-and(internal compile: C.left, internal compile: C.right);

command internal compile: (C is tc-instantiate) =
  foreign trace.tc-instantiate(C.static-type);

command internal compile: (C is tc-invoke) =
  foreign trace.tc-invoke(C.name);

command internal compile: (C is tc-invoke-return) =
  foreign trace.tc-invoke-return(C.name);

command internal compile: tc-lambda-apply =
  foreign trace.tc-lambda-apply();

command internal compile: tc-lambda-return =
  foreign trace.tc-lambda-return();

command internal compile: tc-thunk-force =
  foreign trace.tc-thunk-force();

command internal compile: tc-thunk-return =
  foreign trace.tc-thunk-return();


command #trace-constraint has-tag: Tag =
  new tc-has-tag(Tag);

command #trace-constraint has-span: (Span is span) =
  new tc-has-span(Span);

command #trace-constraint instantiated: (Type is static-type) =
  new tc-instantiate(Type);

command #trace-constraint command-invoked: (Name is static-text) =
  new tc-invoke(Name);

command #trace-constraint command-returned: (Name is static-text) =
  new tc-invoke-return(Name);

command #trace-constraint command: (Name is static-text) =
  (#trace-constraint command-invoked: Name) or
  (#trace-constraint command-returned: Name);

command #trace-constraint lambda-applied =
  tc-lambda-apply;

command #trace-constraint lambda-returned =
  tc-lambda-return;

command #trace-constraint lambda =
  tc-lambda-apply or tc-lambda-return;

command #trace-constraint thunk-forced =
  tc-thunk-force;

command #trace-constraint thunk-returned =
  tc-thunk-return;

command #trace-constraint thunk =
  tc-thunk-force or tc-thunk-return;

command trace-constraint or (That is trace-constraint) =
  new tc-or(self, That);

command trace-constraint and (That is trace-constraint) =
  new tc-and(self, That);