% crochet

command trace-slice timeline: (Name is text) =
  new trace-timeline(Name, self);

command trace-slice timeline =
  self timeline: "Timeline";


command trace-slice is-empty =
  self.events is-empty;


implement foldable-collection for trace-slice;

command trace-slice fold-from: Initial with: Combine =
  self.events fold-from: Initial with: Combine;

command trace-slice fold-right-from: Initial with: Combine =
  self.events fold-right-from: Initial with: Combine;


implement filterable-collection for trace-slice;

command trace-slice keep-if: Predicate =
  new trace-slice(self.events keep-if: Predicate);


implement mappable-collection for trace-slice;

command trace-slice map: Transformation =
  new trace-slice(self.events map: Transformation);


command trace-slice correlate-returns do
  let Seen = #cell with-value: #map empty;
  new trace-slice(
    self.events
      | flat-map: (internal correlate: _ seen: Seen)
      | map: (internal reify-correlation: _ seen: Seen)
  );
end


command internal correlate: (Event is trace-event) seen: _ do
  [Event];
end

command internal correlate: (Event is te-invoked) seen: Seen do
  Seen <- Seen value at: Event put: nothing;
  [Event];
end

command internal correlate: (Event is te-apply) seen: Seen do
  Seen <- Seen value at: Event put: nothing;
  [Event];
end

command internal correlate: (Event is te-forced) seen: Seen do
  Seen <- Seen value at: Event put: nothing;
  [Event];
end


command internal correlate: (Event is te-returned) seen: Seen do
  let Invocation = internal find-invocation: Event location in: Seen value keys;
  condition
    when Invocation is nothing => [Event];
    otherwise do
      Seen <- Seen value at: Invocation put: Event;
      [];
    end
  end
end


command internal reify-correlation: (Event is te-invoked) seen: Seen do
  let Return = Seen value at: Event;
  condition
    when Return is nothing => Event;
    otherwise => new te-command(Event, Return);
  end
end

command internal reify-correlation: (Event is te-apply) seen: Seen do
  let Return = Seen value at: Event;
  condition
    when Return is nothing => Event;
    otherwise => new te-lambda(Event, Return);
  end
end

command internal reify-correlation: (Event is te-forced) seen: Seen do
  let Return = Seen value at: Event;
  condition
    when Return is nothing => Event;
    otherwise => new te-thunk(Event, Return);
  end
end

command internal reify-correlation: (Event is trace-event) seen: _ do
  Event;
end


command internal find-invocation: Location in: Invocations do
  let Invocation = Invocations find-first: { X in
    (Location has-same-activation: (internal event-activation: X)) =:= true;
  };

  Invocation value-or-default: nothing;
end

command internal event-activation: (E is te-invoked) = E.activation;
command internal event-activation: (E is te-apply) = E.activation;
command internal event-activation: (E is te-forced) = E.activation;