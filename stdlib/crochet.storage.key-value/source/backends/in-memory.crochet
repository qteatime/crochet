% crochet

/// Provides a storage backend that lives entirely in memory.
/// 
/// This works much like a mutable map that's globally accessible in the
/// application, but still stores values at least segregated by packages.
///
/// As an in-memory storage, this backend is transient, and values stored
/// will be gone once the handler goes out of scope, which may happen before
/// the application closes depending on what code the handler applies to.
///
/// Performance-wise, this backend provides similar complexity to the
/// regular `map` type in Crochet, with amortised constant time for
/// lookup, storage, and deletion.
handler kv-in-memory-backend do
  let Storage = #cell with-value: #map empty;
with
  on kv-storage.lookup(Partition, Key) do
    let Real-key = [Partition, Key];
    condition
      when Storage value contains-key: Real-key =>
        continue with (#result ok: (Storage value at: Real-key));
      otherwise =>
        continue with (#result error: kve-not-found);
    end
  end

  on kv-storage.store(Partition, Key, Value) do
    Storage <- Storage value at: [Partition, Key] put: Value;
    continue with #result ok: nothing;
  end

  on kv-storage.delete(Partition, Key) do
    Storage <- Storage value remove-at: [Partition, Key];
    continue with #result ok: nothing;
  end

  on kv-storage.count(Partition) do
    let Count = Storage value keys
                  | keep-if: { X in X first =:= Partition }
                  | count;
    continue with #result ok: Count;
  end
end

protect handler kv-in-memory-backend with key-value-backend;