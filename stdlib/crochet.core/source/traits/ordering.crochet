% crochet

/// True if [X] is less than or equal to [Y].
command (X has total-ordering) <= (Y has total-ordering) =
  (X === Y) or (X < Y)
test
  assert 1 <= 1;
  assert 1 <= 2;
end

/// True if [X] is greater than or equal to [Y].
command (X has total-ordering) >= (Y has total-ordering) =
  (X === Y) or (X > Y)
test
  assert 1 >= 1;
  assert 2 >= 1;
end

/// Returns the bigger value of the pair [X] and [Y].
command greater-of: (X has total-ordering) and: (Y has total-ordering) =
  condition
    when X >= Y => X;
    always => Y;
  end
test
  assert (greater-of: 1 and: 2) =:= 2;
  assert (greater-of: 5 and: 2) =:= 5;
  assert (greater-of: 0 and: 0) =:= 0;
  assert (greater-of: 1 and: -1) =:= 1;
end

/// Returns the smaller value of the pair [X] and [Y].
command lesser-of: (X has total-ordering) and: (Y has total-ordering) =
  condition
    when X <= Y => X;
    always => Y;
  end
test
  assert (lesser-of: 1 and: 2) =:= 1;
  assert (lesser-of: 5 and: 2) =:= 2;
  assert (lesser-of: 0 and: 0) =:= 0;
  assert (lesser-of: 1 and: -1) =:= -1;
end

/// Compares two values and returns the ordering relationship
/// between [X] and [Y], from [X]'s point of view.
command (X has total-ordering) compare-to: (Y has total-ordering) do
  condition
    when X === Y => equal;
    when X < Y   => less-than;
    when X > Y   => greater-than;
  end
test
  assert (1 compare-to: 1) =:= equal;
  assert (-1 compare-to: 0) =:= less-than;
  assert (1 compare-to: 0) =:= greater-than;
end

/// Returns [X] restricted to the range between [Min] and [Max].
/// That is, if [X] is outside of the range, will return [Min]
/// or [Max].
command (X has total-ordering) clamp-between: (Min has total-ordering) and: (Max has total-ordering) do
  condition
    when X < Min => Min;
    when X > Max => Max;
    always => X;
  end
test
  assert (-1 clamp-between: 0 and: 2) =:= 0;
  assert (0 clamp-between: 0 and: 2) =:= 0;
  assert (1 clamp-between: 0 and: 2) =:= 1;
  assert (2 clamp-between: 0 and: 2) =:= 2;
  assert (3 clamp-between: 0 and: 2) =:= 2;
end
