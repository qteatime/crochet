% crochet

// Equality
//
// Implement `_ === _`, get `_ =/= _` for free.

command Left =/= Right = not (Left === Right);

// # Numbers


// # Boolean
command boolean === (That is boolean)
  = self =:= That
test
  assert true === true;
  assert false === false;
  assert not (true === false);
end

// # Enum
local enum test-enum = ta, tb;

command 'enum === (That is 'enum)
  = self =:= That
test
  assert ta === ta;
  assert not (ta === tb);
end

// # Text
command text === (That is text) = self =:= That;

// # Tuple
command tuple === (That is tuple) do
  condition
    when self count =/= That count => false;
    always =>
      self zip: That with: (_ === _) | all-true;
  end
end

// # Record
command record === (That is record) do
  self =:= That; // FIXME: implement this properly
end

// # Result
command result === result = false;
command ok === (That is ok) = self value === That value;
command error === (That is error) = self reason === That reason;

test "result === result" do
  assert (#result ok: 1) === (#result ok: 1);
  assert (#result error: 1) === (#result error: 1);
  assert not ((#result ok: 1) === (#result error: 1));
  assert not ((#result error: 1) === (#result ok: 1));
end