% crochet

// Equality
//
// Implement `_ === _`, get `_ =/= _` for free.

command Left =/= Right = not (Left === Right);

// # Numbers
command integer === (That is integer)
  = self =:= That
test
  assert 0 === 0;
  assert 1 === 1;
  assert not (1 === -1);
end

command float === (That is float)
  = self =:= That
test
  assert 0.0 === 0.0;
  assert 0.1 === 0.1;
  assert not (0.1 === 0.0);
  assert not (1.0 === -1.0);

  assert #float positive-infinity === #float positive-infinity;
  assert not (#float positive-infinity === #float negative-infinity);
  assert not (#float nan === #float nan);
  assert not (0.0 === #float nan);
end

command (X is integer) === (Y is float) = (#float coerce: X) === Y;
command (X is integer) =/= (Y is float) = (#float coerce: X) =/= Y;
command (X is float) === (Y is integer) = X === (#float coerce: Y);
command (X is float) =/= (Y is integer) = X =/= (#float coerce: Y);

test "Numeric equality tower" do
  assert (1.0 === 1);
  assert (1.1 =/= 1);
  assert (1 === 1.0);
  assert (1 =/= 1.1);
end

// # Boolean
command boolean === (That is boolean)
  = self =:= That
test
  assert true === true;
  assert false === false;
  assert not (true === false);
end

// # Enum
local enum test-enum = ta, tb;

command 'enum === (That is 'enum)
  = self =:= That
test
  assert ta === ta;
  assert not (ta === tb);
end

// TODO: Add equality to streams and records without exposing reflection