% crochet

// Implementation is automatically generated
implement enumeration for 'enum;

local enum test-enum = ta, tb, tc;


/// Range of enums (inclusive on both ends)
command (From0 is 'enum) to: (To0 is 'enum)
requires ordered :: From0 <= To0
do
  // FIXME: ideally we wouldn't depend on integers here
  let From = From0 to-enum-integer;
  let To = To0 to-enum-integer;
  for I in From to: To do From0 from-enum-integer: I end
test
  assert (#test-enum ta to: #test-enum tc) =:= [#test-enum ta, #test-enum tb, #test-enum tc];
  assert (#test-enum tb to: #test-enum tc) =:= [#test-enum tb, #test-enum tc];
  assert (#test-enum tc to: #test-enum tc) =:= [#test-enum tc];
end

/// Range of enums, only inclusive on the starting end
command (From0 is 'enum) until: (To0 is 'enum)
requires ordered :: From0 <= To0
do
  // FIXME: ideally we wouldn't depend on integers here
  let From = From0 to-enum-integer;
  let To = To0 to-enum-integer;
  for I in From until: To do From0 from-enum-integer: I end
test
  assert (#test-enum ta to: #test-enum tc) =:= [#test-enum ta, #test-enum tb, #test-enum tc];
  assert (#test-enum tb to: #test-enum tc) =:= [#test-enum tb, #test-enum tc];
  assert (#test-enum tc to: #test-enum tc) =:= [#test-enum tc];
end

/// Successor of the current enum
command 'enum successor
requires not-last :: self to-enum-integer < self upper-bound to-enum-integer
do
  self from-enum-integer: (self to-enum-integer + 1);
test
  assert #test-enum ta successor =:= #test-enum tb;
  assert #test-enum tb successor =:= #test-enum tc;
end

/// Predecessor of the current enum
command 'enum predecessor
requires not-first :: self to-enum-integer > 1
do
  self from-enum-integer: (self to-enum-integer - 1);
test
  assert #test-enum tb predecessor =:= #test-enum ta;
  assert #test-enum tc predecessor =:= #test-enum tb;
end