% crochet

implement total-ordering for 'enum;

local enum test-enum = ta, tb, tc;

/// True if `self` is strictly lower than `Other`.
///
/// Enums are ordered by their declaration order, so this
/// means that `self` must come before `Other` in the enum
/// declaration.
command 'enum < (Other is 'enum) =
  self to-enum-integer < Other to-enum-integer
test
  assert #test-enum ta < #test-enum tb;
  assert #test-enum tb < #test-enum tc;
  assert not (#test-enum tc < #test-enum ta);
end

/// True if `self` is strictly higher than `Other`.
///
/// Enums are ordered by their declaration order, so this
/// means that `self` must come after `Other` in the enum
/// declaration.
command 'enum > (Other is 'enum) =
  self to-enum-integer > Other to-enum-integer
test
  assert #test-enum tb > #test-enum ta;
  assert #test-enum tc > #test-enum tb;
  assert not (#test-enum ta > #test-enum tc);
end