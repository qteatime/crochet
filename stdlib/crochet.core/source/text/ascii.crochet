% crochet

// Manipulating text as ASCII is usually enough for a lot of use cases.
type ascii-view(text is text);

command text ascii 
requires ascii-text :: self is-ascii
  = new ascii-view(self)
test
  "abc" ascii;
end

command text is-ascii
  = foreign text.is-ascii(self)
test
  assert "abc" is-ascii;
  assert not "Ã¡" is-ascii;
  assert not "ğŸŒ·" is-ascii;
end

command ascii-view to-lower-case
  = new ascii-view(foreign text.to-lower(self.text))
test
  assert "" ascii to-lower-case to-text =:= "";
  assert "abc" ascii to-lower-case to-text =:= "abc";
  assert "ABC" ascii to-lower-case to-text =:= "abc";
  assert "AbC" ascii to-lower-case to-text =:= "abc";
end

command ascii-view to-upper-case
  = new ascii-view(foreign text.to-upper(self.text))
test
  assert "" ascii to-upper-case to-text =:= "";
  assert "abc" ascii to-upper-case to-text =:= "ABC";
  assert "ABC" ascii to-upper-case to-text =:= "ABC";
  assert "AbC" ascii to-upper-case to-text =:= "ABC";
end

command ascii-view pad-start: (Count is integer) character: (Char is ascii-view)
requires non-zero :: Count >= 0
  = new ascii-view(foreign text.pad-start(self.text, Count, Char.text))
test
  assert ("1" ascii | pad-start: 0 character: "0" ascii | to-text) =:= "1";
  assert ("1" ascii | pad-start: 1 character: "0" ascii | to-text) =:= "1";
  assert ("1" ascii | pad-start: 3 character: "0" ascii | to-text) =:= "001";
end

command ascii-view pad-end: (Count is integer) character: (Char is ascii-view)
requires non-zero :: Count >= 0
  = new ascii-view(foreign text.pad-end(self.text, Count, Char.text))
test
  assert ("1" ascii | pad-end: 0 character: "0" ascii | to-text) =:= "1";
  assert ("1" ascii | pad-end: 1 character: "0" ascii | to-text) =:= "1";
  assert ("1" ascii | pad-end: 3 character: "0" ascii | to-text) =:= "100";
end

command ascii-view pad-start: Count = self pad-start: Count character: "0" ascii;
command ascii-view pad-end: Count = self pad-end: Count character: "0" ascii;

command ascii-view to-text
  = self.text;
