% crochet

command text ends-with: (Text is text)
requires
  non-empty :: not (Text is-empty)
do
  foreign text.ends-with(self, Text)
test
  assert "abc" ends-with: "c";
  assert not ("" ends-with: "c");
  assert "hello" ends-with: "llo";
  assert not ("hello" ends-with: "he");
end

command text starts-with: (Text is text)
requires
  non-empty :: not (Text is-empty)
do
  foreign text.starts-with(self, Text)
test
  assert "abc" starts-with: "a";
  assert not ("" starts-with: "c");
  assert "hello" starts-with: "he";
  assert not ("hello" starts-with: "llo");
end

command text contains: (Text is text)
requires
  non-empty :: not (Text is-empty)
do
  foreign text.contains(self, Text)
test
  assert not ("" contains: "a");
  assert "hello" contains: "he";
  assert "hello" contains: "ell";
  assert "hello" contains: "lo";
  assert not ("hello" contains: "oll");
end


command text trim-start
  = foreign text.trim-start(self)
test
  assert "" trim-start =:= "";
  assert "abc" trim-start =:= "abc";
  assert "  \t\n\r abc" trim-start =:= "abc";
  assert "  abc  " trim-start =:= "abc  ";
end

command text trim-end
  = foreign text.trim-end(self)
test
  assert "" trim-end =:= "";
  assert "abc" trim-end =:= "abc";
  assert "abc  \t\n\r" trim-end =:= "abc";
  assert "  abc  " trim-end =:= "  abc";
end

command text trim
  = foreign text.trim(self)
test
  assert "" trim =:= "";
  assert "abc" trim =:= "abc";
  assert "  \t\n\r abc" trim =:= "abc";
  assert "abc  \t\n\r" trim =:= "abc";
  assert "  abc  " trim =:= "abc";
end

/// Repeats a piece of text N times
command text repeat: (N is integer)
requires positive-non-zero :: N >= 0
  = foreign text.repeat(self, N)
test
  assert ("" repeat: 1) =:= "";
  assert ("a" repeat: 1) =:= "a";
  assert ("a" repeat: 5) =:= "aaaaa";
end

/// True if a piece of text is empty
command text is-empty =
  self =:= ""
test
  assert "" is-empty;
  assert not ("abc" is-empty);
  assert not ("â€‹" is-empty); // zero-width space (u200B)
end

/// Joins a set of texts
command #text join: (Parts is list) with: (Separator is text) do
  condition
    when Parts is-empty => "" as interpolation;
    when Parts count =:= 1 => Parts as interpolation;
    always => Parts fold-with: { A, B in "[A][Separator][B]" };
  end
test
  assert (#text join: ["a", "b", "c"] with: ", " | flatten-into-plain-text)
    === "a, b, c";

  assert (#text join: [] with: ", " | flatten-into-plain-text)
    === "";

  assert (#text join: ["a"] with: ", " | flatten-into-plain-text)
    === "a";
end