% crochet

command skeleton-node name = self.name;
command skeleton-node children = self.children;
command skeleton-node attributes = self.attributes;
command skeleton-node meta = self.meta;

command skeleton-literal value = self.value;
command skeleton-literal meta = self.meta;

command skeleton-name name = self.name;
command skeleton-name meta = self.meta;

command skeleton-dynamic expression = self.expression;
command skeleton-dynamic meta = self.meta;

command skeleton-list children = self.children;
command skeleton-list meta = self.meta;

command skeleton-interpolation parts = self.parts;
command skeleton-interpolation meta = self.meta;


command debug-representation of: (X is skeleton-node) =
  debug-representation type: "skeleton-node"
    | field: "name" value: X name
    | field: "children" value: X children
    | field: "attributes" value: X attributes
    | finish;

command debug-representation of: (X is skeleton-literal) =
  debug-representation type: "skeleton-literal"
    | value: X value
    | finish;

command debug-representation of: (X is skeleton-name) =
  debug-representation type: "skeleton-name"
    | value: X value
    | finish;

command debug-representation of: (X is skeleton-dynamic) =
  debug-representation type: "skeleton-dynamic"
    | value: X thunk
    | finish;

command debug-representation of: (X is skeleton-list) =
  debug-representation type: "skeleton-list"
    | value: X children
    | finish;

command debug-representation of: (X is skeleton-interpolation) =
  debug-representation type: "skeleton-interpolation"
    | value: X parts
    | finish;


command skeleton-ast position-message do
  let Meta = self meta;
  condition
    when Meta is nothing => "(unknown position)";
    always => "line [Meta.line to-text], column [Meta.column to-text]";
  end
end
