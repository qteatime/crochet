% crochet

// -- Lists
implement modifiable-container for list;

/// Adds an element to the end of the list.
command list add: Value =
  self append: Value
test
  assert ([] add: 1) =:= [1];
  assert ([1] add: 2) =:= [1, 2];
  assert ([1, 2, 3] add: 4) =:= [1, 2, 3, 4];
end

/// Removes all elements intrisically equal to the provided one.
command list remove: Value =
  self remove-if: { A in A =:= Value }
test
  assert ([] remove: 1) =:= [];
  assert ([1] remove: 1) =:= [];
  assert ([1, 2, 1, 3, 4, 1] remove: 1) =:= [2, 3, 4];
end

// -- Sets
implement modifiable-container for set;

/// Adds a new element to the set.
command set add: Value do
  new set(foreign set.add(self.box, Value));
test
  assert (#set from: [] | add: 1) === (#set from: [1]);
  assert (#set from: [1, 2, 3] | add: 4) === (#set from: [1, 2, 3, 4]);
  assert (#set from: ["a", "b"] | add: "b") === (#set from: ["a", "b"]);
end

/// Removes an element from the set.
command set remove: Value do
  new set(foreign set.remove(self.box, Value));
test
  assert (#set from: [] | remove: 1) === (#set from: []);
  assert (#set from: [1, 2, 3] | remove: 2) === (#set from: [1, 3]);
  assert (#set from: [1, 2, 3] | remove: 4) === (#set from: [1, 2, 3]);
  assert (#set from: ["a", "b"] | remove: "b") === (#set from: ["a"]);
end