% crochet

/// Retrieves the element at the [Index] in the list.
command (X is list) at: (Index is integer)
requires within-bounds :: (Index >= 1) and (Index <= X count)
  = foreign list.at(X, Index)
test
  assert (["a", "b", "c"] at: 1) =:= "a";
  assert (["a", "b", "c"] at: 2) =:= "b";
  assert (["a", "b", "c"] at: 3) =:= "c";
end

/// Updates the element at the given index with the provided value.
command (X is list) at: (Index is integer) put: Value
requires within-bounds :: (Index >= 1) and (Index <= X count)
  = foreign list.at-put(X, Index, Value)
test
  assert (["a", "b", "c"] at: 1 put: "d") =:= ["d", "b", "c"];
  assert (["a", "b", "c"] at: 2 put: "d") =:= ["a", "d", "c"];
  assert (["a", "b", "c"] at: 3 put: "d") =:= ["a", "b", "d"];
end

/// Removes the element at the given index, bringing the next ones one space
/// forward.
command (X is list) delete-at: (Index is integer)
requires within-bounds :: (Index >= 1) and (Index <= X count)
  = foreign list.at-delete(X, Index)
test
  assert (["a"] delete-at: 1) =:= [];
  assert (["a", "b", "c"] delete-at: 2) =:= ["a", "c"];
  assert (["a", "b", "c"] delete-at: 3) =:= ["a", "b"];
end

/// Inserts [Value] before the element at [Index].
command (X is list) before: (Index is integer) insert: Value
requires within-bounds :: (Index >= 1) and (Index <= X count)
  = foreign list.at-insert(X, Index, Value)
test
  assert (["a", "b", "c"] before: 1 insert: 0) =:= [0, "a", "b", "c"];
  assert (["a", "b", "c"] before: 2 insert: 0) =:= ["a", 0, "b", "c"];
  assert (["a", "b", "c"] before: 3 insert: 0) =:= ["a", "b", 0, "c"];
end

/// Inserts [Value] after the element at [Index].
command list after: (Index is integer) insert: Value
requires within-bounds :: (Index >= 1) and (Index <= self count)
  = foreign list.after-insert(self, Index, Value)
test
  assert (["a", "b", "c"] after: 1 insert: 0) =:= ["a", 0, "b", "c"];
  assert (["a", "b", "c"] after: 2 insert: 0) =:= ["a", "b", 0, "c"];
  assert (["a", "b", "c"] after: 3 insert: 0) =:= ["a", "b", "c", 0];
end