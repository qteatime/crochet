% crochet

/// Returns a sequence of all keys in the record. The order of the keys
/// in this sequence is unspecified.
command record keys
  = foreign record.keys(self)
test
  // Records SHOULD maintain source ordering
  assert [->] keys === [];
  assert [a -> 1] keys === ["a"];
  assert [a -> 1, b -> 2] keys === ["a", "b"];
end

/// Returns a sequence of all values in the record. The order of the values
/// in this sequence is unspecified.
command record values
  = foreign record.values(self)
test
  assert [->] values === [];
  assert [a -> 1] values === [1];
  assert [a -> 1, b -> 2] values === [1, 2];
end

/// Returns a sequence of all pairs in the record. The order of the values
/// in this sequence is unspecified.
command record pairs -> list<association<K, V>> do
  let Pairs = foreign record.pairs(self);
  Pairs map: { X in new association(X.key, X.value) };
test
  assert [->] pairs === [];
  assert [a -> 1] pairs === [
    #association key: "a" value: 1,
  ];
  assert [a -> 1, b -> 2] pairs === [
    #association key: "a" value: 1,
    #association key: "b" value: 2,
  ];
end

/// Constructs a new record from a sequence of pairs.
command #record from-pairs: (Pairs0 is list<association<K, V>>) do
  let Pairs = Pairs0 map: { X in [key -> X key, value -> X value] };
  foreign record.from-pairs(Pairs)
test
  assert (#record from-pairs: []) === [->];
  assert (#record from-pairs: [#association key: "a" value: 1]) === [a -> 1];
    assert (#record from-pairs: [
              #association key: "a" value: 1,
              #association key: "b" value: 2,
            ]) === [a -> 1, b -> 2];
end

/// Returns a record that only contains the provided keys.
command record with-only-keys: (Keys has container) do
  self keep-if: { P in Keys contains: P key };
test
  assert ([->] with-only-keys: ["a", "b"]) === [->];
  assert ([a -> 1] with-only-keys: ["a", "b"]) === [a -> 1];
  assert ([a -> 1, b -> 2] with-only-keys: ["a", "b"]) === [a -> 1, b -> 2];
  assert ([a -> 1, b -> 2, c -> 3] with-only-keys: ["a"]) === [a -> 1];
  assert ([a -> 1, b -> 2, c -> 3] with-only-keys: ["a", "b"]) === [a -> 1, b -> 2];
end

/// Returns a record that does not contain the provided keys.
command record without-keys: (Keys has container) do
  self keep-if: { P in not (Keys contains: P key) };
test
  assert ([->] without-keys: ["a", "b"]) === [->];
  assert ([a -> 1] without-keys: ["a", "b"]) === [->];
  assert ([a -> 1, b -> 2] without-keys: ["a", "b"]) === [->];
  assert ([a -> 1, b -> 2, c -> 3] without-keys: ["a"]) === [b -> 2, c -> 3];
  assert ([a -> 1, b -> 2, c -> 3] without-keys: ["a", "b"]) === [c -> 3];
end