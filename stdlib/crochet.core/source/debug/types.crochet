% crochet

// -- Module

/// Allows defining (rich) ways of representing Crochet values
/// according to a particular perspective.
///
/// You can define a debug representation for any type by providing
/// a new [command:_ for: _ perspective: _] branch. A perspective
/// has to be a nullary type extending [type:perspective] and
/// implementing the [trait:debug-perspective] trait.
singleton debug-representation;

/// Used for serialisation. No powers are granted for external modules.
type debug-serialisation;

// -- Perspectives

/// The base of all perspectives.
///
/// A perspective is a nullary type that allows selecting one of
/// the debug representations, and extending these representations,
/// without any coordination. This means that packages need not be
/// aware of other packages' perspectives and representations.
abstract perspective;

/// The default perspective. Whenever one isn't specified, this will
/// be used to represent the value. Generally the "most commonly useful"
/// view of it.
type default-perspective is perspective;
define default-perspective = new default-perspective;

/// Shows the "source code" representation of a value.
type source-perspective is perspective;

/// The minimal amount of commands that a perspective needs to provide
/// for all of Crochet's debugging tools to work properly.
///
/// Currently the only requirement is a [command:_ name] command, but
/// more commands may be added in the future.
trait debug-perspective with
  /// Returns a human-readable description of the perspective. Used in
  /// debugging tools to show the available ways they can inspect the
  /// data.
  command Perspective name -> text;
end


// -- Numeric values
/// The base type of all numeric units used by documents.
abstract doc-unit;

/// No unit value
singleton doc-unit-unset is doc-unit;

/// Value in pixels.
type doc-pixels(value is integer) is doc-unit;

/// Value in percentage (context-dependent).
type doc-percent(value is float) is doc-unit;

/// Value in em units.
type doc-em(value is float) is doc-unit;

/// A 2d point of doc units.
type doc-point2d(x is doc-unit, y is doc-unit);

/// A dimension of doc units.
type doc-dimension(width is doc-unit, height is doc-unit);

/// The trait of everything that can be made into a doc-unit implicitly
trait to-doc-unit with
  command Type as doc-unit -> doc-unit;
end

/// The base type of all colours used by documents.
abstract doc-colour;

/// No colour value
singleton doc-colour-inherit is doc-colour;

/// RGBA colour
type doc-colour-rgba(
  red is integer,
  green is integer,
  blue is integer,
  alpha is integer,
) is doc-colour;

trait to-doc-colour with
  command Value as doc-colour;
end

/// A way of formatting and presenting shapes
type doc-presentation(
  stroke-colour is doc-colour,
  stroke-width is doc-unit,
  fill-colour is doc-colour,
);

/// Types of scroll bars
enum doc-scroll =
  doc-scroll-visible,
  doc-scroll-hidden,
  doc-scroll-if-needed;

/// Scroll-view properties
type doc-scroll-style(
  horizontally is doc-scroll,
  vertically is doc-scroll,
);

/// Font properties
enum doc-font-family =
  doc-font-family-inherit,
  doc-font-family-serif,
  doc-font-family-sans-serif,
  doc-font-family-monospace;

enum doc-font-style =
  doc-font-italic,
  doc-font-normal,
  doc-font-style-inherit;

enum doc-font-weight =
  doc-font-lighter,
  doc-font-light,
  doc-font-regular,
  doc-font-bold,
  doc-font-bolder,
  doc-font-weight-inherit;

// TODO: turn this into a more fully-featured thing, like CSS's text decoration
enum doc-font-decoration =
  doc-font-decoration-inherit,
  doc-font-overline,
  doc-font-underline,
  doc-font-strike-through,
  doc-font-no-decoration;

type doc-font-presentation(
  family is doc-font-family,
  size is doc-unit,
  colour is doc-colour,
  style is doc-font-style,
  weight is doc-font-weight,
  decoration is doc-font-decoration,
);

trait to-doc-font-family with
  command Value as doc-font-family;
end

trait to-doc-font-style with
  command Value as doc-font-style;
end

trait to-doc-font-weight with
  command Value as doc-font-weight;
end

trait to-doc-font-decoration with
  command Value as doc-font-decoration;
end

enum doc-border-style =
  doc-border-style-none,
  doc-border-style-hidden,
  doc-border-style-dotted,
  doc-border-style-dashed,
  doc-border-style-solid;

trait to-doc-border-style with
  command Value as doc-border-style;
end

type doc-border(
  width is doc-unit,
  colour is doc-colour,
  style is doc-border-style
);

type doc-borders(
  top is doc-border,
  right is doc-border,
  bottom is doc-border,
  left is doc-border,
);

type doc-background(
  colour is doc-colour
);

type doc-padding(
  top is doc-unit,
  right is doc-unit,
  bottom is doc-unit,
  left is doc-unit,
);

type doc-margin(
  top is doc-unit,
  right is doc-unit,
  bottom is doc-unit,
  left is doc-unit,
);


// -- Document language

/// The root of the document language.
abstract document;

/// The empty document
singleton doc-empty is document;

/// A numeric value.
type doc-number(value is numeric) is document;

/// A piece of Crochet text.
type doc-text(value is unsafe-arbitrary-text) is document;

/// A boolean.
type doc-boolean(value is boolean) is document;

/// A piece of text with no semantics.
type doc-plain-text(value is text) is document;

/// A piece of text that's guaranteed to be rendered in monospaced font.
type doc-code(value is text) is document;

/// A list of values.
type doc-list(items is list<document>) is document;

/// A table of values.
type doc-table(header is list<document>, rows is list<doc-table-row>) is document;

/// A row in a table.
type doc-table-row(cells is list<document>) is document;

/// Lays its items with flow layouting.
type doc-flow(items is list<document>) is document;

/// Lays its items with a flex row.
type doc-flex-row(items is list<document>, gap is doc-unit) is document;

/// Lays its items with a flex column.
type doc-flex-column(items is list<document>, gap is doc-unit) is document;

/// Lays its items with fixed layout (the items need to be positioned)
type doc-fixed-layout(items is list<document>, width is doc-unit, height is doc-unit) is document;

/// Positions the item inside of a fixed layout container
type doc-position(content is document, position is doc-point2d) is document;

/// Marks a document as belonging to a specific type
type doc-typed(content is document, crochet-type is static-type) is document;

/// Allows the renderer to choose between a compact and expanded representation
/// depending on its rendering context, amount of space available, etc.
type doc-group(compact is document, expanded is document) is document;

/// A circle shape
type doc-circle(center is doc-point2d, radius is doc-unit, presentation is doc-presentation) is document;

/// A rectangle shape
type doc-rectangle(origin is doc-point2d, size is doc-dimension, roundness is doc-point2d, presentation is doc-presentation) is document;

/// An ellipse shape
type doc-ellipse(center is doc-point2d, radius is doc-point2d, presentation is doc-presentation) is document;

/// A line shape
type doc-line(from is doc-point2d, to is doc-point2d, presentation is doc-presentation) is document;

/// A polygon shape
type doc-polygon(points is list<doc-point2d>, presentation is doc-presentation) is document;

/// A poly-line shape
type doc-polyline(points is list<doc-point2d>, presentation is doc-presentation) is document;

/// A container with bounded dimensions that allows scrolling
type doc-scroll-view(content is document, bounds is doc-dimension, scroll is doc-scroll-style) is document;

/// A document that formats text within it differently
type doc-format-text(content is document, formatting is doc-font-presentation) is document;

/// A document that provides HTML box-style semantics
type doc-box(
  content is document, 
  borders is doc-borders, 
  background is doc-background,
  padding is doc-padding,
  margin is doc-margin,
) is document;

/// A document that provides a timeline
type doc-timeline(frames is list<document>) is document;