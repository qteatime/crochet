% crochet

/// Constructs a [cell] with the given value.
command #cell with-value: V -> cell
  = foreign cell.make(V)
test
  assert (#cell with-value: 1) is cell;
end


/// Constructs a [cell] with [nothing] inside.
command #cell empty -> cell
  = #cell with-value: nothing
test
  assert (#cell empty) is cell;
end


/// Retrieves the value of a [cell].
command (X is cell) value = foreign cell.deref(X)
test
  let C = #cell with-value: 1;
  assert C value =:= 1;  
end


/// Updates the value of a [cell], but only if its current value matches
/// the provided [Old] value. The comparison and update are performed
/// atomically.
command (X is cell) compare: Old and-set: New -> boolean
  = foreign cell.cas(X, Old, New)
test
  let C = #cell with-value: 1;
  assert not (C compare: 2 and-set: 3);
  assert C value =:= 1;
  assert (C compare: 1 and-set: 4);
  assert C value =:= 4;
end


/// Updates the value of a [cell] to [Value] unconditionally, but atomically.
///
/// This function is basically [cell compare: _ and-set: _] with a spin-loop.
command (X is cell) <- Value -> cell do
  let Old = X value;
  let Set = X compare: Old and-set: Value;
  condition
    when Set => X;
    always => X <- Value;
  end
test
  let C = #cell with-value: 1;
  assert (C <- 2) value =:= 2;
end
