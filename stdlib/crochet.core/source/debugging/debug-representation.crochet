% crochet

// Documents are roughly based on Leijen's pretty printer (https://hackage.haskell.org/package/wl-pprint)
// Copyright 2000, Daan Leijen. All rights reserved.


local enum colour = black, red, green, yellow, blue, magenta, cyan, white;

local abstract formatting;
local singleton f-bold is formatting;
local type f-colour(colour is colour) is formatting;

command black render = "0";
command red render = "1";
command green render = "2";
command yellow render = "3";
command blue render = "4";
command magenta render = "5";
command cyan render = "6";
command white render = "7";


command formatting render-start = #doc empty;
command formatting render-stop = #doc empty;

command f-bold render-start = new doc-text(0, "\x1b\[1m");
command f-bold render-stop = new doc-text(0, "\x1b\[22m");

command f-colour render-start =
  new doc-text(0, "\x1b\[3[self.colour render]m" flatten-into-plain-text);

command f-colour render-stop =
  new doc-text(0, "\x1b\[39m");


local abstract doc;
local type doc-text(size is integer, text is text) is doc;
local type doc-join(left is doc, right is doc) is doc;
local type doc-nest(indent is integer, doc is doc) is doc;
local type doc-dynamic(block is function-2) is doc;
local type doc-format(formatting is formatting, doc is doc) is doc;
local singleton doc-break is doc;
local singleton doc-empty is doc;

local abstract doc-like;


command #doc empty = doc-empty;

command #doc text: (X is text) = new doc-text(dbg size: X, X);
command #doc flow: (Xs is list) = Xs fold-with: (_ ++ _);

command doc text: X =
  new doc-join(self, #doc text: X);

command doc bold =
  new doc-format(f-bold, self);

command doc colour: (Colour is colour) =
  new doc-format(new f-colour(Colour), self);

command doc between: (Left is doc) and: (Right is doc) =
  new doc-join(Left, new doc-join(self, Right));

command doc between: (Left is static-text) and: (Right is static-text) =
  self between: (#doc text: Left) and: (#doc text: Right);

command doc prepend: (X is doc) =
  new doc-join(X, self);

command doc prepend: (X is static-text) =
  self prepend: (#doc text: X);

command doc nested: (Indent is integer) =
  new doc-nest(Indent, self);

command doc aligned =
  new doc-dynamic({ Column, Indent in self nested: Column });

command doc break =
  new doc-join(self, doc-break);

command doc ++ (That is doc) =
  new doc-join(self, That);

command doc append: (That is doc) =
  self ++ That;

command doc append: (That is static-text) =
  self append: (#doc text: That);

command doc block: (Indent is integer) =
  self prepend: doc-break
    | nested: Indent
    | append: doc-break;

local abstract simple-doc;
local type sd-text(text is text, next is simple-doc);
local type sd-break(next is simple-doc);
local singleton sd-end;


type debug-printer;

local abstract debug-printer-list;
local type cons(indent is integer, doc is doc, rest is debug-printer-list) is debug-printer-list;
local singleton nil is debug-printer-list;

command debug-printer show: X =
  debug-representation of: X
    |> _ aligned
    |> _ prepend: (#doc text: (dbg type-name: X) | between: "(" and: ") ")
    |> self print: _
    |> _ flatten-into-plain-text;

command debug-printer print: (Doc is doc) =
  self print: Doc
       rest: nil column: 0 indent: 0;

command debug-printer print: (X is doc-text) rest: R column: C indent: I do
  let Rest = self print: R column: (C + X.size);
  "[X.text][Rest]"
end

command debug-printer print: (X is doc-join) rest: R column: C indent: I =
  self
    print: new cons(I, X.left, new cons(I, X.right, R))
    column: C;

command debug-printer print: (X is doc-nest) rest: R column: C indent: I =
  self
    print: X.doc
    rest: R
    column: C
    indent: (I + X.indent);

command debug-printer print: (X is doc-dynamic) rest: R column: C indent: I do
  let Doc = X.block(C, I);
  self print: Doc rest: R column: C indent: I;
end

command debug-printer print: (X is doc-format) rest: R column: C indent: I do
  let Start = X.formatting render-start;
  let End = X.formatting render-stop;
  self
    print: new cons(I, X.doc between: Start and: End, R)
    column: C;
end

command debug-printer print: (X is doc-break) rest: R column: C indent: I do
  let Rest = self print: R column: 0;
  let This = " " repeat: I;
  "\n[This][Rest]";
end

command debug-printer print: doc-empty rest: R column: C indent: I do
  self print: R column: C;
end

command debug-printer print: (X is cons) column: C =
  self print: X.doc rest: X.rest column: C indent: X.indent;

command debug-printer print: nil column: C =
  "";



local singleton dbg;
command dbg text: X = foreign debug.any-to-text(X);
command dbg type-name: X = foreign debug.type-name(X);
command dbg size: (X is text) = foreign debug.text-length(X);


command debug-representation empty =
  #doc empty;

command debug-representation text: (X is text) =
  #doc text: X;

command debug-representation keyword: (X is static-text) =
  #doc text: X | bold;

command debug-representation number: (X is numeric) =
  debug-representation text: (dbg text: X)
    | colour: cyan;

command debug-representation list: (X is list) separator: (S is doc) do
  condition
    when X is-empty => #doc empty;
    when X count === 1 => X first;
    always do
      X rest fold-from: X first with: { A, B in
        condition
          when B is doc-empty => A;
          always => A ++ S ++ B;
        end
      };
    end
  end
end

command debug-representation list: X separator: (S is static-text) =
  debug-representation list: X separator: (#doc text: S);


command debug-representation of: (X is text) =
  debug-representation text: X
    | between: "“" and: "”"
    | colour: green;

local singleton interpolation-representation;
command interpolation-representation of: (X is static-text) =
  #doc text: X;

command interpolation-representation of: (X is interpolation) =
  X parts map: (interpolation-representation of: _)
    | fold-from: (#doc empty) with: (_ ++ _);

command interpolation-representation of: X =
  debug-representation of: X
    | between: "\[" and: "\]";

command debug-representation of: (X is interpolation) =
  X parts map: (interpolation-representation of: _)
    | fold-from: (#doc empty) with: (_ ++ _)
    | between: "“" and: "”"
    | colour: green;

command debug-representation of: true =
  debug-representation keyword: "true";

command debug-representation of: false =
  debug-representation keyword: "false";

command debug-representation of: (X is numeric) =
  debug-representation number: X;

command debug-representation of: (X is unknown) =
  debug-representation keyword: "unknown"
    | between: "<" and: ">";

command debug-representation of: nothing =
  debug-representation keyword: "nothing";

command debug-representation of: (F is function) =
  debug-representation text: (dbg text: F);

command debug-representation of: (T is thunk) =
  condition
    when T is-forced =>
      debug-representation of: (force T)
        | prepend: (debug-representation keyword: "thunk ")
        | between: "<" and: ">";
    always =>
      debug-representation keyword: "thunk"
        | between: "<" and: ">";
  end;

command debug-representation of: (X is doc) =
  X;

command debug-representation of: X =
  debug-representation text: (dbg type-name: X)
    | between: "<" and: ">";

command debug-representation of: (X is list) do
  let Items = X map: (debug-representation of: _);
  debug-representation list: Items separator: (#doc text: "," | break)
    | block: 2
    | between: "\[" and: "\]";
end

command debug-representation of: (X is record) do
  condition
    when X is-empty => #doc text: "->" | between: "\[" and: "\]";
    always do
      let Pairs = X pairs map: { P in
        #doc text: P.key
          | append: " -> "
          | append: (debug-representation of: P.value)
      };
      debug-representation list: Pairs separator: (#doc text: "," | break)
        | block: 2
        | between: "\[" and: "\]";
    end
  end
end

command debug-representation of: (X is doc-like) =
  X as doc;


local type type-representation(name is text, fields is list) is doc-like;
local type type-field(name is text, value) is doc-like;
local type type-pos(value) is doc-like;

command debug-representation type: (X is static-text) =
  new type-representation(X, []);

command type-representation field: (K is text) value: V =
  new type-representation(self.name, self.fields ++ [new type-field(K, V)]);

command type-representation value: V =
  new type-representation(self.name, self.fields ++ [new type-pos(V)]);

command type-representation finish =
  self as doc;

command type-field as doc =
  #doc text: self.name
    | append: " -> "
    | append: (debug-representation of: self.value | aligned);

command type-pos as doc =
  debug-representation of: self.value | aligned;

command type-representation as doc do
  let Fields = self.fields map: (_ as doc);
  debug-representation keyword: self.name
    | append: (
        debug-representation list: Fields separator: (#doc text: "," | break)
          | between: "(" and: ")"
          | aligned
      )
end