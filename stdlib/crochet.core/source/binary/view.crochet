% crochet

type byte-array-view(view is unknown);
type mutable-byte-array-view(view is unknown) is byte-array-view;

// -- Constructors
command byte-array view =
  new byte-array-view(foreign byte.view(self));


command byte-array view-slice-from: (From is integer) to: (To is integer)
requires
  positive :: From > 0,
  growing :: To >= From
=
  new byte-array-view(foreign byte.view-slice(self, From, To));


command byte-array view-slice-from: (From is integer) 
requires
  positive :: From > 0
=
  new byte-array-view(foreign byte.view-slice-from(self, From));


command mutable-byte-array view =
  new mutable-byte-array-view(foreign byte.view(self));


command mutable-byte-array view-slice-from: (From is integer) to: (To is integer)
requires
  positive :: From > 0,
  growing :: To >= From
=
  new mutable-byte-array-view(foreign byte.view-slice(self, From, To));


command mutable-byte-array view-slice-from: (From is integer) 
requires
  positive :: From > 0
=
  new mutable-byte-array-view(foreign byte.view-slice-from(self, From));


// -- Reading
command byte-array-view boolean-at: (Offset is integer) =
  foreign byte.get-bool(self.view, Offset);

command byte-array-view integer-8bit-at: (Offset is integer) =
  foreign byte.get-int8(self.view, Offset);

command byte-array-view integer-16bit-at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.get-int16(self.view, Offset, LE);

command byte-array-view integer-32bit-at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.get-int32(self.view, Offset, LE);

command byte-array-view unsigned-integer-8bit-at: (Offset is integer) =
  foreign byte.get-int8(self.view, Offset);

command byte-array-view usigned-integer-16bit-at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.get-int16(self.view, Offset, LE);

command byte-array-view unsigned-integer-32bit-at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.get-int32(self.view, Offset, LE);

command byte-array-view float-32bit-at: (Offset is float-64bit) little-endian: (LE is boolean) =
  foreign byte.get-float32(self.view, Offset, LE);

command byte-array-view float-64bit-at: (Offset is float-64bit) little-endian: (LE is boolean) =
  foreign byte.get-float64(self.view, Offset, LE);

    

// -- Writing
command mutable-byte-array-view put-boolean: (X is boolean) at: (Offset is integer) =
  foreign byte.set-bool(self.view, Offset, X);

command mutable-byte-array-view put-integer-8bit: (X is integer) at: (Offset is integer) =
  foreign byte.set-int8(self.view, Offset, X);

command mutable-byte-array-view put-integer-16bit: (X is integer) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-int16(self.view, Offset, X, LE);

command mutable-byte-array-view put-integer-32bit: (X is integer) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-int32(self.view, Offset, X, LE);

command mutable-byte-array-view put-unsigned-integer-8bit: (X is integer) at: (Offset is integer) =
  foreign byte.set-int8(self.view, Offset, X);

command mutable-byte-array-view put-usigned-integer-16bit: (X is integer) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-int16(self.view, Offset, X, LE);

command mutable-byte-array-view put-unsigned-integer-32bit: (X is integer) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-int32(self.view, Offset, X, LE);

command mutable-byte-array-view put-float-32bit: (X is float-64bit) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-float32(self.view, Offset, X, LE);

command mutable-byte-array-view put-float-64bit: (X is float-64bit) at: (Offset is integer) little-endian: (LE is boolean) =
  foreign byte.set-float64(self.view, Offset, X, LE);
