% crochet

/// A fixed, immutable sequence of byte-size values.
///
/// Byte arrays are fast representations of binary data.
type byte-array = foreign core.byte-array;

/// A transient, mutable byte-array.
type mutable-byte-array(array is byte-array);


command #byte-array allocate: (Size is integer)
requires
  positive :: Size > 0
=
  foreign byte.allocate(Size);


command byte-array update: (F is (mutable-byte-array -> any)) do
  let Array = new mutable-byte-array(foreign byte.clone(self));
  F(Array);
  foreign byte.clone(Array.array);
end

command byte-array count-bytes =
  foreign byte.size(self);

command mutable-byte-array count-bytes =
  self.array count-bytes;


command byte-array at: (Offset is integer)
requires
  bounded :: (Offset >= 1) and (Offset <= self count-bytes)
=
  foreign byte.at(self, Offset);

command mutable-byte-array at: (Offset is integer) put: (Byte is integer)
requires
  bounded :: (Offset >= 1) and (Offset <= self count-bytes),
  byte :: (Byte >= 0) and (Byte <= 255)
do
  foreign byte.put(self.array, Offset, Byte);
  self;
end