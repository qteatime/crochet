% crochet

local abstract url-mod;

command #url-mod from-text: (Url is text) = foreign url.from-text(Url);
command #url-mod protocol: Url = foreign url.protocol(Url);
command #url-mod username: Url = foreign url.username(Url);
command #url-mod password: Url = foreign url.password(Url);
command #url-mod host: Url = foreign url.host(Url);
command #url-mod hostname: Url = foreign url.hostname(Url);
command #url-mod port: Url = foreign url.port(Url);
command #url-mod path: Url = foreign url.pathname(Url);
command #url-mod query: Url = foreign url.query(Url);
command #url-mod hash: Url = foreign url.hash(Url);
command #url-mod to-text: Url = foreign url.to-text(Url);
command #url-mod from-record: (X is record) = foreign url.from-record(X);
command #url-mod to-record: Url = foreign url.to-record(Url);


type url(data);

command #url from-text: (Text is text) =
  new url(#url-mod from-text: Text);

command #url from-record: (Record is record) =
  new url(#url-mod from-record: Record);

command url protocol = #url-mod protocol: self.data;
command url username = #url-mod username: self.data;
command url password = #url-mod password: self.data;
command url host = #url-mod host: self.data;
command url hostname = #url-mod hostname: self.data;
command url port = #url-mod port: self.data;
command url path = #url-mod path: self.data;
command url query = #url-mod query: self.data;
command url hash = #url-mod hash: self.data;
command url to-text = #url-mod to-text: self.data;
command url to-record = #url-mod to-record: self.data;