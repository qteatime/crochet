% crochet

command internal to-event: Event do
  condition
    when Event.tag === "LOG" =>
      new te-log(
        new trace-location(Event.location),
        Event.log-tag as unknown,
        Event.value as unknown
      );
    
    when Event.tag === "LOG_TEXT" =>
      new te-log-message(
        new trace-location(Event.location),
        Event.log-tag as unknown,
        Event.message
      );

    when Event.tag === "NEW" =>
      new te-instantiated(
        new trace-location(Event.location),
        Event.crochet-type,
        Event.arguments map: (_ as unknown)
      );

    when Event.tag === "INVOKE" =>
      new te-invoked(
        new trace-location(Event.location),
        new tv-activation(Event.activation),
        new tv-branch(Event.branch),
        Event.arguments map: (_ as unknown)
      );

    when Event.tag === "APPLY" =>
      new te-apply(
        new trace-location(Event.location),
        new tv-activation(Event.activation),
        Event.lambda as unknown,
        Event.arguments map: (_ as unknown)
      );

    when Event.tag === "RETURN" =>
      new te-returned(
        new trace-location(Event.location),
        Event.value as unknown
      );
  end
end



command te-instantiated static-type =
  foreign trace.make-static-type(self.crochet-type);

command te-instantiated arguments do
  let Fields = foreign trace.type-fields(self.crochet-type);
  #record from-pairs: (Fields zip: self.arguments with: (#association key: _ value: _));
end

