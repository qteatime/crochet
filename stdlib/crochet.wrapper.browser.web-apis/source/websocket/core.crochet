% crochet

open crochet.network.types;
open crochet.concurrency;

type websocket(
  channel is unknown,
  state is cell<websocket-state>,
  stream is event-stream<websocket-message>,
);

protect type websocket with use-websockets;

abstract websocket-message;
type websocket-message-received(global message is text) is websocket-message;
type websocket-message-error(global reason is websocket-error) is websocket-message;
singleton websocket-message-open is websocket-message;
singleton websocket-message-closed is websocket-message;

abstract websocket-error;
singleton websocket-error-closed is websocket-error;
singleton websocket-error-unknown is websocket-error;

enum websocket-state =
  connecting,
  'open,
  closing,
  closed;

// Opening connections
command #websocket open: (Url is url) protocols: (Protocols is list<text>) do
  let Connection = perform websocket.connect(Url, Protocols);

  Connection.events listener subscribe: { M in
    condition
      when M is websocket-message-open do
        Connection.state <- #websocket-state 'open;
      end

      when M is websocket-message-closed do
        Connection.state <- #websocket-state closed;
      end

      when M is websocket-message-error do
        Connection.state <- #websocket-state closed;
      end

      otherwise do nothing end
    end
  };

  new websocket(
    channel -> Connection.channel,
    state -> Connection.state,
    stream -> Connection.events,
  );
end

command #websocket open: Url =
  #websocket open: Url protocols: [];


command websocket connect do
  #deferred promise: { D in 
    let State = self state;
    condition
      when State is websocket-state--connecting do
        let Subscriber = self.stream listener subscribe: { Event in
          condition
            when Event is websocket-message-error do
              self.stream listener unsubscribe: Subscriber;
              D reject: Event reason;
            end

            when Event is websocket-message-closed do
              self.stream listener unsubscribe: Subscriber;
              D reject: websocket-error-closed;
            end

            when Event is websocket-message-open do
              self.stream listener unsubscribe: Subscriber;
              D resolve: self;
            end

            otherwise => nothing;
          end
        } capture;
      end

      when State is websocket-state--open => D resolve: self;
      when State is websocket-state--closing => D reject: websocket-error-closed;
      when State is websocket-state--closed => D reject: websocket-error-closed;
    end
  };
end


// Querying the socket states
command websocket state =
  self.state value;

command websocket protocol
requires
  is-open :: self state is websocket-state--open
do
  perform websocket.get-protocol(self);
end


// Operations on the socket
command websocket send: (Data is text)
requires
  is-open :: self state is websocket-state--open
do
  perform websocket.send(self, Data);
  self;
end

command websocket close do
  self.state <- #websocket-state closing;
  perform websocket.close(self);
  self;
end

command websocket listener =
  self.stream listener;

