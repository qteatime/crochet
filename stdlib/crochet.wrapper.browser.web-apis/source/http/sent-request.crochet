% crochet

open crochet.concurrency;

abstract http-request-state;

singleton http-request-state-in-flight is http-request-state;
type http-request-state-waiting(deferred is deferred) is http-request-state;
type http-request-state-ok(response is http-response) is http-request-state;
type http-request-state-failed(reason is http-error) is http-request-state;
singleton http-request-state-aborted is http-request-state;

abstract sent-http-request;

type native-sent-http-request(
  request is http-request,
  state is cell<http-request-state>,
  abort is unknown, // AbortController
  response is unknown, // Promise<Response>
) is sent-http-request;

type pure-sent-http-request(
  request is http-request,
  state is cell<http-request-state>
) is sent-http-request;


// -- Native
command native-sent-http-request state =
  self.state value;

command native-sent-http-request abort
requires
  in-flight :: (self state is http-request-state-in-flight)
                or (self state is http-request-state-waiting)
do
  foreign http.abort(self.abort);
  self.state <- http-request-state-aborted;
  self;
end

command native-sent-http-request response do
  internal get-response: self state: self state;
end

command internal get-response: (Request is native-sent-http-request) state: http-request-state-in-flight do
  let Deferred = #deferred make;
  Request.state <- new http-request-state-waiting(Deferred);
  let Result = foreign http.wait-response(Request.response);
  condition
    when Result.ok do
      let Response = new native-http-response(Result.value);
      Request.state <- new http-request-state-ok(Response);
      Deferred resolve: Response;
      #result ok: Response;
    end

    when Result.aborted do
      let Error = new http-error-aborted(Request.request);
      Request.state <- http-request-state-aborted;
      Deferred cancel;
      #result error: Error;
    end

    otherwise do
      let Error = (internal lift-http-error-reason: Result.reason request: Request.request);
      Request.state <- new http-request-state-failed(Error);
      Deferred reject: Error;
      #result error: Error;
    end
  end
end

command internal get-response: (Request is native-sent-http-request) state: (S is http-request-state-waiting) do
  S promise
    | on-resolved: { Response in #result ok: Response }
      on-rejected: { Reason in #result error: Reason }
      on-cancelled: { #result error: new http-error-aborted(Request.request) };
end

command internal get-response: (Request is native-sent-http-request) state: (S is http-request-state-ok) do
  #result ok: S.response;
end

command internal get-response: (Request is native-sent-http-request) state: (S is http-request-state-failed) do
  #result error: S.reason;
end

command internal get-response: (Request is native-sent-http-request) state: (S is http-request-state-aborted) do
  #result error: new http-error-aborted(Request.request);
end


// -- Pure
command #pure-sent-http-request for: (Request is http-request) =
  new pure-sent-http-request(
    request -> Request,
    state -> #cell with-value: http-request-state-in-flight
  );

command pure-sent-http-request state =
  self.state value;

command pure-sent-http-request abort
requires
  in-flight :: self state is http-request-state-in-flight
do
  self.state <- http-request-state-aborted;
  self;
end

command pure-sent-http-request response
requires
  not-in-flight :: not (self state is http-request-state-in-flight)
do
  condition
    when self state is http-request-state-ok =>
      #result ok: (self state).response;

    when self state is http-request-state-failed =>
      #result error: (self state).reason;

    when self state is http-request-state-aborted =>
      #result error: new http-error-aborted(self.request);
  end
end

command pure-sent-http-request response: (Response is http-response)
requires
  in-flight :: self state is http-request-state-in-flight
do
  self.state <- new http-request-state-ok(Response);
  self;
end

command pure-sent-http-request fail: (Error is http-error)
requires
  in-flight :: self state is http-request-state-in-flight,
  not-abort :: not (Error is http-error-abort)
do
  self.state <- new http-request-state-failed(Error);
  self;
end