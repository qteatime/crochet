% crochet

open crochet.network.types;

type http-request(
  url is url,
  method is http-method,
  headers is http-headers,
  cache is http-cache,
  mode is http-mode,
  credentials is http-credentials,
  redirect is http-redirect,
  referrer is http-referrer,
  integrity is http-integrity
);

protect type http-request with http;

abstract http-method;
singleton http-head is http-method;
singleton http-get is http-method;
type http-post(body is http-body) is http-method;
type http-delete(body is http-body) is http-method;
type http-put(body is http-body) is http-method;
type http-patch(body is http-body) is http-method;

enum http-mode =
  cors,
  no-cors,
  same-origin,
  navigate;

enum http-credentials =
  omit,
  same-origin,
  include;

enum http-redirect =
  follow,
  error,
  manual;

enum http-cache =
  'default,
  no-store,
  reload,
  no-cache,
  force-cache,
  only-if-cached;

abstract http-referrer;
singleton http-referrer--no-referrer is http-referrer;
singleton http-referrer--client is http-referrer;
type http-referrer--url(url is url) is http-referrer;

command #http-referrer no-referrer = http-referrer--no-referrer;
command #http-referrer client = http-referrer--client;
command #http-referrer url: (Url is url) = new http-referrer--url(Url);


abstract http-integrity;
singleton http-integrity--skip is http-integrity;
type http-integrity--check(hash is text) is http-integrity;

command #http-integrity skip = http-integrity--skip;
command #http-integrity check: (Hash is text) = new http-integrity--check(Hash);


command #http-request url: (Url is static-text) =
  #http-request url: (#url from-text: Url);

command #http-request url: (Url is url) =
  new http-request(
    url -> Url,
    method -> http-get,
    headers -> #http-headers empty,
    cache -> #http-cache 'default,
    mode -> #http-mode cors,
    credentials -> #http-credentials same-origin,
    redirect -> #http-redirect follow,
    referrer -> #http-referrer client,
    integrity -> #http-integrity skip,
  );

command http-request method: (M is http-method) =
  new http-request(self with method -> M);

command http-request get = self method: http-get;
command http-request head = self method: http-head;
command http-request post: (Body has to-http-body) = self method: new http-post(Body as http-body);
command http-request delete: (Body has to-http-body) = self method: new http-delete(Body as http-body);
command http-request put: (Body has to-http-body) = self method: new http-put(Body as http-body);
command http-request patch: (Body has to-http-body) = self method: new http-post(Body as http-body);

command http-request mode: (Mode is http-mode) =
  new http-request(self with mode -> Mode);

command http-request credentials: (Credentials is http-credentials) =
  new http-request(self with credentials -> Credentials);

command http-request redirect: (Redirect is http-redirect) =
  new http-request(self with redirect -> Redirect);

command http-request referrer: (Referrer is http-referrer) =
  new http-request(self with referrer -> Referrer);

command http-request integrity: (Integrity is http-integrity) =
  new http-request(self with integrity -> Integrity);

command http-request cache-mode: (Mode is http-cache) =
  new http-request(self with cache -> Mode);

command http-request headers: (Headers is http-headers) =
  new http-request(self with headers -> Headers);

command http-request headers: (F is (http-headers -> http-headers)) =
  new http-request(self with headers -> F(self.headers));

command http-request headers: (Headers0 is record) do
  let Headers =
    #map from: Headers0
      |> _ pairs
      |> _ fold-from: #http-headers empty with: { H, P in H at: P first put: P second };
  new http-request(self with headers -> Headers);
end

