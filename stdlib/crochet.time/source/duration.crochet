% crochet

// -- Constructors

/// Constructs a duration that represents a 0-length period of time,
/// a collective amount of 0 milliseconds.
command #duration zero =
  new duration(0, 0, 0, 0, 0);

/// Constructs a duration that represents the given number of days.
command #duration days: Days =
  new duration(Days, 0, 0, 0, 0);

/// Constructs a duration that represents the given number of hours.
command #duration hours: Hours =
  new duration(0, Hours, 0, 0, 0);

/// Constructs a duration that represents the given number of minutes.
command #duration minutes: Minutes =
  new duration(0, 0, Minutes, 0, 0);

/// Constructs a duration that represents the given number of seconds.
command #duration seconds: Seconds =
  new duration(0, 0, 0, Seconds, 0);

/// Constructs a duration that represents the given number of milliseconds.
command #duration milliseconds: Milliseconds =
  new duration(0, 0, 0, 0, Milliseconds);

/// Constructs a duration that represents the given number of days.
command integer days =
  #duration days: self;

/// Constructs a duration that represents the 1 day (integer must be 1).
command integer day
requires one :: self === 1
do
  #duration days: self;
end

/// Constructs a duration that represents the given number of hours.
command integer hours =
  #duration hours: self;

/// Constructs a duration that represents 1 hour (integer must be 1).
command integer hour
requires one :: self === 1
do
  #duration hours: self;
end

/// Constructs a duration that represents the given number of minutes.
command integer minutes =
  #duration minutes: self;

/// Constructs a duration that represents 1 minute (integer must be 1).
command integer minute
requires one :: self === 1
do
  #duration minutes: self;
end

/// Constructs a duration that represents the given number of seconds.
command integer seconds =
  #duration seconds: self;

/// Constructs a duration that represents 1 second (integer must be 1).
command integer second
requires one :: self === 1
do
  #duration seconds: self;
end

/// Constructs a duration that represents the given number of milliseconds.
command integer milliseconds =
  #duration milliseconds: self;

/// Constructs a duration that represents 1 millisecond (integer must be 1).
command integer millisecond
requires one :: self === 1
do
  #duration milliseconds: self;
end


// -- Accessing components

/// The exact number of days **stored** in the duration.
command duration days = self.days;

/// The exact number of hours **stored** in the duration.
command duration hours = self.hours;

/// The exact number of minutes **stored** in the duration.
command duration minutes = self.minutes;

/// The exact number of seconds **stored** in the duration.
command duration seconds = self.seconds;

/// The exact number of milliseconds **stored** in the duration.
command duration milliseconds = self.milliseconds;


// -- Balancing

/// Balances the duration, promoting smaller period portions upwards (up to
/// the given unit) if the smaller values overflow.
command duration balanced-to: (Unit is duration-unit) do
  let Millis = self milliseconds % 1000;
  let MillisC = self milliseconds divided-by: 1000;

  let Seconds0 = self seconds + MillisC;
  let Seconds = Seconds0 % 60;
  let SecondsC = Seconds0 divided-by: 60;

  let Minutes0 = self minutes + SecondsC;
  let Minutes = Minutes0 % 60;
  let MinutesC = Minutes0 divided-by: 60;

  let Hours0 = self hours + MinutesC;
  let Hours = Hours0 % 24;
  let HoursC = Hours0 divided-by: 24;

  let Days = self days + HoursC;

  condition
    when Unit is duration-unit.days =>
      new duration(Days, Hours, Minutes, Seconds, Millis);

    when Unit is duration-unit.hours =>
      new duration(0, Hours0 + (self days * 24), Minutes, Seconds, Millis);

    when Unit is duration-unit.minutes =>
      new duration(0, 0, Minutes0 + (self hours * 60) + (self days * 24 * 60), Seconds, Millis);

    when Unit is duration-unit.seconds =>
      new duration(0, 0, 0, Seconds0 + (self minutes * 60) + (self hours * 60 * 60) + (self days * 24 * 60 * 60), Millis);

    when Unit is duration-unit.milliseconds =>
      new duration(0, 0, 0, 0, self milliseconds +
                               (self seconds * 1000) +
                               (self minutes * 60 * 1000) +
                               (self hours * 60 * 60 * 1000) +
                               (self days * 24 * 60 * 60 * 1000));
  end
end

/// Balances a duration up to its largest unit.
command duration balanced do
  self balanced-to: self largest-unit;
end

/// Returns the largest unit in the duration.
command duration largest-unit -> duration-unit do
  condition
    when self days =/= 0 => #duration-unit days;
    when self hours =/= 0 => #duration-unit hours;
    when self minutes =/= 0 => #duration-unit minutes;
    when self seconds =/= 0 => #duration-unit seconds;
    otherwise => #duration-unit milliseconds;
  end
test
  assert new duration(1, 1, 1, 1, 1) largest-unit is duration-unit.days;
  assert new duration(0, 1, 1, 1, 1) largest-unit is duration-unit.hours;
  assert new duration(0, 0, 1, 1, 1) largest-unit is duration-unit.minutes;
  assert new duration(0, 0, 0, 1, 1) largest-unit is duration-unit.seconds;
  assert new duration(0, 0, 0, 0, 1) largest-unit is duration-unit.milliseconds;
  assert new duration(0, 0, 0, 0, 0) largest-unit is duration-unit.milliseconds;
end

// -- Arithmetic

/// Adds two durations together. The resulting duration will be the sum
/// of both periods of time.
command duration + (That is duration) =
  new duration(
    self days + That days,
    self hours + That hours,
    self minutes + That minutes,
    self seconds + That seconds,
    self milliseconds + That milliseconds
  )
test
  assert (3 days + 50 minutes) === new duration(3, 0, 50, 0, 0);
  assert (3 days + 4 days) === new duration(7, 0, 0, 0, 0);
end

// -- Comparisons

/// True if two durations represent equivalent lengths of time. Note that
/// this does not mean the same as durations having _equal components_.
command duration === (That is duration) =
  self to-milliseconds === That to-milliseconds;

/// True if two durations represent different lengths of time. Note that
/// this does not mean the same as durations having _non-equal components_.
command duration =/= (That is duration) =
  self to-milliseconds =/= That to-milliseconds;

/// True if this duration represents a length of time that's collectively
/// less than that of `That` duration.
command duration < (That is duration) =
  self to-milliseconds < That to-milliseconds;

/// True if this duration represents a length of time that's collectively
/// less than or equal to that of `That` duration.
command duration <= (That is duration) =
  self to-milliseconds <= That to-milliseconds;

/// True if this duration represents a length of time that's collectively
/// greater than that of `That` duration.
command duration > (That is duration) =
  self to-milliseconds > That to-milliseconds;

/// True if this duration represents a length of time that's collectively
/// greater than or equal to that of `That` duration.
command duration >= (That is duration) =
  self to-milliseconds >= That to-milliseconds;

// -- Conversions

/// Converts a duration to milliseconds
command duration to-milliseconds -> integer do
    (self.days * 24 * 60 * 60 * 1000)
  + (self.hours * 60 * 60 * 1000)
  + (self.minutes * 60 * 1000)
  + (self.seconds * 1000)
  + self.milliseconds;
end

/// Converts a duration to seconds
command duration to-seconds -> float-64bit do
    (self.days * 24 * 60 * 60)
  + (self.hours * 60 * 60)
  + (self.minutes * 60)
  + (self.seconds)
  + (self.milliseconds / 1000.0);
end

/// Converts a duration to minutes
command duration to-minutes -> float-64bit do
    (self.days * 24 * 60)
  + (self.hours * 60)
  + (self.minutes)
  + (self.seconds / 60.0)
  + (self.milliseconds / (60.0 * 1000.0));
end

/// Converts a duration to hours
command duration to-hours -> float-64bit do
    (self.days * 24)
  + (self.hours)
  + (self.minutes / 60.0)
  + (self.seconds / (60.0 * 60.0))
  + (self.milliseconds / (60.0 * 60.0 * 1000.0));
end

/// Converts a duration to days
command duration to-days -> float-64bit do
    (self.days)
  + (self.hours / 24.0)
  + (self.minutes / (24.0 * 60.0))
  + (self.seconds / (24.0 * 60.0 * 60.0))
  + (self.milliseconds / (24.0 * 60.0 * 60.0 * 1000.0));
end
