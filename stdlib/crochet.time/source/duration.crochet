% crochet

command #duration zero =
  new duration(0, 0, 0, 0, 0);

command #duration days: Days = #duration zero days: Days;
command #duration hours: Hours = #duration zero hours: Hours;
command #duration minutes: Minutes = #duration zero minutes: Minutes;
command #duration seconds: Seconds = #duration zero seconds: Seconds;
command #duration milliseconds: Milliseconds = #duration zero milliseconds: Milliseconds;

command duration days: (Days is integer) =
  new duration(Days, self hours, self minutes, self seconds, self milliseconds);

command duration hours: (Hours is integer) =
  new duration(self days, Hours, self minutes, self seconds, self milliseconds);

command duration minutes: (Minutes is integer) =
  new duration(self days, self hours, Minutes, self seconds, self milliseconds);

command duration seconds: (Seconds is integer) =
  new duration(self days, self hours, self minutes, Seconds, self milliseconds);

command duration milliseconds: (Milliseconds is integer) =
  new duration(self days, self hours, self minutes, self seconds, Milliseconds);

command integer days = #duration days: self;
command integer hours = #duration hours: self;
command integer minutes = #duration minutes: self;
command integer seconds = #duration seconds: self;
command integer milliseconds = #duration milliseconds: self;
command integer day = #duration days: self;
command integer hour = #duration hours: self;
command integer minute = #duration minutes: self;
command integer second = #duration seconds: self;
command integer millisecond = #duration milliseconds: self;

command duration days = self.days;
command duration hours = self.hours;
command duration minutes = self.minutes;
command duration seconds = self.seconds;
command duration milliseconds = self.milliseconds;

command duration balanced do
  let Millis = self milliseconds % 1000;
  let MillisC = self milliseconds divided-by: 1000;

  let Seconds0 = self seconds + MillisC;
  let Seconds = Seconds0 % 60;
  let SecondsC = Seconds0 divided-by: 60;

  let Minutes0 = self minutes + SecondsC;
  let Minutes = Minutes0 % 60;
  let MinutesC = Minutes0 divided-by: 60;

  let Hours0 = self hours + MinutesC;
  let Hours = Hours0 % 24;
  let HoursC = Hours0 divided-by: 24;

  let Days = self days + HoursC;

  new duration(Days, Hours, Minutes, Seconds, Millis);
end

command duration + (That is duration) =
  new duration(
    self days + That days,
    self hours + That hours,
    self minutes + That minutes,
    self seconds + That seconds,
    self milliseconds + That milliseconds
  );

command duration - (That is duration)
requires
  smaller-subtractend :: self balanced >= That balanced
=
  new duration(
    self days - That days,
    self hours - That hours,
    self minutes - That minutes,
    self seconds - That seconds,
    self milliseconds - That milliseconds
  );


command duration === (That is duration) =
  self to-milliseconds === That to-milliseconds;

command duration =/= (That is duration) =
  self to-milliseconds =/= That to-milliseconds;

command duration < (That is duration) =
  self to-milliseconds < That to-milliseconds;

command duration <= (That is duration) =
  self to-milliseconds <= That to-milliseconds;

command duration > (That is duration) =
  self to-milliseconds > That to-milliseconds;

command duration >= (That is duration) =
  self to-milliseconds >= That to-milliseconds;


command duration to-milliseconds do
    (self.days * 24 * 60 * 60 * 1000)
  + (self.hours * 60 * 60 * 1000)
  + (self.minutes * 60 * 1000)
  + (self.seconds * 1000)
  + self.milliseconds;
end

command duration to-seconds do
    (self.days * 24 * 60 * 60)
  + (self.hours * 60 * 60)
  + (self.minutes * 60)
  + (self.seconds)
  + (self.milliseconds / 1000.0);
end

command duration to-minutes do
    (self.days * 24 * 60)
  + (self.hours * 60)
  + (self.minutes)
  + (self.seconds / 60.0)
  + (self.milliseconds / (60.0 * 1000.0));
end

command duration to-hours do
    (self.days * 24)
  + (self.hours)
  + (self.minutes / 60.0)
  + (self.seconds / (60.0 * 60.0))
  + (self.milliseconds / (60.0 * 60.0 * 1000.0));
end

command duration to-days do
    (self.days)
  + (self.hours / 24.0)
  + (self.minutes / (24.0 * 60.0))
  + (self.seconds / (24.0 * 60.0 * 60.0))
  + (self.milliseconds / (24.0 * 60.0 * 60.0 * 1000.0));
end


command debug-representation of: (X is duration) do
  let Days =
    condition
      when X days === 0 => debug-representation empty;
      otherwise => debug-representation number: X days
                     | append: " days";
    end;

  let Hours =
    condition
      when X hours === 0 => debug-representation empty;
      otherwise => debug-representation number: X hours
                     | append: " hours";
    end;

  let Minutes =
    condition
      when X minutes === 0 => debug-representation empty;
      otherwise => debug-representation number: X minutes
                     | append: " minutes";
    end;

  let Seconds =
    condition
      when X seconds === 0 => debug-representation empty;
      otherwise => debug-representation number: X seconds
                     | append: " seconds";
    end;

  let Millis =
    condition
      when X milliseconds === 0 => debug-representation empty;
      otherwise => debug-representation number: X milliseconds
                     | append: " milliseconds";
    end;

  let Representation = 
    debug-representation
      list: [Days, Hours, Minutes, Seconds, Millis]
      separator: ", ";

  Representation;  
  debug-representation type: "duration"
    | value: Representation
    | finish;
end