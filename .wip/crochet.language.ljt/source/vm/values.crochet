% crochet

open crochet.data.collection;

abstract ljt-value;
type v-bool(global value is boolean) is ljt-value;
type v-int8(global value is integer) is ljt-value;
type v-int16(global value is integer) is ljt-value;
type v-int32(global value is integer) is ljt-value;
type v-uint8(global value is integer) is ljt-value;
type v-uint16(global value is integer) is ljt-value;
type v-uint32(global value is integer) is ljt-value;
type v-integer(global value is integer) is ljt-value;
type v-float32(global value is float-64bit) is ljt-value;
type v-float64(global value is float-64bit) is ljt-value;
type v-text(global value is text) is ljt-value;
type v-bytes(global value is byte-array) is ljt-value;

type v-array(typ is ljt-type, global values is list<ljt-value>) is ljt-value;
type v-map(typ is ljt-type, global value is equality-map<ljt-value, ljt-value>) is ljt-value;
type v-tuple(typ is ljt-type, global values is list<ljt-value>) is ljt-value;

abstract v-optional is ljt-value;
type v-just(typ is ljt-type, global value is ljt-value) is v-optional;
type v-none(typ is ljt-type) is v-optional;

abstract v-tagged is ljt-value;
type v-record(typ is ljt-type, global value is v-tuple) is v-tagged;
type v-choice(typ is ljt-type, global value is v-variant) is v-tagged;

type v-variant(typ is ljt-type, global value is v-tuple) is ljt-value;


// Equality
implement equality for ljt-value;
command ljt-value === ljt-value = false;

command (A is v-bool) === (B is v-bool) = A.value === B.value;
command (A is v-int8) === (B is v-int8) = A.value === B.value;
command (A is v-int16) === (B is v-int16) = A.value === B.value;
command (A is v-int32) === (B is v-int32) = A.value === B.value;
command (A is v-uint8) === (B is v-uint8) = A.value === B.value;
command (A is v-uint16) === (B is v-uint16) = A.value === B.value;
command (A is v-uint32) === (B is v-uint32) = A.value === B.value;
command (A is v-float32) === (B is v-float32) = (A.value >= (B.value - 0.1)) and (A.value <= (B.value + 0.1));
command (A is v-float64) === (B is v-float64) = (A.value >= (B.value - 0.01)) and (A.value <= (B.value + 0.01));
command (A is v-integer) === (B is v-integer) = A.value === B.value;
command (A is v-text) === (B is v-text) = A.value === B.value;
command (A is v-bytes) === (B is v-bytes) = A.value === B.value;

command (A is v-array) === (B is v-array) =
  (A.typ === B.typ) and
  (A.values count === B.values count)
    | and-also: {A.values zip: B.values with: (_ === _) | all-true};

command (A is v-map) === (B is v-map) =
  (A.typ === B.typ) and
  (A.value count === B.value count)
    | and-also: {
        A.value entries all: { Entry in
          B.value contains-key: Entry key
            | and-also: {Entry value === (B.value at: Entry key)};
        }
      };

command (A is v-tuple) === (B is v-tuple) =
  (A.typ === B.typ) and
  (A.values count === B.values count)
    | and-also: {A.values zip: B.values with: (_ === _) | all-true};

command (A is v-record) === (B is v-record) =
  (A.typ === B.typ)
    | and-also: { A value === B value };

command (A is v-choice) === (B is v-choice) =
  A.typ === B.typ
    | and-also: { A value === B value };

command (A is v-variant) === (B is v-variant) =
  A.typ === B.typ
    | and-also: { A value === B value };

command (A is v-just) === (B is v-just) =
  (A.typ === B.typ) and (A.value === B.value);

command (A is v-none) === (B is v-none) =
  A.typ === B.typ;


command v-bool codec = t-bool;
command v-int8 codec = t-int8;
command v-int16 codec = t-int16;
command v-int32 codec = t-int32;
command v-uint8 codec = t-uint8;
command v-uint16 codec = t-uint16;
command v-uint32 codec = t-uint32;
command v-integer codec = t-integer;
command v-float32 codec = t-float32;
command v-float64 codec = t-float64;
command v-text codec = t-text;
command v-bytes codec = t-bytes;

command v-array codec = self.typ;
command v-map codec = self.typ;
command v-tuple codec = self.typ;
command v-record codec = self.typ;
command v-choice codec = self.typ;
command v-variant codec = self.typ;

command v-just codec = self.typ;
command v-none codec = self.typ;
