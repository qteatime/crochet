type Program(pos: Meta, declarations: Declaration[])

type Declaration =
  | Relation(pos: Meta, signature: Signature<RelationPart>)
  | DefinePredicate(pos: Meta, signature: Signature<Name>, clauses: PredicateClause[])
  | Do(pos: Meta, body: Statement[])
  | ForeignCommand(pos: Meta, signature: Signature<Parameter>, body: FFI)
  | Command(pos: Meta, signature: Signature<Parameter>, body: Statement[])
  | Define(pos: Meta, name: Name, value: Expression)  // requires atomicity
  | Role(pos: Meta, name: Name)
  | SingletonType(pos: Meta, typ: TypeDef, init: TypeInit[])
  | ForeignType(pos: Meta, name: Name, foreign_name: Namespace)
  | Type(pos: Meta, typ: TypeDef, fields: Parameter[])
  | Enum(pos: Meta, name: Name, values: Variant[])
  | Scene(pos: Meta, name: Name, body: Statement[])
  | Action(pos: Meta, title: String, pred: Predicate, body: Statement[]) // FIXME: interpolated titles
  | When(pos: Meta, pred: Predicate, body: Statement[])

type TypeDef(name: Name, roles: Name[])
type Variant(pos: Meta, name: Name, roles: Name[])
type FFI(pos: Meta, name: Namespace, args: Name[])

type TypeInit =
  | Fact(pos: Meta, sig: PartialSignature<Expression>)
  | Command(pos: Meta, sig: PartialSignature<Parameter>, body: Statement[])
  | ForeignCommand(pos: Meta, signature: PartialSignature<Parameter>, body: FFI)

type Parameter =
  | Untyped(pos: Meta, name: Name)
  | Typed(pos: Meta, name: Name, typ: TypeApp)
  | TypedOnly(pos: Meta, typ: TypeApp)

type TypeApp =
  | Named(pos: Meta, name: Name)

type PredicateClause(
  pos: Meta,
  predicate: Predicate,
  effect: PredicateEffect
)

type PredicateEffect =
  | Trivial()

type Statement =
  | Fact(pos: Meta, signature: Signature<Expression>)
  | Forget(pos: Meta, signature: Signature<Expression>)
  | Goto(pos: Meta, name: Name)
  | Call(pos: Meta, name: Name)
  | Let(pos: Meta, name: Name, value: Expression)
  | SimulateGlobal(pos: Meta, actors: Expression, goal: SimulationGoal)
  | Expr(value: Expression)

type Expression =
  | New(pos: Meta, typ: Name, fields: Expression[])
  | NewVariant(pos: Meta, typ: Name, variant: Name)
  | Invoke(pos: Meta, signature: Signature<Expression>)
  | Global(pos: Meta, name: Name)
  | Variable(pos: Meta, name: Name)
  | Self(pos: Meta)
  | List(pos: Meta, values: Expression[])
  | Record(pos: Meta, pairs: Pair<Name, Expression>[])
  | Cast(pos: Meta, typ: TypeApp, value: Expression)
  | Search(pos: Meta, predicate: Predicate)
  | Project(pos: Meta, object: Expression, field: Name)
  | Select(pos: Meta, object: Expression, fields: Projection[])
  | For(pos: Meta, stream: Expression, name: Name, body: Expression)
  | Block(pos: Meta, body: Statement[])
  | Apply(pos: Meta, partial: Expression, values: Expression[])
  | Pipe(pos: Meta, left: Expression, right: Expression)
  | Interpolate(pos: Meta, parts: InterpolationPart[])
  | Hole(pos: Meta)
  | Parens(pos: Meta, value: Expression)
  | Lit(value: Literal)

type Projection(pos: Meta, name: Name, alias: Name)

type InterpolationPart =
  | Escape(pos: Meta, character: string)
  | Static(pos: Meta, text: string)
  | Dynamic(pos: Meta, value: Expression)

type Literal =
  | False(pos: Meta)
  | True(pos: Meta)
  | Text(pos: Meta, value: String)
  | Integer(pos: Meta, digits: string)

type SimulationGoal =
  | ActionQuiescence(pos: Meta)
  | EventQuiescence(pos: Meta)
  | TotalQuiescence(pos: Meta)
  | CustomGoal(pos: Meta, pred: Predicate)

type Predicate =
  | And(pos: Meta, left: Predicate, right: Predicate)
  | Or(pos: Meta, left: Predicate, right: Predicate)
  | Not(pos: Meta, pred: Predicate)
  | Has(pos: Meta, signature: Signature<Pattern>)
  | Constrain(pos: Meta, pred: Predicate, constraint: Constraint)
  | Parens(pos: Meta, pred: Predicate)

type Pattern =
  | HasRole(pos: Meta, typ: Name, name: Pattern)
  | HasType(pos: Meta, typ: TypeApp, name: Pattern)
  | Variant(pos: Meta, typ: Name, variant: Name)
  | Global(pos: Meta, name: Name)
  | Variable(pos: Meta, name: Name)
  | Wildcard(pos: Meta)
  | Lit(lit: Literal)

type Constraint =
  | And(pos: Meta, left: Constraint, right: Constraint)
  | Or(pos: Meta, left: Constraint, right: Constraint)
  | Not(pos: Meta, value: Constraint)
  | Equal(pos: Meta, left: Constraint, right: Constraint)
  | Variable(pos: Meta, name: Name)
  | Parens(pos: Meta, value: Constraint)
  | Lit(lit: Literal)

type Signature<T> =
  | Unary(pos: Meta, self: T, name: Name)
  | Binary(pos: Meta, op: Name, left: T, right: T)
  | Keyword(pos: Meta, self: T, pairs: Pair<Name, T>[])
  | KeywordSelfless(pos: Meta, pairs: Pair<Name, T>[])

type PartialSignature<T> =
  | Unary(pos: Meta, name: Name)
  | Binary(pos: Meta, op: Name, right: T)
  | Keyword(pos: Meta, pairs: Pair<Name, T>[])

type RelationPart =
  | Many(pos: Meta, name: Name)
  | One(pos: Meta, name: Name)

type Pair<K, V>(pos: Meta, key: K, value: V)
type Name(pos: Meta, name: string)
type Namespace(pos: Meta, names: Name[])
type String(pos: Meta, text: string)


grammar Crochet : Program {
  program =
    | header ds:declaration* space* end
      -> Program(meta, ds)

  declaration =
    | relationDeclaration
    | predicateDeclaration
    | doDeclaration
    | commandDeclaration
    | roleDeclaration
    | typeDeclaration
    | enumDeclaration
    | defineDeclaration
    | sceneDeclaration
    | actionDeclaration
    | whenDeclaration

  relationDeclaration =
    | relation_ s:logicSignature<relationPart> s<";">
      -> Declaration.Relation(meta, s)

  relationPart =
    | n:name s<"*"> -> RelationPart.Many(meta, n)
    | n:name        -> RelationPart.One(meta, n)

  predicateDeclaration =
    | predicate_ l:logicSignature<name> c:block<predicateClause>
      -> Declaration.DefinePredicate(meta, l, c)

  predicateClause =
    | when_ p:predicate s<";">   -> PredicateClause(meta, p, PredicateEffect.Trivial())

  doDeclaration =
    | do_ xs:statementBlock<statement>
      -> Declaration.Do(meta, xs)

  commandDeclaration =
    | command_ s:signature<parameter> s<"="> foreign_ b:foreignBody
      -> Declaration.ForeignCommand(meta, s, b)

    | command_ s:signature<parameter> s<"="> e:expression s<";">
      -> Declaration.Command(meta, s, [Statement.Expr(e)])

    | command_ s:signature<parameter> b:statementBlock<statement>
      -> Declaration.Command(meta, s, b)

  foreignBody =
    | n:namespace s<"("> xs:listOf<name, s<",">> s<")"> s<";">
      -> FFI(meta, n, xs)

  parameter =
    | n:name                              -> Parameter.Untyped(meta, n)
    | s<"("> n:name is_ t:typeApp s<")">  -> Parameter.Typed(meta, n, t)
    | t:typeName                          -> Parameter.TypedOnly(meta, TypeApp.Named(meta, t))

  typeApp =
    | typeAppPrimary

  typeAppPrimary =
    | t:typeName                  -> TypeApp.Named(meta, t)

  typeName =
    | atom
    | x:true_   -> Name(meta, x)
    | x:false_  -> Name(meta, x)

  typeDeclaration =
    | singleton_ t:basicType i:typeInitBlock
      -> Declaration.SingletonType(meta, t, i)

    | type_ t:basicType fs:typeFields s<";">
      -> Declaration.Type(meta, t, fs)

    | type_ n:typeName s<"="> foreign_ ns:namespace s<";">
      -> Declaration.ForeignType(meta, n, ns)
  
  basicType =
    | n:atom r:roles    -> TypeDef(n, r)

  typeInitBlock =
    | x:block<typeInit>   -> x
    | s<";">              -> []

  typeFields =
    | s<"("> fs:nonemptyListOf<typeField, s<",">> s<")">  -> fs
    |                                                     -> []

  typeField =
    | n:name is_ t:typeApp                -> Parameter.Typed(meta, n, t)
    | n:name                              -> Parameter.Untyped(meta, n)

  typeInit =
    | s:partialLogicSignature<invokePostfix> s<";">
      -> TypeInit.Fact(meta, s)
    | command_ s:partialSignature<parameter> s<"="> b:foreignBody
      -> TypeInit.ForeignCommand(meta, s, b)
    | command_ s:partialSignature<parameter> b:statementBlock<statement>
      -> TypeInit.Command(meta, s, b)

  roleDeclaration =
    | role_ n:atom s<";">           -> Declaration.Role(meta, n)

  enumDeclaration =
    | enum_ n:atom s<"="> s<"|">? vs:nonemptyListOf<variant, s<"|">> s<";">
      -> Declaration.Enum(meta, n, vs)

  variant =
    | n:atom r:roles  -> Variant(meta, n, r)

  roles =
    | s<"::"> r:nonemptyListOf<atom, s<",">>   -> r
    |                                          -> []

  defineDeclaration =
    | define_ n:atom s<"="> e:atomicExpression s<";">
      -> Declaration.Define(meta, n, e)

  sceneDeclaration =
    | scene_ n:atom b:statementBlock<statement>
      -> Declaration.Scene(meta, n, b)

  actionDeclaration =
    | action_ t:string when_ p:predicate b:statementBlock<statement>
      -> Declaration.Action(meta, t, p, b)
  
  whenDeclaration =
    | when_ p:predicate b:statementBlock<statement>
      -> Declaration.When(meta, p, b)


  // -- Logic
  predicate =
    | p:predicateBinary if_ c:constraint      -> Predicate.Constrain(meta, p, c)
    | predicateBinary

  predicateBinary =
    | predicateAnd
    | predicateOr
    | predicateNot

  predicateAnd =
    | l:predicateNot s<","> r:predicateAnd1   -> Predicate.And(meta, l, r)
  
  predicateAnd1 =
    | l:predicateNot s<","> r:predicateAnd1   -> Predicate.And(meta, l, r)
    | predicateNot

  predicateOr =
    | l:predicateNot s<"|"> r:predicateOr1    -> Predicate.Or(meta, l, r)
  
  predicateOr1 =
    | l:predicateNot s<"|"> r:predicateOr1    -> Predicate.Or(meta, l, r)
    | predicateNot
  
  predicateNot =
    | not_ p:predicatePrimary                 -> Predicate.Not(meta, p)
    | predicatePrimary

  predicatePrimary =
    | r:logicSignature<pattern>               -> Predicate.Has(meta, r)
    | s<"("> p:predicate s<")">               -> Predicate.Parens(meta, p)

  pattern =
    | s<"("> c:patternComplex s<")">  -> c
    | n:atom s<"."> v:atom    -> Pattern.Variant(meta, n, v)
    | n:atom                  -> Pattern.Global(meta, n)
    | l:literal               -> Pattern.Lit(l)
    | patternName

  patternComplex =
    | n:patternName is_ t:typeApp   -> Pattern.HasType(meta, t, n)
    | n:patternName s<"::"> t:atom  -> Pattern.HasRole(meta, t, n)

  patternName =
    | s<"_">        -> Pattern.Wildcard(meta)
    | n:name        -> Pattern.Variable(meta, n)

  constraint =
    | l:constraint and r:constraint  -> Constraint.And(meta, l, r)
    | l:constraint or r:constraint   -> Constraint.Or(meta, l, r)
    | constraint200

  constraint200 =
    | not_ c:constraint300            -> Constraint.Not(meta, c)
    | constraint300

  constraint300 =
    | l:constraint400 s<"==="> r:constraint400  -> Constraint.Equal(meta, l, r)
    | l:constraint400 s<"=/="> r:constraint400  -> Constraint.Not(meta, Constraint.Equal(meta, l, r))
    | constraint400

  constraint400 =
    | n:name                          -> Constraint.Variable(meta, n)
    | l:literal                       -> Constraint.Lit(l)
    | s<"("> c:constraint s<")">      -> Constraint.Parens(meta, c)


  // -- Statement
  statement =
    | letStatement
    | factStatement
    | forgetStatement
    | gotoStatement
    | callStatement
    | simulateStatement
    | e:expression    -> Statement.Expr(e)

  letStatement =
    | let_ n:name s<"="> e:expression
      -> Statement.Let(meta, n, e)
  
  factStatement =
    | fact_ s:logicSignature<primaryExpression> 
      -> Statement.Fact(meta, s)
  
  forgetStatement =
    | forget_ s:logicSignature<primaryExpression>
      -> Statement.Forget(meta, s)

  gotoStatement =
    | goto_ n:atom  -> Statement.Goto(meta, n)

  callStatement =
    | call_ n:atom  -> Statement.Call(meta, n)

  simulateStatement =
    | simulate_ for_ e:expression until_ g:simulateGoal
      -> Statement.SimulateGlobal(meta, e, g)

  simulateGoal =
    | action_ quiescence_ -> SimulationGoal.ActionQuiescence(meta)
    | event_ quiescence_  -> SimulationGoal.EventQuiescence(meta)
    | quiescence_         -> SimulationGoal.TotalQuiescence(meta)
    | p:predicate         -> SimulationGoal.CustomGoal(meta, p)


  // -- Expressions
  expression =
    | searchExpression
    | forExpression
    | pipeExpression

  searchExpression =
    | search_ p:predicate
      -> Expression.Search(meta, p)

  forExpression =
    | for_ n:name in_ e:expression b:expressionBlock
      -> Expression.For(meta, e, n, b)

  expressionBlock =
    | b:statementBlock<statement> -> Expression.Block(meta, b)

  pipeExpression =
    | l:pipeExpression s<"|"> r:invokeInfixExpression
      -> Expression.Pipe(meta, l, r)
    | invokeInfixExpression

  invokeInfixExpression =
    | l:invokeInfixExpression op:infix_symbol r:invokeMixfix
      -> Expression.Invoke(meta, Signature.Binary(meta, op, l, r))
    | invokeMixfix

  invokeMixfix =
    | s:castExpression ps:signaturePair<invokePostfix>+
      -> Expression.Invoke(meta, Signature.Keyword(meta, s, ps))
    | ps:signaturePair<invokePostfix>+
      -> Expression.Invoke(meta, Signature.KeywordSelfless(meta, ps))
    | castExpression

  castExpression =
    | s:invokePostfix as_ t:typeAppPrimary
      -> Expression.Cast(meta, t, s)
    | invokePostfix

  invokePostfix =
    | s:invokePostfix n:atom
      -> Expression.Invoke(meta, Signature.Unary(meta, s, n))
    | applyExpression

  applyExpression =
    | f:applyExpression s<"("> xs:nonemptyListOf<expression, s<",">> s<",">? s<")">
      -> Expression.Apply(meta, f, xs)
    | memberExpression

  memberExpression =
    | o:memberExpression s<"."> f:name
      -> Expression.Project(meta, o, f)
    | o:memberExpression s<"."> p:memberSelection
      -> Expression.Select(meta, o, p)
    | primaryExpression

  memberSelection =
    | s<"("> xs:nonemptyListOf<fieldSelection, s<",">> s<",">? s<")">
      -> xs

  fieldSelection =
    | n:name as_ a:name   -> Projection(meta, n, a)
    | n:name              -> Projection(meta, n, n)

  primaryExpression =
    | newExpression<expression>
    | interpolateText<expression>
    | literalExpression
    | recordExpression<expression>
    | listExpression<expression>
    | hole
    | self_                         -> Expression.Self(meta)
    | n:atom                        -> Expression.Global(meta, n)
    | n:name                        -> Expression.Variable(meta, n)
    | s<"("> e:expression s<")">    -> Expression.Parens(meta, e)

  newExpression<e> =
    | new_ n:atom fs:newFields<e>   -> Expression.New(meta, n, fs)
    | n:atom s<"."> v:atom          -> Expression.NewVariant(meta, n, v)

  newFields<e> =
    | s<"("> fs:nonemptyListOf<e, s<",">> s<")">    -> fs
    |                                               -> []

  listExpression<e> =
    | s<"["> xs:listOf<e, s<",">> s<",">? s<"]">
      -> Expression.List(meta, xs)

  recordExpression<e> =
    | s<"["> s<"->"> s<"]">                                             -> Expression.Record(meta, [])
    | s<"["> xs:nonemptyListOf<recordPair<e>, s<",">> s<",">? s<"]">    -> Expression.Record(meta, xs)

  recordPair<e> =
    | n:name s<"->"> v:e -> Pair(meta, n, v)

  literalExpression =
    | l:literal             -> Expression.Lit(l)

  atomicExpression =
    | newExpression<atomicExpression>
    | literalExpression
    | recordExpression<atomicExpression>
    | listExpression<atomicExpression>

  interpolateText<t> =
    | s<"\""> xs:interpolatePart<t>* "\""
      -> Expression.Interpolate(meta, xs)

  interpolatePart<p> =
    | "\\" c:any                 -> InterpolationPart.Escape(meta, c)
    | "[" x:s<p> s<"]">          -> InterpolationPart.Dynamic(meta, x)
    | ~"\"" c:any                -> InterpolationPart.Static(meta, c)


  // -- Literals
  literal =
    | text
    | integer
    | boolean

  boolean =
    | true_                 -> Literal.True(meta)
    | false_                -> Literal.False(meta)

  text =
    | x:string              -> Literal.Text(meta, x)

  integer =
    | x:s<t_integer>        -> Literal.Integer(meta, x)

  string =
    | x:s<t_text>           -> String(meta, x)
  
  hole =
    | x:s<"_"> ~name_rest   -> Expression.Hole(meta)

  // -- Token -> Rule & Basics
  atom = ~reserved x:s<t_atom> ~":"           -> Name(meta, x)
  name = x:s<t_name>                          -> Name(meta, x)
  keyword = x:s<t_keyword>                    -> Name(meta, x)
  infix_symbol = x:s<t_infix_symbol>          -> Name(meta, x)
  not = x:not_                                -> Name(meta, x)
  and = x:and_                                -> Name(meta, x)
  or = x:or_                                  -> Name(meta, x)

  namespace = x:nonemptyListOf<atom, s<".">>  -> Namespace(meta, x)


  // -- Higher-order
  logicSignature<t> =
    | s:t kws:signaturePair<t>+       -> Signature.Keyword(meta, s, kws)
    | s:t n:atom                      -> Signature.Unary(meta, s, n)

  signaturePair<t> =
    | kw:keyword v:t  -> Pair(meta, kw, v)

  partialLogicSignature<t> =
    | kws:signaturePair<t>+       -> PartialSignature.Keyword(meta, kws)
    | n:atom                      -> PartialSignature.Unary(meta, n)

  partialSignature<t> =
    | kws:signaturePair<t>+       -> PartialSignature.Keyword(meta, kws)
    | op:infix_symbol r:t         -> PartialSignature.Binary(meta, op, r)
    | n:atom                      -> PartialSignature.Unary(meta, n)
    | n:not                       -> PartialSignature.Unary(meta, n)

  signature<t> =
    | l:t op:infix_symbol r:t         -> Signature.Binary(meta, op, l, r)
    | s:t kws:signaturePair<t>+       -> Signature.Keyword(meta, s, kws)
    | s:t n:atom                      -> Signature.Unary(meta, s, n)
    | n:not s:t                       -> Signature.Unary(meta, s, n)
    | kws:signaturePair<t>+           -> Signature.KeywordSelfless(meta, kws)

  statementBlock<t> =
    | s<"{"> xs:listOf<t, s<";">> s<";">? s<"}"> -> xs

  block<t> =
    | s<"{"> xs:t* s<"}"> -> xs

  s<p> = space* x:p -> x


  // -- Lexical
  token header (a file header) = space* "%" hs* "crochet" nl
  token hs = " " | "\t"
  token nl = "\n" | "\r"
  token line = (~nl any)*
  token comment (a comment) = "//" line
  space += comment

  token atom_start = "a".."z"
  token atom_rest = letter | digit | "-"
  token t_atom (an atom) = atom_start atom_rest*

  token t_keyword (a keyword) = t_atom ":"

  token name_start = "A".."Z" | "_"
  token name_rest = letter | digit | "-"
  token t_name (a name) = name_start name_rest*

  token t_infix_symbol =
    | x:t_any_infix ~infix_character  -> x
    | and_
    | or_

  token t_any_infix =
    | "++" | "+"
    | "-"
    | "*"
    | "/"
    | "<=" | "<"
    | ">=" | ">"
    | "===" | "=/="

  token infix_character = "+" | "-" | "*" | "/" | "<" | ">" | "="

  // -- Literals
  token dec_digit = "0".."9" | "_"

  token t_integer (an integer) =
    | ~"_" dec_digit+

  token text_character =
    | "\\" "\""
    | ~"\"" any

  token t_text (a text) =
    | "\"" text_character* "\""


  // -- Reserved words
  kw<w> = x:s<w> ~atom_rest -> x

  relation_ = kw<"relation">
  predicate_ = kw<"predicate">
  when_ = kw<"when">
  do_ = kw<"do">
  command_ = kw<"command">
  type_ = kw<"type">
  role_ = kw<"role">
  enum_ = kw<"enum">
  define_ = kw<"define">
  singleton_ = kw<"singleton">
  scene_ = kw<"scene">
  action_ = kw<"action">

  let_ = kw<"let">
  return_ = kw<"return">
  fact_ = kw<"fact">
  forget_ = kw<"forget">
  new_ = kw<"new">
  search_ = kw<"search">
  if_ = kw<"if">
  goto_ = kw<"goto">
  call_ = kw<"call">
  simulate_ = kw<"simulate">

  true_ = kw<"true">
  false_ = kw<"false">
  not_ = kw<"not">
  and_ = kw<"and">
  or_ = kw<"or">
  is_ = kw<"is">
  self_ = kw<"self">
  as_ = kw<"as">
  event_ = kw<"event">
  quiescence_ = kw<"quiescence">
  for_ = kw<"for">
  until_ = kw<"until">
  in_ = kw<"in">
  foreign_ = kw<"foreign">

  reserved =
    | relation_ | predicate_ | when_ | do_ | command_ | scene_ | action_
    | type_ | role_ | enum_ | define_ | singleton_ | goto_ | call_
    | let_ | return_ | fact_ | forget_ | new_ | search_ | if_ | simulate_
    | true_ | false_ | not_ | and_ | or_ | is_ | self_ | as_
    | event_ | quiescence_ | for_ | until_ | in_ | foreign_
}