export default "% crochet\r\n\r\ntype html-element = foreign crochet.ui.html.element;\r\ntype html-menu = foreign crochet.ui.html.menu;\r\n\r\nsingleton html;\r\n\r\ncommand html show: X =\r\n  foreign crochet.ui.html.show(X);\r\n\r\ncommand html wait-click =\r\n  foreign crochet.ui.html.wait();\r\n\r\ncommand html box: Name class: Class children: Children =\r\n  foreign crochet.ui.html.box(Name, Class, Children);\r\n\r\ncommand html text: Text =\r\n  foreign crochet.ui.html.text(Text);\r\n\r\ncommand html menu: Items class: Class =\r\n  foreign crochet.ui.html.menu(Class, Items);\r\n\r\ncommand (X is html-menu) selected =\r\n  foreign crochet.ui.html.menu-selected(X);\r\n\r\n\r\ncommand X show {\r\n  X to-html show;\r\n}\r\n\r\ncommand (X is html-element) show {\r\n  html show: X;\r\n}\r\n\r\ncommand X show-wait {\r\n  X show;\r\n  wait-click;\r\n}\r\n\r\n\r\ncommand X to-html {\r\n  X debug-representation text;\r\n}\r\n\r\ncommand (X is html-element) to-html {\r\n  X;\r\n}\r\n\r\ncommand (X is text) to-html {\r\n  X text;\r\n}\r\n\r\ncommand (X is interpolation) to-html {\r\n  X parts to-html;\r\n}\r\n\r\ncommand (Xs is stream) to-html {\r\n  let Items = for X in Xs { X to-html };\r\n  html box: \"span\" class: \"crochet-stream\" children: Items;\r\n}\r\n\r\n\r\ncommand (Text is text) text {\r\n  html text: Text;\r\n}\r\n\r\ncommand header: X {\r\n  html\r\n    box: \"header\"\r\n    class: \"crochet-header\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand title: X {\r\n  html\r\n    box: \"h1\"\r\n    class: \"crochet-title\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand subtitle: X {\r\n  html\r\n    box: \"h2\"\r\n    class: \"crochet-subtitle\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand monospace: X {\r\n  html\r\n    box: \"div\"\r\n    class: \"crochet-mono\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand paragraph: X {\r\n  html \r\n    box: \"p\"\r\n    class: \"crochet-paragraph\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand box: (Class is text) children: X {\r\n  html box: \"div\" class: Class children: [X to-html];\r\n}\r\n\r\ncommand flow: X {\r\n  box: \"crochet-flow\" children: X to-html;\r\n}\r\n\r\ncommand stack: X {\r\n  box: \"crochet-stack\" children: X to-html;\r\n}\r\n\r\ncommand emphasis: X {\r\n  html\r\n    box: \"em\"\r\n    class: \"crochet-emphasis\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand strong: X {\r\n  html\r\n    box: \"strong\"\r\n    class: \"crochet-strong\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand html divider {\r\n  html\r\n    box: \"div\"\r\n    class: \"crochet-divider\"\r\n    children: [];\r\n}\r\n\r\ncommand section: X {\r\n  html\r\n    box: \"section\"\r\n    class: \"crochet-section\"\r\n    children: [X to-html];\r\n}\r\n\r\ncommand menu: (Items0 is stream) {\r\n  let Items = for X in Items {\r\n    [\r\n      Title -> X.Title to-html,\r\n      Value -> X.Value,\r\n    ]\r\n  };\r\n\r\n  html\r\n    menu: Items\r\n    class: \"crochet-menu\";\r\n}"