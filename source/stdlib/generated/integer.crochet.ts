export default {"filename":"builtin integer.crochet","source":"% crochet\r\n\r\n// Note: we don't provide the non-integral division operator (/) yet because\r\n// we neither have fractional numbers nor floats.\r\n\r\n// == Arithmetic\r\ncommand (X is integer) + (Y is integer) =\r\n  foreign crochet.native.integer.add(X, Y);\r\n\r\ncommand (X is integer) - (Y is integer) =\r\n  foreign crochet.native.integer.sub(X, Y);\r\n\r\ncommand (X is integer) * (Y is integer) =\r\n  foreign crochet.native.integer.mul(X, Y);\r\n\r\ncommand (X is integer) divided-by: (Y is integer) =\r\n  foreign crochet.native.integer.div(X, Y);\r\n\r\ncommand (X is integer) remainder-of-division-by: (Y is integer) =\r\n  foreign crochet.native.integer.rem(X, Y);\r\n\r\ncommand (X is integer) divide-by-with-remainder: (Y is integer) do\r\n  [\r\n    Quotient -> X divided-by: Y,\r\n    Remainder -> X remainder-of-division-by: Y,\r\n  ];\r\nend\r\n\r\n// == Relational\r\ncommand (X is integer) < (Y is integer) = \r\n  foreign crochet.native.integer.lt(X, Y);\r\n\r\ncommand (X is integer) <= (Y is integer) = \r\n  foreign crochet.native.integer.lte(X, Y);\r\n\r\ncommand (X is integer) > (Y is integer) = \r\n  foreign crochet.native.integer.gt(X, Y);\r\n\r\ncommand (X is integer) >= (Y is integer) = \r\n  foreign crochet.native.integer.gte(X, Y);\r\n\r\n\r\n\r\n"}