export default {"filename":"builtin core.crochet","source":"% crochet\r\n\r\ntype any = foreign crochet.native.core.any;\r\ntype unknown = foreign crochet.native.core.unknown;\r\ntype true = foreign crochet.native.core.true;\r\ntype false = foreign crochet.native.core.false;\r\ntype boolean = foreign crochet.native.core.boolean;\r\ntype float = foreign crochet.native.core.float;\r\ntype integer = foreign crochet.native.core.integer;\r\ntype text = foreign crochet.native.core.text;\r\ntype interpolation = foreign crochet.native.core.interpolation;\r\ntype partial = foreign crochet.native.core.partial;\r\ntype record = foreign crochet.native.core.record;\r\ntype stream = foreign crochet.native.core.stream;\r\ntype thunk = foreign crochet.native.core.thunk;\r\ntype 'enum = foreign crochet.native.core.enum;\r\n\r\ncommand X and Y = foreign crochet.native.core.band(X, Y);\r\ncommand X or Y = foreign crochet.native.core.bor(X, Y);\r\ncommand not X = foreign crochet.native.core.bnot(X);\r\n\r\ncommand X === Y = foreign crochet.native.core.eq(X, Y);\r\ncommand X =/= Y = foreign crochet.native.core.not-eq(X, Y);\r\n\r\ncommand X <= Y = (X === Y) or (X < Y);\r\ncommand X >= Y = (X === Y) or (X > Y);\r\n\r\ncommand 'enum < (O is 'enum) =\r\n  self to-enum-integer < O to-enum-integer;\r\n\r\ncommand 'enum > (O is 'enum) =\r\n  self to-enum-integer > O to-enum-integer;\r\n\r\ncommand 'enum successor do\r\n  self from-enum-integer: (self to-enum-integer + 1);\r\nend\r\n\r\ncommand 'enum predecessor do\r\n  self from-enum-integer: (self to-enum-integer - 1);\r\nend\r\n\r\ncommand (From0 is 'enum) to: (To0 is 'enum) do\r\n  let From = From0 to-enum-integer;\r\n  let To = To0 to-enum-integer;\r\n  for I in From to: To do From0 from-enum-integer: I end\r\nend"}