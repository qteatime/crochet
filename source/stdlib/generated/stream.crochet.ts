export default {"filename":"builtin stream.crochet","source":"% crochet\r\n\r\ncommand (X is stream) count =\r\n  foreign crochet.native.stream.count(X);\r\n\r\ncommand (X is stream) first =\r\n  foreign crochet.native.stream.first(X);\r\n\r\ncommand (X is stream) last =\r\n  foreign crochet.native.stream.last(X);\r\n\r\ncommand (X is stream) but-first = \r\n  foreign crochet.native.stream.but-first(X);\r\n\r\ncommand (X is stream) but-last = \r\n  foreign crochet.native.stream.but-last(X);\r\n\r\ncommand (X is stream) take: (N is integer) = \r\n  foreign crochet.native.stream.take(X, N);\r\n\r\ncommand (X is stream) drop: (N is integer) = \r\n  foreign crochet.native.stream.drop(X, N);\r\n\r\ncommand (X is stream) ++ (Y is stream) = \r\n  foreign crochet.native.stream.concat(X, Y);\r\n\r\ncommand (X is stream) zip: (Y is stream) = \r\n  foreign crochet.native.stream.zip(X, Y);\r\n\r\ncommand (X is stream) random-choice =\r\n  foreign crochet.native.stream.random-choice(X);\r\n\r\ncommand (X is stream) shuffle =\r\n  foreign crochet.native.stream.shuffle(X);\r\n\r\ncommand (X is stream) -sort-by: Key =\r\n  foreign crochet.native.stream.sort-by(X, Key);\r\n\r\ncommand stream sort: (Score is partial) do\r\n  let Stream = for X in self do [score -> Score(X), value -> X] end;\r\n  (Stream sort-by: \"score\").value;\r\nend\r\n\r\ncommand stream sort do\r\n  let Stream = for X in self do [score -> X, value -> X] end;\r\n  (Stream sort-by: \"score\").value;\r\nend\r\n\r\ncommand (Stream is stream) sort-by: (Key is text) do\r\n  Stream -sort-by: Key;\r\nend\r\n\r\ncommand (X is stream) reverse =\r\n  foreign crochet.native.stream.reverse(X);"}